{
  "version": 3,
  "sources": ["../../../../data/mods/clover/random-teams.ts"],
  "sourcesContent": ["/* eslint max-len: [\"error\", 240] */\n\nimport {Dex, toID} from '../../../sim/dex';\nimport {Species} from '../../../sim/dex-species';\nimport {PRNG, PRNGSeed} from '../../../sim/prng';\n\ninterface RandomBattleSetData {\n\tnicknames?: string[];\n\tsets?: {\n\t\tabilities?: string[],\n\t\titems?: string[],\n\t\tmoves?: string[],\n\t\tlockedMoves?: string[],\n\t\tlevel?: number,\n\t}[];\n}\nexport type RandomBattleSets = Record<string, RandomBattleSetData>;\n\nexport interface TeamData {\n\ttypeCount: {[k: string]: number};\n\ttypeComboCount: {[k: string]: number};\n\tbaseFormes: {[k: string]: number};\n\tmegaCount?: number;\n\tzCount?: number;\n\thas: {[k: string]: number};\n\tforceResult: boolean;\n\tweaknesses: {[k: string]: number};\n\tresistances: {[k: string]: number};\n\tweather?: string;\n\teeveeLimCount?: number;\n\tgigantamax?: boolean;\n}\n\nexport class RandomTeams {\n\tdex: ModdedDex;\n\tgen: number;\n\treadonly maxTeamSize: number;\n\tfactoryTier: string;\n\tformat: Format;\n\tprng: PRNG;\n\tnoLead: string[] = [];\n\n\tconstructor(format: Format | string, prng: PRNG | PRNGSeed | null) {\n\t\tformat = Dex.formats.get(format);\n\t\tthis.dex = Dex.forFormat(format);\n\t\tthis.gen = this.dex.gen;\n\t\tconst ruleTable = Dex.formats.getRuleTable(format);\n\t\tthis.maxTeamSize = ruleTable.maxTeamSize;\n\n\t\tthis.factoryTier = '';\n\t\tthis.format = format;\n\t\tthis.prng = prng && !Array.isArray(prng) ? prng : new PRNG(prng);\n\t}\n\n\tsetSeed(prng?: PRNG | PRNGSeed) {\n\t\tthis.prng = prng && !Array.isArray(prng) ? prng : new PRNG(prng);\n\t}\n\n\tgetTeam(options?: PlayerOptions | null): PokemonSet[] {\n\t\tconst generatorName = typeof this.format.team === 'string' && this.format.team.startsWith('random') ? this.format.team + 'Team' : '';\n\t\t// @ts-ignore\n\t\treturn this[generatorName || 'randomTeam'](options);\n\t}\n\n\trandomChance(numerator: number, denominator: number) {\n\t\treturn this.prng.randomChance(numerator, denominator);\n\t}\n\n\tsample<T>(items: readonly T[]): T {\n\t\treturn this.prng.sample(items);\n\t}\n\n\trandom(m?: number, n?: number) {\n\t\treturn this.prng.next(m, n);\n\t}\n\n\t/**\n\t * Remove an element from an unsorted array significantly faster\n\t * than .splice\n\t */\n\tfastPop<T>(list: T[], index: number) {\n\t\t// If an array doesn't need to be in order, replacing the\n\t\t// element at the given index with the removed element\n\t\t// is much, much faster than using list.splice(index, 1).\n\t\tconst length = list.length;\n\t\tconst element = list[index];\n\t\tlist[index] = list[length - 1];\n\t\tlist.pop();\n\t\treturn element;\n\t}\n\n\t/**\n\t * Remove a random element from an unsorted array and return it.\n\t * Uses the battle's RNG if in a battle.\n\t */\n\tsampleNoReplace<T>(list: T[]) {\n\t\tconst length = list.length;\n\t\tconst index = this.random(length);\n\t\treturn this.fastPop(list, index);\n\t}\n\n\tqueryMoves(moves: string[] | null, hasType: {[k: string]: boolean} = {}, hasAbility: {[k: string]: boolean} = {}, movePool: string[] = []) {\n\t\t// This is primarily a helper function for random setbuilder functions.\n\t\tconst counter: {[k: string]: any} = {\n\t\t\tPhysical: 0, Special: 0, Status: 0, damage: 0, recovery: 0, stab: 0, inaccurate: 0, priority: 0, recoil: 0, drain: 0, sound: 0,\n\t\t\tadaptability: 0, contrary: 0, ironfist: 0, serenegrace: 0, sheerforce: 0, skilllink: 0, strongjaw: 0, technician: 0,\n\t\t\tphysicalsetup: 0, specialsetup: 0, mixedsetup: 0, speedsetup: 0, physicalpool: 0, specialpool: 0, hazards: 0,\n\t\t\tdamagingMoves: [],\n\t\t\tdamagingMoveIndex: {},\n\t\t\tsetupType: '',\n\t\t\tBug: 0, Dark: 0, Dragon: 0, Electric: 0, Fairy: 0, Fighting: 0, Fire: 0, Flying: 0, Ghost: 0, Grass: 0, Ground: 0,\n\t\t\tIce: 0, Normal: 0, Poison: 0, Psychic: 0, Rock: 0, Steel: 0, Water: 0,\n\t\t};\n\n\t\tlet typeDef: string;\n\t\tfor (typeDef in this.dex.data.TypeChart) {\n\t\t\tcounter[typeDef] = 0;\n\t\t}\n\n\t\tif (!moves || !moves.length) return counter;\n\n\t\t// Moves that restore HP:\n\t\tconst RecoveryMove = [\n\t\t\t'healorder', 'milkdrink', 'moonlight', 'morningsun', 'recover', 'roost', 'shoreup', 'slackoff', 'softboiled', 'strengthsap', 'synthesis',\n\t\t];\n\t\t// Moves which drop stats:\n\t\tconst ContraryMove = [\n\t\t\t'closecombat', 'leafstorm', 'overheat', 'superpower', 'vcreate',\n\t\t];\n\t\t// Moves that boost Attack:\n\t\tconst PhysicalSetup = [\n\t\t\t'bellydrum', 'bulkup', 'coil', 'curse', 'dragondance', 'honeclaws', 'howl', 'poweruppunch', 'swordsdance',\n\t\t];\n\t\t// Moves which boost Special Attack:\n\t\tconst SpecialSetup = [\n\t\t\t'calmmind', 'chargebeam', 'geomancy', 'nastyplot', 'quiverdance', 'tailglow',\n\t\t];\n\t\t// Moves which boost Attack AND Special Attack:\n\t\tconst MixedSetup = [\n\t\t\t'clangoroussoul', 'growth', 'happyhour', 'holdhands', 'noretreat', 'shellsmash', 'workup',\n\t\t];\n\t\t// Moves which boost Speed:\n\t\tconst SpeedSetup = [\n\t\t\t'agility', 'autotomize', 'flamecharge', 'rockpolish', 'shiftgear',\n\t\t];\n\t\t// Moves that shouldn't be the only STAB moves:\n\t\tconst NoStab = [\n\t\t\t'accelerock', 'aquajet', 'bounce', 'breakingswipe', 'explosion', 'fakeout', 'firstimpression', 'flamecharge', 'flipturn',\n\t\t\t'iceshard', 'machpunch', 'pluck', 'pursuit', 'quickattack', 'selfdestruct', 'skydrop', 'suckerpunch', 'watershuriken',\n\n\t\t\t'clearsmog', 'eruption', 'icywind', 'incinerate', 'meteorbeam', 'snarl', 'vacuumwave', 'voltswitch', 'waterspout',\n\t\t];\n\n\t\t// Iterate through all moves we've chosen so far and keep track of what they do:\n\t\tfor (const [k, moveId] of moves.entries()) {\n\t\t\tconst move = this.dex.moves.get(moveId);\n\t\t\tconst moveid = move.id;\n\t\t\tlet movetype = move.type;\n\t\t\tif (['judgment', 'multiattack', 'revelationdance'].includes(moveid)) movetype = Object.keys(hasType)[0];\n\t\t\tif (move.damage || move.damageCallback) {\n\t\t\t\t// Moves that do a set amount of damage:\n\t\t\t\tcounter['damage']++;\n\t\t\t\tcounter.damagingMoves.push(move);\n\t\t\t\tcounter.damagingMoveIndex[moveid] = k;\n\t\t\t} else {\n\t\t\t\t// Are Physical/Special/Status moves:\n\t\t\t\tcounter[move.category]++;\n\t\t\t}\n\t\t\t// Moves that have a low base power:\n\t\t\tif (moveid === 'lowkick' || (move.basePower && move.basePower <= 60 && moveid !== 'rapidspin')) counter['technician']++;\n\t\t\t// Moves that hit up to 5 times:\n\t\t\tif (move.multihit && Array.isArray(move.multihit) && move.multihit[1] === 5) counter['skilllink']++;\n\t\t\tif (move.recoil || move.hasCrashDamage) counter['recoil']++;\n\t\t\tif (move.drain) counter['drain']++;\n\t\t\t// Moves which have a base power, but aren't super-weak like Rapid Spin:\n\t\t\tif (move.basePower > 30 || move.multihit || move.basePowerCallback || moveid === 'infestation' || moveid === 'naturepower') {\n\t\t\t\tcounter[movetype]++;\n\t\t\t\tif (hasType[movetype]) {\n\t\t\t\t\tcounter['adaptability']++;\n\t\t\t\t\t// STAB:\n\t\t\t\t\t// Certain moves aren't acceptable as a Pokemon's only STAB attack\n\t\t\t\t\tif (!NoStab.includes(moveid) && (moveid !== 'hiddenpower' || Object.keys(hasType).length === 1)) {\n\t\t\t\t\t\tcounter['stab']++;\n\t\t\t\t\t\t// Ties between Physical and Special setup should broken in favor of STABs\n\t\t\t\t\t\tcounter[move.category] += 0.1;\n\t\t\t\t\t}\n\t\t\t\t} else if (movetype === 'Normal' && (hasAbility['Aerilate'] || hasAbility['Galvanize'] || hasAbility['Pixilate'] || hasAbility['Refrigerate'])) {\n\t\t\t\t\tcounter['stab']++;\n\t\t\t\t} else if (move.priority === 0 && (hasAbility['Libero'] || hasAbility['Protean']) && !NoStab.includes(moveid)) {\n\t\t\t\t\tcounter['stab']++;\n\t\t\t\t} else if (movetype === 'Steel' && hasAbility['Steelworker']) {\n\t\t\t\t\tcounter['stab']++;\n\t\t\t\t}\n\t\t\t\tif (move.flags['bite']) counter['strongjaw']++;\n\t\t\t\tif (move.flags['punch']) counter['ironfist']++;\n\t\t\t\tif (move.flags['sound']) counter['sound']++;\n\t\t\t\tcounter.damagingMoves.push(move);\n\t\t\t\tcounter.damagingMoveIndex[moveid] = k;\n\t\t\t}\n\t\t\t// Moves with secondary effects:\n\t\t\tif (move.secondary) {\n\t\t\t\tcounter['sheerforce']++;\n\t\t\t\tif (move.secondary.chance && move.secondary.chance >= 20 && move.secondary.chance < 100) {\n\t\t\t\t\tcounter['serenegrace']++;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Moves with low accuracy:\n\t\t\tif (move.accuracy && move.accuracy !== true && move.accuracy < 90) counter['inaccurate']++;\n\t\t\t// Moves with non-zero priority:\n\t\t\tif (move.category !== 'Status' && (move.priority !== 0 || (moveid === 'grassyglide' && hasAbility['Grassy Surge']))) {\n\t\t\t\tcounter['priority']++;\n\t\t\t}\n\n\t\t\t// Moves that change stats:\n\t\t\tif (RecoveryMove.includes(moveid)) counter['recovery']++;\n\t\t\tif (ContraryMove.includes(moveid)) counter['contrary']++;\n\t\t\tif (PhysicalSetup.includes(moveid)) {\n\t\t\t\tcounter['physicalsetup']++;\n\t\t\t\tcounter.setupType = 'Physical';\n\t\t\t} else if (SpecialSetup.includes(moveid)) {\n\t\t\t\tcounter['specialsetup']++;\n\t\t\t\tcounter.setupType = 'Special';\n\t\t\t}\n\t\t\tif (MixedSetup.includes(moveid)) counter['mixedsetup']++;\n\t\t\tif (SpeedSetup.includes(moveid)) counter['speedsetup']++;\n\t\t\tif (['spikes', 'stealthrock', 'stickyweb', 'toxicspikes'].includes(moveid)) counter['hazards']++;\n\t\t}\n\n\t\t// Keep track of the available moves\n\t\tfor (const moveid of movePool) {\n\t\t\tconst move = this.dex.moves.get(moveid);\n\t\t\tif (move.damageCallback) continue;\n\t\t\tif (move.category === 'Physical') counter['physicalpool']++;\n\t\t\tif (move.category === 'Special') counter['specialpool']++;\n\t\t}\n\n\t\t// Choose a setup type:\n\t\tif (counter['mixedsetup']) {\n\t\t\tcounter.setupType = 'Mixed';\n\t\t} else if (counter['physicalsetup'] && counter['specialsetup']) {\n\t\t\tconst pool = {\n\t\t\t\tPhysical: counter.Physical + counter['physicalpool'],\n\t\t\t\tSpecial: counter.Special + counter['specialpool'],\n\t\t\t};\n\t\t\tif (pool.Physical === pool.Special) {\n\t\t\t\tif (counter.Physical > counter.Special) counter.setupType = 'Physical';\n\t\t\t\tif (counter.Special > counter.Physical) counter.setupType = 'Special';\n\t\t\t} else {\n\t\t\t\tcounter.setupType = pool.Physical > pool.Special ? 'Physical' : 'Special';\n\t\t\t}\n\t\t} else if (counter.setupType === 'Physical') {\n\t\t\tif ((counter.Physical < 2 && (!counter.stab || !counter['physicalpool'])) && (!moves.includes('rest') || !moves.includes('sleeptalk'))) {\n\t\t\t\tcounter.setupType = '';\n\t\t\t}\n\t\t} else if (counter.setupType === 'Special') {\n\t\t\tif ((counter.Special < 2 && (!counter.stab || !counter['specialpool'])) && (!moves.includes('rest') || !moves.includes('sleeptalk')) && (!moves.includes('wish') || !moves.includes('protect'))) {\n\t\t\t\tcounter.setupType = '';\n\t\t\t}\n\t\t}\n\n\t\tcounter['Physical'] = Math.floor(counter['Physical']);\n\t\tcounter['Special'] = Math.floor(counter['Special']);\n\n\t\treturn counter;\n\t}\n\n\trandomSets: RandomBattleSets = require('./random-sets.json');\n\n\trandomSet(species: string | Species, teamDetails: RandomTeamsTypes.TeamDetails = {}, isLead = false, isDoubles = false, isCloveronly = false): RandomTeamsTypes.RandomSet {\n\t\tspecies = this.dex.species.get(species);\n\t\tlet forme = species.name;\n\t\tlet gmax = false;\n\n\t\tif (typeof species.battleOnly === 'string') {\n\t\t\t// Only change the forme. The species has custom moves, and may have different typing and requirements.\n\t\t\tforme = species.battleOnly;\n\t\t}\n\t\tif (species.cosmeticFormes) {\n\t\t\tforme = this.sample([species.name].concat(species.cosmeticFormes));\n\t\t}\n\t\tif (species.name.endsWith('-Gmax')) {\n\t\t\tforme = species.name.slice(0, -5);\n\t\t\tgmax = true;\n\t\t}\n\n\t\tlet nickname: string | undefined = undefined;\n\t\tconst cloverSetData = this.randomSets[species.id];\n\t\tif (cloverSetData && cloverSetData.nicknames) {\n\t\t\tnickname = this.sample(cloverSetData.nicknames);\n\t\t}\n\n\t\tconst randomBattleSet = cloverSetData && cloverSetData.sets ?\n\t\t\tthis.sample(cloverSetData.sets) :\n\t\t\t{};\n\n\t\tconst singlesMoves = randomBattleSet.moves || species.randomBattleMoves;\n\t\tconst randMoves = !isDoubles ? singlesMoves : (species.randomDoubleBattleMoves || singlesMoves);\n\t\tconst lockedMoves = randomBattleSet.lockedMoves || [];\n\t\tconst movePool = (randMoves || Object.keys(this.dex.data.Learnsets[species.id]!.learnset!)).slice();\n\t\tconst lockedMovePool = lockedMoves.slice();\n\t\tconst rejectedPool = [];\n\t\tconst moves: string[] = [];\n\t\tlet ability = '';\n\t\tlet item = '';\n\t\tconst evs = {\n\t\t\thp: 85, atk: 85, def: 85, spa: 85, spd: 85, spe: 85,\n\t\t};\n\t\tconst ivs = {\n\t\t\thp: 31, atk: 31, def: 31, spa: 31, spd: 31, spe: 31,\n\t\t};\n\t\tconst hasType: {[k: string]: true} = {};\n\t\thasType[species.types[0]] = true;\n\t\tif (species.types[1]) {\n\t\t\thasType[species.types[1]] = true;\n\t\t}\n\t\tconst hasAbility: {[k: string]: true} = {};\n\t\thasAbility[species.abilities[0]] = true;\n\t\tif (species.abilities[1]) {\n\t\t\thasAbility[species.abilities[1]] = true;\n\t\t}\n\t\tif (species.abilities['H']) {\n\t\t\thasAbility[species.abilities['H']] = true;\n\t\t}\n\n\t\tlet hasMove: {[k: string]: boolean} = {};\n\t\tlet counter;\n\n\t\tdo {\n\t\t\t// Keep track of all moves we have:\n\t\t\thasMove = {};\n\t\t\tfor (const moveid of moves) {\n\t\t\t\thasMove[moveid] = true;\n\t\t\t}\n\n\t\t\t// Choose next 4 moves from learnset/viable moves and add them to moves list:\n\t\t\tconst pool = movePool.length ? movePool : rejectedPool;\n\t\t\twhile (moves.length < 4 && pool.length) {\n\t\t\t\tconst moveid = this.sampleNoReplace(pool);\n\t\t\t\thasMove[moveid] = true;\n\t\t\t\tmoves.push(moveid);\n\t\t\t}\n\n\t\t\tcounter = this.queryMoves(moves, hasType, hasAbility, movePool);\n\n\t\t\t// Iterate through the moves again, this time to cull them:\n\t\t\tfor (const [k, moveId] of moves.entries()) {\n\t\t\t\tconst move = this.dex.moves.get(moveId);\n\t\t\t\tconst moveid = move.id;\n\t\t\t\tlet rejected = false;\n\t\t\t\tlet isSetup = false;\n\n\t\t\t\tswitch (moveid) {\n\t\t\t\t// Not very useful without their supporting moves\n\t\t\t\tcase 'acrobatics': case 'junglehealing':\n\t\t\t\t\tif (!counter.setupType && !isDoubles) rejected = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'destinybond': case 'healbell':\n\t\t\t\t\tif (movePool.includes('protect') || movePool.includes('wish')) rejected = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'dualwingbeat': case 'fly': case 'storedpower':\n\t\t\t\t\tif (!hasType[move.type] && !counter.setupType && !!counter.Status) rejected = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'fireblast':\n\t\t\t\t\tif (hasAbility['Serene Grace'] && (!hasMove['trick'] || counter.Status > 1)) rejected = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'firepunch':\n\t\t\t\t\tif (movePool.includes('bellydrum') || hasMove['earthquake'] && movePool.includes('substitute')) rejected = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'flamecharge': case 'sacredsword':\n\t\t\t\t\tif (counter.damagingMoves.length < 3 && !counter.setupType) rejected = true;\n\t\t\t\t\tif (!hasType['Grass'] && movePool.includes('swordsdance')) rejected = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'futuresight':\n\t\t\t\t\tif (!counter.Status || !hasMove['teleport']) rejected = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'hypervoice':\n\t\t\t\t\tif (hasType['Electric'] && movePool.includes('thunderbolt')) rejected = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'payback': case 'psychocut':\n\t\t\t\t\tif (!counter.Status || hasMove['rest'] && hasMove['sleeptalk']) rejected = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'rest':\n\t\t\t\t\tif (movePool.includes('sleeptalk')) rejected = true;\n\t\t\t\t\tif (!hasMove['sleeptalk'] && (movePool.includes('bulkup') || movePool.includes('calmmind') || movePool.includes('coil') || movePool.includes('curse'))) rejected = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'sleeptalk':\n\t\t\t\t\tif (!hasMove['rest']) rejected = true;\n\t\t\t\t\tif (movePool.length > 1 && !hasAbility['Contrary']) {\n\t\t\t\t\t\tconst rest = movePool.indexOf('rest');\n\t\t\t\t\t\tif (rest >= 0) this.fastPop(movePool, rest);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'switcheroo': case 'trick':\n\t\t\t\t\tif (counter.Physical + counter.Special < 3 || hasMove['futuresight'] || hasMove['rapidspin']) rejected = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'trickroom':\n\t\t\t\t\tif (counter.damagingMoves.length < 2 || movePool.includes('nastyplot') || isLead || teamDetails.stickyWeb) rejected = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'zenheadbutt':\n\t\t\t\t\tif (movePool.includes('boltstrike')) rejected = true;\n\t\t\t\t\tbreak;\n\n\t\t\t\t// Set up once and only if we have the moves for it\n\t\t\t\tcase 'bellydrum': case 'bulkup': case 'coil': case 'curse': case 'dragondance': case 'honeclaws': case 'swordsdance':\n\t\t\t\t\tif (counter.setupType !== 'Physical') rejected = true;\n\t\t\t\t\tif (counter.Physical + counter['physicalpool'] < 2 && (!hasMove['rest'] || !hasMove['sleeptalk'])) rejected = true;\n\t\t\t\t\tif (moveid === 'swordsdance' && hasMove['dragondance']) rejected = true;\n\t\t\t\t\tisSetup = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'calmmind': case 'nastyplot':\n\t\t\t\t\tif (counter.setupType !== 'Special') rejected = true;\n\t\t\t\t\tif (counter.Special + counter['specialpool'] < 2 && (!hasMove['rest'] || !hasMove['sleeptalk']) && (!hasMove['wish'] || !hasMove['protect'])) rejected = true;\n\t\t\t\t\tif (hasMove['healpulse'] || moveid === 'calmmind' && hasMove['trickroom']) rejected = true;\n\t\t\t\t\tisSetup = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'quiverdance':\n\t\t\t\t\tisSetup = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'clangoroussoul': case 'shellsmash': case 'workup':\n\t\t\t\t\tif (counter.setupType !== 'Mixed') rejected = true;\n\t\t\t\t\tif (counter.damagingMoves.length + counter['physicalpool'] + counter['specialpool'] < 2) rejected = true;\n\t\t\t\t\tisSetup = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'agility': case 'autotomize': case 'rockpolish': case 'shiftgear':\n\t\t\t\t\tif (counter.damagingMoves.length < 2 || hasMove['rest']) rejected = true;\n\t\t\t\t\tif (movePool.includes('calmmind') || movePool.includes('nastyplot')) rejected = true;\n\t\t\t\t\tif (!counter.setupType) isSetup = true;\n\t\t\t\t\tbreak;\n\n\t\t\t\t// Bad after setup\n\t\t\t\tcase 'counter': case 'reversal':\n\t\t\t\t\tif (counter.setupType) rejected = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'firstimpression': case 'glare': case 'icywind': case 'tailwind': case 'waterspout':\n\t\t\t\t\tif ((counter.setupType && !isDoubles) || !!counter['speedsetup'] || hasMove['rest']) rejected = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'bulletpunch': case 'rockblast':\n\t\t\t\t\tif (!!counter['speedsetup'] || counter.damagingMoves.length < 2) rejected = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'closecombat': case 'flashcannon': case 'pollenpuff':\n\t\t\t\t\tif ((hasMove['substitute'] && !hasType['Fighting']) || hasMove['toxic'] && movePool.includes('substitute')) rejected = true;\n\t\t\t\t\tif (moveid === 'closecombat' && (hasMove['highjumpkick'] || movePool.includes('highjumpkick')) && !counter.setupType) rejected = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'defog':\n\t\t\t\t\tif (counter.setupType || hasMove['healbell'] || hasMove['toxicspikes'] || teamDetails.defog) rejected = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'fakeout':\n\t\t\t\t\tif (counter.setupType || hasMove['protect'] || hasMove['rapidspin'] || hasMove['substitute'] || hasMove['uturn']) rejected = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'healingwish': case 'memento':\n\t\t\t\t\tif (counter.setupType || !!counter['recovery'] || hasMove['substitute'] || hasMove['uturn']) rejected = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'highjumpkick': case 'machpunch':\n\t\t\t\t\tif (hasMove['curse']) rejected = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'leechseed': case 'teleport':\n\t\t\t\t\tif (counter.setupType || !!counter['speedsetup']) rejected = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'partingshot':\n\t\t\t\t\tif (!!counter['speedsetup'] || hasMove['bulkup'] || hasMove['uturn']) rejected = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'protect':\n\t\t\t\t\tif ((counter.setupType && !hasMove['wish'] && !isDoubles) || hasMove['rest'] && hasMove['sleeptalk']) rejected = true;\n\t\t\t\t\tif (counter.Status < 2 && !hasAbility['Hunger Switch'] && !hasAbility['Speed Boost'] && !isDoubles) rejected = true;\n\t\t\t\t\tif (movePool.includes('leechseed') || movePool.includes('toxic') && !hasMove['wish']) rejected = true;\n\t\t\t\t\tif (isDoubles && (movePool.includes('fakeout') || movePool.includes('shellsmash') || movePool.includes('spore') || hasMove['tailwind'] || hasMove['waterspout'])) rejected = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'rapidspin':\n\t\t\t\t\tif (hasMove['curse'] || hasMove['nastyplot'] || hasMove['shellsmash'] || teamDetails.rapidSpin) rejected = true;\n\t\t\t\t\tif (counter.setupType && counter['Fighting'] >= 2) rejected = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'shadowsneak':\n\t\t\t\t\tif (hasMove['substitute'] || hasMove['trickroom']) rejected = true;\n\t\t\t\t\tif (hasMove['dualwingbeat'] || hasMove['toxic'] || hasMove['rest'] && hasMove['sleeptalk']) rejected = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'spikes':\n\t\t\t\t\tif (counter.setupType || teamDetails.spikes && teamDetails.spikes > 1) rejected = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'stealthrock':\n\t\t\t\t\tif (counter.setupType || !!counter['speedsetup'] || hasMove['rest'] || hasMove['substitute'] || hasMove['trickroom'] || teamDetails.stealthRock) rejected = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'stickyweb':\n\t\t\t\t\tif (counter.setupType === 'Special' || teamDetails.stickyWeb) rejected = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'taunt':\n\t\t\t\t\tif (hasMove['nastyplot'] || hasMove['swordsdance']) rejected = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'thunderwave': case 'voltswitch':\n\t\t\t\t\tif (counter.setupType || !!counter['speedsetup'] || hasMove['raindance']) rejected = true;\n\t\t\t\t\tif (isDoubles && (hasMove['electroweb'] || hasMove['nuzzle'])) rejected = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'toxic':\n\t\t\t\t\tif (counter.setupType || hasMove['sludgewave'] || hasMove['thunderwave'] || hasMove['willowisp']) rejected = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'toxicspikes':\n\t\t\t\t\tif (counter.setupType || teamDetails.toxicSpikes) rejected = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'uturn':\n\t\t\t\t\tif (!!counter['speedsetup'] || (counter.setupType && (!hasType['Bug'] || !counter.recovery))) rejected = true;\n\t\t\t\t\tif (isDoubles && hasMove['leechlife']) rejected = true;\n\t\t\t\t\tbreak;\n\n\t\t\t\t// Ineffective having both\n\t\t\t\t// Attacks:\n\t\t\t\tcase 'explosion':\n\t\t\t\t\tif (!!counter['recovery'] || hasMove['painsplit'] || hasMove['wish']) rejected = true;\n\t\t\t\t\tif (!!counter['speedsetup'] || hasMove['curse'] || hasMove['drainpunch'] || hasMove['rockblast']) rejected = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'facade':\n\t\t\t\t\tif (!!counter['recovery'] || movePool.includes('doubleedge')) rejected = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'quickattack':\n\t\t\t\t\tif (!!counter['speedsetup'] || hasType['Rock'] && !!counter.Status) rejected = true;\n\t\t\t\t\tif (counter.Physical > 3 && movePool.includes('uturn')) rejected = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'blazekick':\n\t\t\t\t\tif (counter.Special >= 1) rejected = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'firefang': case 'flamethrower':\n\t\t\t\t\tif (hasMove['heatwave'] || hasMove['overheat'] || hasMove['fireblast'] && counter.setupType !== 'Physical') rejected = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'overheat':\n\t\t\t\t\tif (hasMove['flareblitz'] || isDoubles && hasMove['calmmind']) rejected = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'aquajet': case 'psychicfangs':\n\t\t\t\t\tif (hasMove['rapidspin'] || hasMove['taunt']) rejected = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'aquatail': case 'flipturn': case 'retaliate':\n\t\t\t\t\tif (hasMove['aquajet'] || !!counter.Status) rejected = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'hydropump':\n\t\t\t\t\tif (hasMove['scald'] && ((counter.Special < 4 && !hasMove['uturn']) || (species.types.length > 1 && counter.stab < 3))) rejected = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'scald':\n\t\t\t\t\tif (hasMove['waterpulse']) rejected = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'thunderbolt':\n\t\t\t\t\tif (hasMove['powerwhip']) rejected = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'gigadrain':\n\t\t\t\t\tif (hasMove['uturn'] || hasType['Poison'] && !counter['Poison']) rejected = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'leafblade':\n\t\t\t\t\tif ((hasMove['leafstorm'] || movePool.includes('leafstorm')) && counter.setupType !== 'Physical') rejected = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'leafstorm':\n\t\t\t\t\tif (hasMove['gigadrain'] && !!counter.Status) rejected = true;\n\t\t\t\t\tif (isDoubles && hasMove['energyball']) rejected = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'powerwhip':\n\t\t\t\t\tif (hasMove['leechlife'] || !hasType['Grass'] && counter.Physical > 3 && movePool.includes('uturn')) rejected = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'woodhammer':\n\t\t\t\t\tif (hasMove['hornleech'] && counter.Physical < 4) rejected = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'freezedry':\n\t\t\t\t\tif ((hasMove['blizzard'] && counter.setupType) || hasMove['icebeam'] && counter.Special < 4) rejected = true;\n\t\t\t\t\tif (movePool.includes('bodyslam') || movePool.includes('thunderwave') && hasType['Electric']) rejected = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'bodypress':\n\t\t\t\t\tif (hasMove['mirrorcoat'] || hasMove['whirlwind']) rejected = true;\n\t\t\t\t\tif (hasMove['shellsmash'] || hasMove['earthquake'] && movePool.includes('shellsmash')) rejected = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'circlethrow':\n\t\t\t\t\tif (hasMove['stormthrow'] && !hasMove['rest']) rejected = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'drainpunch':\n\t\t\t\t\tif (hasMove['closecombat'] || !hasType['Fighting'] && movePool.includes('swordsdance')) rejected = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'dynamicpunch': case 'thunderouskick':\n\t\t\t\t\tif (hasMove['closecombat'] || hasMove['facade']) rejected = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'focusblast':\n\t\t\t\t\tif (movePool.includes('shellsmash') || hasMove['rest'] && hasMove['sleeptalk']) rejected = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'hammerarm':\n\t\t\t\t\tif (hasMove['fakeout']) rejected = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'seismictoss':\n\t\t\t\t\tif (hasMove['protect'] && hasType['Water']) rejected = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'stormthrow':\n\t\t\t\t\tif (hasMove['rest'] && hasMove['sleeptalk']) rejected = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'superpower':\n\t\t\t\t\tif (hasMove['hydropump'] || counter.Physical >= 4 && movePool.includes('uturn')) rejected = true;\n\t\t\t\t\tif (hasMove['substitute'] && !hasAbility['Contrary']) rejected = true;\n\t\t\t\t\tif (hasAbility['Contrary']) isSetup = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'poisonjab':\n\t\t\t\t\tif (!hasType['Poison'] && counter.Status >= 2) rejected = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'earthquake':\n\t\t\t\t\tif (hasMove['bonemerang'] || hasMove['substitute'] && movePool.includes('toxic')) rejected = true;\n\t\t\t\t\tif (movePool.includes('bodypress') && movePool.includes('shellsmash')) rejected = true;\n\t\t\t\t\tif (isDoubles && (hasMove['earthpower'] || hasMove['highhorsepower'])) rejected = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'scorchingsands':\n\t\t\t\t\tif (hasMove['earthpower'] || hasMove['toxic'] && movePool.includes('earthpower')) rejected = true;\n\t\t\t\t\tif (hasMove['willowisp']) rejected = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'airslash':\n\t\t\t\t\tif ((hasMove['hurricane'] && !counter.setupType) || hasMove['rest'] && hasMove['sleeptalk']) rejected = true;\n\t\t\t\t\tif (movePool.includes('flamethrower') || hasAbility['Simple'] && !!counter['recovery']) rejected = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'bravebird':\n\t\t\t\t\tif (hasMove['dragondance']) rejected = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'hurricane':\n\t\t\t\t\tif (hasAbility['Tinted Lens'] && counter.setupType && !isDoubles) rejected = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'photongeyser':\n\t\t\t\t\tif (hasMove['morningsun']) rejected = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'psychic':\n\t\t\t\t\tif (hasMove['psyshock'] && (counter.setupType || isDoubles)) rejected = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'psyshock':\n\t\t\t\t\tif ((hasMove['psychic'] || hasAbility['Pixilate']) && counter.Special < 4 && !counter.setupType) rejected = true;\n\t\t\t\t\tif (hasAbility['Multiscale'] && !counter.setupType) rejected = true;\n\t\t\t\t\tif (isDoubles && hasMove['psychic']) rejected = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'bugbuzz':\n\t\t\t\t\tif (hasMove['uturn'] && !counter.setupType) rejected = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'leechlife':\n\t\t\t\t\tif (isDoubles && hasMove['lunge']) rejected = true;\n\t\t\t\t\tif (movePool.includes('firstimpression') || movePool.includes('spikes')) rejected = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'stoneedge':\n\t\t\t\t\tif (hasMove['rockblast'] || hasMove['rockslide'] || !!counter.Status && movePool.includes('rockslide')) rejected = true;\n\t\t\t\t\tif (hasAbility['Guts'] && (!hasMove['dynamicpunch'] || hasMove['spikes'])) rejected = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'poltergeist':\n\t\t\t\t\tif (hasMove['knockoff']) rejected = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'shadowball':\n\t\t\t\t\tif (hasAbility['Pixilate'] && (counter.setupType || counter.Status > 1)) rejected = true;\n\t\t\t\t\tif (isDoubles && hasMove ['phantomforce']) rejected = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'shadowclaw':\n\t\t\t\t\tif (hasType['Steel'] && hasMove['shadowsneak'] && counter.Physical < 4) rejected = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'dragonpulse': case 'spacialrend':\n\t\t\t\t\tif (hasMove['dracometeor'] && counter.Special < 4) rejected = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'darkpulse':\n\t\t\t\t\tif ((hasMove['foulplay'] || hasMove['knockoff'] || hasMove['suckerpunch'] || hasMove['defog']) && counter.setupType !== 'Special') rejected = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'knockoff':\n\t\t\t\t\tif (hasMove['darkestlariat']) rejected = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'suckerpunch':\n\t\t\t\t\tif (counter.damagingMoves.length < 2 || counter['Dark'] > 1 && !hasType['Dark']) rejected = true;\n\t\t\t\t\tif (hasMove['rest']) rejected = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'meteormash':\n\t\t\t\t\tif (movePool.includes('extremespeed')) rejected = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'dazzlinggleam':\n\t\t\t\t\tif (hasMove['fleurcannon'] || hasMove['moonblast'] || hasMove['petaldance']) rejected = true;\n\t\t\t\t\tbreak;\n\n\t\t\t\t// Status:\n\t\t\t\tcase 'bodyslam': case 'clearsmog':\n\t\t\t\t\tif (hasMove['sludgebomb'] || hasMove['toxic'] && !hasType['Normal']) rejected = true;\n\t\t\t\t\tif (hasMove['trick'] || movePool.includes('recover')) rejected = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'haze':\n\t\t\t\t\tif ((hasMove['stealthrock'] || movePool.includes('stealthrock')) && !teamDetails.stealthRock) rejected = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'hypnosis':\n\t\t\t\t\tif (hasMove['voltswitch']) rejected = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'willowisp': case 'yawn':\n\t\t\t\t\tif (hasMove['thunderwave'] || hasMove['toxic']) rejected = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'painsplit': case 'recover': case 'synthesis':\n\t\t\t\t\tif (hasMove['rest'] || hasMove['wish']) rejected = true;\n\t\t\t\t\tif (moveid === 'synthesis' && hasMove['gigadrain']) rejected = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'roost':\n\t\t\t\t\tif (hasMove['throatchop'] || hasMove['stoneedge'] && !hasType['Rock']) rejected = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'reflect': case 'lightscreen':\n\t\t\t\t\tif (teamDetails.screens) rejected = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'substitute':\n\t\t\t\t\tif (hasMove['facade'] || hasMove['rest'] || hasMove['uturn']) rejected = true;\n\t\t\t\t\tif (movePool.includes('bulkup') || movePool.includes('painsplit') || movePool.includes('roost') || movePool.includes('calmmind') && !counter['recovery']) rejected = true;\n\t\t\t\t\tif (isDoubles && movePool.includes('powerwhip')) rejected = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'helpinghand':\n\t\t\t\t\tif (hasMove['acupressure']) rejected = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'wideguard':\n\t\t\t\t\tif (hasMove['protect']) rejected = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\t// This move doesn't satisfy our setup requirements:\n\t\t\t\tif (((move.category === 'Physical' && counter.setupType === 'Special') || (move.category === 'Special' && counter.setupType === 'Physical')) && moveid !== 'photongeyser') {\n\t\t\t\t\t// Reject STABs last in case the setup type changes later on\n\t\t\t\t\tconst stabs: number = counter[species.types[0]] + (counter[species.types[1]] || 0);\n\t\t\t\t\tif (!hasType[move.type] || stabs > 1 || counter[move.category] < 2) rejected = true;\n\t\t\t\t}\n\n\t\t\t\t// Pokemon should have moves that benefit their types, stats, or ability\n\t\t\t\tif (!rejected && !move.damage && !isSetup && !move.weather && !move.stallingMove &&\n\t\t\t\t\t(isDoubles || (!['facade', 'lightscreen', 'reflect', 'sleeptalk', 'spore', 'substitute', 'switcheroo', 'toxic', 'whirlpool'].includes(moveid) && (move.category !== 'Status' || !move.flags.heal))) &&\n\t\t\t\t\t(!counter.setupType || counter.setupType === 'Mixed' || (move.category !== counter.setupType && move.category !== 'Status') || (counter[counter.setupType] + counter.Status > 3 && !counter.hazards)) &&\n\t\t\t\t(\n\t\t\t\t\t(!counter.stab && counter['physicalpool'] + counter['specialpool'] > 0) ||\n\t\t\t\t\t(hasType['Bug'] && movePool.includes('megahorn')) ||\n\t\t\t\t\t(hasType['Dark'] && (!counter['Dark'] || (hasMove['suckerpunch'] && (movePool.includes('knockoff') || movePool.includes('wickedblow'))))) ||\n\t\t\t\t\t(hasType['Dragon'] && !counter['Dragon'] && !hasMove['dragonascent'] && !hasMove['substitute'] && !(hasMove['rest'] && hasMove['sleeptalk'])) ||\n\t\t\t\t\t(hasType['Electric'] && (!counter['Electric'] || movePool.includes('thunder'))) ||\n\t\t\t\t\t(hasType['Fairy'] && !counter['Fairy'] && (movePool.includes('dazzlinggleam') || movePool.includes('fleurcannon') || movePool.includes('moonblast') || movePool.includes('playrough'))) ||\n\t\t\t\t\t(hasType['Fighting'] && (!counter['Fighting'] || !counter.stab)) ||\n\t\t\t\t\t(hasType['Fire'] && (!counter['Fire'] || movePool.includes('flareblitz')) && !hasMove['bellydrum']) ||\n\t\t\t\t\t((hasType['Flying'] || hasMove['swordsdance']) && !counter['Flying'] && (movePool.includes('airslash') || movePool.includes('bravebird') || movePool.includes('dualwingbeat') || movePool.includes('oblivionwing'))) ||\n\t\t\t\t\t(hasType['Ghost'] && (!counter['Ghost'] || movePool.includes('poltergeist') || movePool.includes('spectralthief')) && !counter['Dark']) ||\n\t\t\t\t\t(hasType['Grass'] && !counter['Grass'] && (species.baseStats.atk >= 100 || movePool.includes('leafstorm'))) ||\n\t\t\t\t\t(hasType['Ground'] && !counter['Ground']) ||\n\t\t\t\t\t(hasType['Ice'] && (!counter['Ice'] || movePool.includes('iciclecrash') || (hasAbility['Snow Warning'] && movePool.includes('blizzard')))) ||\n\t\t\t\t\t((hasType['Normal'] && hasAbility['Guts'] && movePool.includes('facade')) || (hasAbility['Pixilate'] && !counter['Normal'])) ||\n\t\t\t\t\t(hasType['Poison'] && !counter['Poison'] && (hasType['Ground'] || hasType['Psychic'] || counter.setupType || movePool.includes('gunkshot'))) ||\n\t\t\t\t\t(hasType['Psychic'] && !counter['Psychic'] && !hasType['Ghost'] && !hasType['Steel'] && (hasAbility['Psychic Surge'] || counter.setupType || movePool.includes('psychicfangs'))) ||\n\t\t\t\t\t(hasType['Rock'] && !counter['Rock'] && species.baseStats.atk >= 80) ||\n\t\t\t\t\t((hasType['Steel'] || hasAbility['Steelworker']) && (!counter['Steel'] || (hasMove['bulletpunch'] && counter.stab < 2)) && species.baseStats.atk >= 95) ||\n\t\t\t\t\t(hasType['Water'] && ((!counter['Water'] && !hasMove['hypervoice']) || movePool.includes('hypervoice'))) ||\n\t\t\t\t\t((hasAbility['Moody'] || hasMove['wish']) && movePool.includes('protect')) ||\n\t\t\t\t\t(((hasMove['lightscreen'] && movePool.includes('reflect')) || (hasMove['reflect'] && movePool.includes('lightscreen'))) && !teamDetails.screens) ||\n\t\t\t\t\t((movePool.includes('morningsun') || movePool.includes('recover') || movePool.includes('roost') || movePool.includes('slackoff') || movePool.includes('softboiled')) &&\n\t\t\t\t\t\t!!counter.Status && !counter.setupType && !hasMove['healingwish'] && !hasMove['switcheroo'] && !hasMove['trick'] && !hasMove['trickroom'] && !isDoubles) ||\n\t\t\t\t\t(movePool.includes('milkdrink') || movePool.includes('quiverdance') || movePool.includes('stickyweb') && !counter.setupType && !teamDetails.stickyWeb) ||\n\t\t\t\t\t(isLead && movePool.includes('stealthrock') && !!counter.Status && !counter.setupType && !counter['speedsetup'] && !hasMove['substitute']) ||\n\t\t\t\t\t(isDoubles && species.baseStats.def >= 140 && movePool.includes('bodypress'))\n\t\t\t\t)) {\n\t\t\t\t\t// Reject Status, non-STAB, or low basepower moves\n\t\t\t\t\tif (move.category === 'Status' || !hasType[move.type] || move.basePower && move.basePower < 50 && !move.multihit && !hasAbility['Technician']) {\n\t\t\t\t\t\trejected = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Sleep Talk shouldn't be selected without Rest\n\t\t\t\tif (moveid === 'rest' && rejected) {\n\t\t\t\t\tconst sleeptalk = movePool.indexOf('sleeptalk');\n\t\t\t\t\tif (sleeptalk >= 0) {\n\t\t\t\t\t\tif (movePool.length < 2) {\n\t\t\t\t\t\t\trejected = false;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis.fastPop(movePool, sleeptalk);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Remove rejected moves from the move list\n\t\t\t\tif (rejected && movePool.length) {\n\t\t\t\t\tif (move.category !== 'Status' && !move.damage) rejectedPool.push(moves[k]);\n\t\t\t\t\tmoves.splice(k, 1);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif (rejected && rejectedPool.length) {\n\t\t\t\t\tmoves.splice(k, 1);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t} while (moves.length < 4 && (movePool.length || rejectedPool.length));\n\n\t\tlet lockedMovesSelected = 0;\n\t\twhile (lockedMovePool.length && lockedMovesSelected < 4) {\n\t\t\tif (moves.length < 4) {\n\t\t\t\tmoves.push(this.sampleNoReplace(lockedMovePool));\n\t\t\t} else {\n\t\t\t\tconst lockedMove = this.sampleNoReplace(lockedMovePool);\n\t\t\t\tmoves[lockedMovesSelected] = lockedMove;\n\t\t\t\tlockedMovesSelected++;\n\t\t\t}\n\t\t}\n\n\t\tcounter = this.queryMoves(moves, hasType, hasAbility, movePool);\n\n\t\tif (randomBattleSet.abilities && randomBattleSet.abilities.length > 0) {\n\t\t\tability = this.sample(randomBattleSet.abilities);\n\t\t} else {\n\t\t\tconst abilities: string[] = Object.values(species.abilities);\n\t\t\tabilities.sort((a, b) => this.dex.abilities.get(b).rating - this.dex.abilities.get(a).rating);\n\t\t\tlet ability0 = this.dex.abilities.get(abilities[0]);\n\t\t\tlet ability1 = this.dex.abilities.get(abilities[1]);\n\t\t\tlet ability2 = this.dex.abilities.get(abilities[2]);\n\t\t\tif (abilities[1]) {\n\t\t\t\tif (abilities[2] && ability1.rating <= ability2.rating && this.randomChance(1, 2)) {\n\t\t\t\t\t[ability1, ability2] = [ability2, ability1];\n\t\t\t\t}\n\t\t\t\tif (ability0.rating <= ability1.rating && this.randomChance(1, 2)) {\n\t\t\t\t\t[ability0, ability1] = [ability1, ability0];\n\t\t\t\t} else if (ability0.rating - 0.6 <= ability1.rating && this.randomChance(2, 3)) {\n\t\t\t\t\t[ability0, ability1] = [ability1, ability0];\n\t\t\t\t}\n\t\t\t\tability = ability0.name;\n\n\t\t\t\tlet rejectAbility: boolean;\n\t\t\t\tdo {\n\t\t\t\t\trejectAbility = false;\n\t\t\t\t\tif (['Cloud Nine', 'Flare Boost', 'Hydration', 'Ice Body', 'Innards Out', 'Insomnia', 'Misty Surge', 'Quick Feet', 'Rain Dish', 'Snow Cloak', 'Steadfast', 'Steam Engine', 'Weak Armor'].includes(ability)) {\n\t\t\t\t\t\trejectAbility = true;\n\t\t\t\t\t} else if (['Adaptability', 'Contrary', 'Serene Grace', 'Skill Link', 'Strong Jaw'].includes(ability)) {\n\t\t\t\t\t\trejectAbility = !counter[toID(ability)];\n\t\t\t\t\t} else if (ability === 'Analytic') {\n\t\t\t\t\t\trejectAbility = (hasMove['rapidspin'] || species.nfe || isDoubles);\n\t\t\t\t\t} else if (ability === 'Blaze') {\n\t\t\t\t\t\trejectAbility = (isDoubles && hasAbility['Solar Power']);\n\t\t\t\t\t} else if (ability === 'Bulletproof' || ability === 'Overcoat') {\n\t\t\t\t\t\trejectAbility = (counter.setupType && hasAbility['Soundproof']);\n\t\t\t\t\t} else if (ability === 'Chlorophyll') {\n\t\t\t\t\t\trejectAbility = (species.baseStats.spe > 100 || !counter['Fire'] && !hasMove['sunnyday'] && !teamDetails['sun']);\n\t\t\t\t\t} else if (ability === 'Competitive') {\n\t\t\t\t\t\trejectAbility = (counter['Special'] < 2 || hasMove['rest'] && hasMove['sleeptalk']);\n\t\t\t\t\t} else if (ability === 'Compound Eyes' || ability === 'No Guard') {\n\t\t\t\t\t\trejectAbility = !counter['inaccurate'];\n\t\t\t\t\t} else if (ability === 'Cursed Body') {\n\t\t\t\t\t\trejectAbility = hasAbility['Infiltrator'];\n\t\t\t\t\t} else if (ability === 'Defiant') {\n\t\t\t\t\t\trejectAbility = !counter['Physical'];\n\t\t\t\t\t} else if (ability === 'Download') {\n\t\t\t\t\t\trejectAbility = counter.damagingMoves.length < 3;\n\t\t\t\t\t} else if (ability === 'Early Bird') {\n\t\t\t\t\t\trejectAbility = (hasType['Grass'] && isDoubles);\n\t\t\t\t\t} else if (ability === 'Flash Fire') {\n\t\t\t\t\t\trejectAbility = (this.dex.getEffectiveness('Fire', species) < -1 || hasAbility['Drought']);\n\t\t\t\t\t} else if (ability === 'Gluttony') {\n\t\t\t\t\t\trejectAbility = !hasMove['bellydrum'];\n\t\t\t\t\t} else if (ability === 'Guts') {\n\t\t\t\t\t\trejectAbility = (!hasMove['facade'] && !hasMove['sleeptalk'] && !species.nfe);\n\t\t\t\t\t} else if (ability === 'Harvest') {\n\t\t\t\t\t\trejectAbility = (hasAbility['Frisk'] && !isDoubles);\n\t\t\t\t\t} else if (ability === 'Hustle' || ability === 'Inner Focus') {\n\t\t\t\t\t\trejectAbility = (counter.Physical < 2 || hasAbility['Iron Fist']);\n\t\t\t\t\t} else if (ability === 'Infiltrator') {\n\t\t\t\t\t\trejectAbility = ((hasMove['rest'] && hasMove['sleeptalk']) || isDoubles && hasAbility['Clear Body']);\n\t\t\t\t\t} else if (ability === 'Intimidate') {\n\t\t\t\t\t\trejectAbility = (hasMove['bodyslam'] || hasMove['bounce'] || hasMove['tripleaxel']);\n\t\t\t\t\t} else if (ability === 'Iron Fist') {\n\t\t\t\t\t\trejectAbility = (counter['ironfist'] < 2 || hasMove['dynamicpunch']);\n\t\t\t\t\t} else if (ability === 'Justified') {\n\t\t\t\t\t\trejectAbility = (isDoubles && hasAbility['Inner Focus']);\n\t\t\t\t\t} else if (ability === 'Lightning Rod') {\n\t\t\t\t\t\trejectAbility = (species.types.includes('Ground') || counter.setupType === 'Physical');\n\t\t\t\t\t} else if (ability === 'Limber') {\n\t\t\t\t\t\trejectAbility = species.types.includes('Electric');\n\t\t\t\t\t} else if (ability === 'Liquid Voice') {\n\t\t\t\t\t\trejectAbility = !hasMove['hypervoice'];\n\t\t\t\t\t} else if (ability === 'Magic Guard') {\n\t\t\t\t\t\trejectAbility = (hasAbility['Tinted Lens'] && !counter.Status && !isDoubles);\n\t\t\t\t\t} else if (ability === 'Mold Breaker') {\n\t\t\t\t\t\trejectAbility = (hasAbility['Adaptability'] || hasAbility['Scrappy'] || (hasAbility['Sheer Force'] && !!counter['sheerforce']) || hasAbility['Unburden'] && counter.setupType);\n\t\t\t\t\t} else if (ability === 'Moxie') {\n\t\t\t\t\t\trejectAbility = (counter.Physical < 2 || hasMove['stealthrock']);\n\t\t\t\t\t} else if (ability === 'Neutralizing Gas') {\n\t\t\t\t\t\trejectAbility = !hasMove['toxicspikes'];\n\t\t\t\t\t} else if (ability === 'Overgrow') {\n\t\t\t\t\t\trejectAbility = !counter['Grass'];\n\t\t\t\t\t} else if (ability === 'Own Tempo') {\n\t\t\t\t\t\trejectAbility = !hasMove['petaldance'];\n\t\t\t\t\t} else if (ability === 'Power Construct') {\n\t\t\t\t\t\trejectAbility = (species.forme === '10%' && !isDoubles);\n\t\t\t\t\t} else if (ability === 'Prankster') {\n\t\t\t\t\t\trejectAbility = !counter['Status'];\n\t\t\t\t\t} else if (ability === 'Pressure') {\n\t\t\t\t\t\trejectAbility = (counter.setupType || counter.Status < 2 || isDoubles);\n\t\t\t\t\t} else if (ability === 'Refrigerate') {\n\t\t\t\t\t\trejectAbility = !counter['Normal'];\n\t\t\t\t\t} else if (ability === 'Regenerator') {\n\t\t\t\t\t\trejectAbility = hasAbility['Magic Guard'];\n\t\t\t\t\t} else if (ability === 'Reckless' || ability === 'Rock Head') {\n\t\t\t\t\t\trejectAbility = !counter['recoil'];\n\t\t\t\t\t} else if (ability === 'Sand Force' || ability === 'Sand Veil') {\n\t\t\t\t\t\trejectAbility = !teamDetails['sand'];\n\t\t\t\t\t} else if (ability === 'Sand Rush') {\n\t\t\t\t\t\trejectAbility = (!teamDetails['sand'] && (!counter.setupType || !counter['Rock'] || hasMove['rapidspin']));\n\t\t\t\t\t} else if (ability === 'Sap Sipper') {\n\t\t\t\t\t\trejectAbility = hasMove['roost'];\n\t\t\t\t\t} else if (ability === 'Scrappy') {\n\t\t\t\t\t\trejectAbility = (hasMove['earthquake'] && hasMove['milkdrink']);\n\t\t\t\t\t} else if (ability === 'Screen Cleaner') {\n\t\t\t\t\t\trejectAbility = !!teamDetails['screens'];\n\t\t\t\t\t} else if (ability === 'Shadow Tag') {\n\t\t\t\t\t\trejectAbility = (species.name === 'Gothitelle' && !isDoubles);\n\t\t\t\t\t} else if (ability === 'Shed Skin') {\n\t\t\t\t\t\trejectAbility = hasMove['dragondance'];\n\t\t\t\t\t} else if (ability === 'Sheer Force') {\n\t\t\t\t\t\trejectAbility = (!counter['sheerforce'] || hasAbility['Guts']);\n\t\t\t\t\t} else if (ability === 'Slush Rush') {\n\t\t\t\t\t\trejectAbility = (!teamDetails['hail'] && !hasAbility['Swift Swim']);\n\t\t\t\t\t} else if (ability === 'Sniper') {\n\t\t\t\t\t\trejectAbility = (counter['Water'] > 1 && !hasMove['focusenergy']);\n\t\t\t\t\t} else if (ability === 'Steely Spirit') {\n\t\t\t\t\t\trejectAbility = (hasMove['fakeout'] && !isDoubles);\n\t\t\t\t\t} else if (ability === 'Sturdy') {\n\t\t\t\t\t\trejectAbility = (hasMove['bulkup'] || !!counter['recoil'] || hasAbility['Solid Rock']);\n\t\t\t\t\t} else if (ability === 'Swarm') {\n\t\t\t\t\t\trejectAbility = (!counter['Bug'] || !!counter['recovery']);\n\t\t\t\t\t} else if (ability === 'Sweet Veil') {\n\t\t\t\t\t\trejectAbility = hasType['Grass'];\n\t\t\t\t\t} else if (ability === 'Swift Swim') {\n\t\t\t\t\t\trejectAbility = (!hasMove['raindance'] && (hasAbility['Intimidate'] || (hasAbility['Lightning Rod'] && !counter.setupType) || hasAbility['Rock Head'] || hasAbility['Slush Rush'] || hasAbility['Water Absorb']));\n\t\t\t\t\t} else if (ability === 'Synchronize') {\n\t\t\t\t\t\trejectAbility = counter.Status < 3;\n\t\t\t\t\t} else if (ability === 'Technician') {\n\t\t\t\t\t\trejectAbility = (!counter['technician'] || hasMove['tailslap'] || hasAbility['Punk Rock'] || movePool.includes('snarl'));\n\t\t\t\t\t} else if (ability === 'Tinted Lens') {\n\t\t\t\t\t\trejectAbility = (hasMove['defog'] || hasMove['hurricane'] || counter.Status > 2 && !counter.setupType);\n\t\t\t\t\t} else if (ability === 'Torrent') {\n\t\t\t\t\t\trejectAbility = (hasMove['focusenergy'] || hasMove['hypervoice']);\n\t\t\t\t\t} else if (ability === 'Tough Claws') {\n\t\t\t\t\t\trejectAbility = (hasType['Steel'] && !hasMove['fakeout']);\n\t\t\t\t\t} else if (ability === 'Unaware') {\n\t\t\t\t\t\trejectAbility = (counter.setupType || hasMove['stealthrock']);\n\t\t\t\t\t} else if (ability === 'Unburden') {\n\t\t\t\t\t\trejectAbility = (hasAbility['Prankster'] || !counter.setupType && !isDoubles);\n\t\t\t\t\t} else if (ability === 'Volt Absorb') {\n\t\t\t\t\t\trejectAbility = (this.dex.getEffectiveness('Electric', species) < -1);\n\t\t\t\t\t} else if (ability === 'Water Absorb') {\n\t\t\t\t\t\trejectAbility = (hasMove['raindance'] || hasAbility['Drizzle'] || hasAbility['Strong Jaw'] || hasAbility['Unaware'] || hasAbility['Volt Absorb']);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (rejectAbility) {\n\t\t\t\t\t\tif (ability === ability0.name && ability1.rating >= 1) {\n\t\t\t\t\t\t\tability = ability1.name;\n\t\t\t\t\t\t} else if (ability === ability1.name && abilities[2] && ability2.rating >= 1) {\n\t\t\t\t\t\t\tability = ability2.name;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// Default to the highest rated ability if all are rejected\n\t\t\t\t\t\t\tability = abilities[0];\n\t\t\t\t\t\t\trejectAbility = false;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} while (rejectAbility);\n\n\t\t\t\tif (species.name === 'Azumarill' && !isDoubles) {\n\t\t\t\t\tability = 'Sap Sipper';\n\t\t\t\t} else if (forme === 'Copperajah' && gmax) {\n\t\t\t\t\tability = 'Heavy Metal';\n\t\t\t\t} else if (hasAbility['Guts'] && (hasMove['facade'] || (hasMove['rest'] && hasMove['sleeptalk']))) {\n\t\t\t\t\tability = 'Guts';\n\t\t\t\t} else if (hasAbility['Moxie'] && (counter.Physical > 3 || hasMove['bounce']) && !isDoubles) {\n\t\t\t\t\tability = 'Moxie';\n\t\t\t\t} else if (isDoubles) {\n\t\t\t\t\tif (hasAbility['Competitive'] && ability !== 'Shadow Tag' && ability !== 'Strong Jaw') ability = 'Competitive';\n\t\t\t\t\tif (hasAbility['Curious Medicine'] && this.randomChance(1, 2)) ability = 'Curious Medicine';\n\t\t\t\t\tif (hasAbility['Friend Guard']) ability = 'Friend Guard';\n\t\t\t\t\tif (hasAbility['Gluttony'] && hasMove['recycle']) ability = 'Gluttony';\n\t\t\t\t\tif (hasAbility['Guts']) ability = 'Guts';\n\t\t\t\t\tif (hasAbility['Harvest']) ability = 'Harvest';\n\t\t\t\t\tif (hasAbility['Healer'] && hasAbility['Natural Cure']) ability = 'Healer';\n\t\t\t\t\tif (hasAbility['Intimidate']) ability = 'Intimidate';\n\t\t\t\t\tif (hasAbility['Klutz'] && ability === 'Limber') ability = 'Klutz';\n\t\t\t\t\tif (hasAbility['Magic Guard'] && ability !== 'Friend Guard' && ability !== 'Unaware') ability = 'Magic Guard';\n\t\t\t\t\tif (hasAbility['Ripen']) ability = 'Ripen';\n\t\t\t\t\tif (hasAbility['Stalwart']) ability = 'Stalwart';\n\t\t\t\t\tif (hasAbility['Storm Drain']) ability = 'Storm Drain';\n\t\t\t\t\tif (hasAbility['Telepathy'] && (ability === 'Pressure' || hasAbility['Analytic'])) ability = 'Telepathy';\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tability = ability0.name;\n\t\t\t}\n\t\t}\n\n\t\tif (randomBattleSet.items && randomBattleSet.items.length > 0) {\n\t\t\titem = this.sample(randomBattleSet.items);\n\t\t} else {\n\t\t\titem = !isDoubles ? 'Leftovers' : 'Sitrus Berry';\n\t\t\tif (species.requiredItems) {\n\t\t\t\titem = this.sample(species.requiredItems);\n\n\t\t\t// First, the extra high-priority items\n\t\t\t} else if (['Corsola', 'Garchomp', 'Tangrowth'].includes(species.name) && !!counter.Status && !counter.setupType && !isDoubles) {\n\t\t\t\titem = 'Rocky Helmet';\n\t\t\t} else if (species.name === 'Eternatus' && counter.Status < 2) {\n\t\t\t\titem = 'Metronome';\n\t\t\t} else if (species.name === 'Froslass' && !isDoubles) {\n\t\t\t\titem = 'Wide Lens';\n\t\t\t} else if (species.name === 'Latios' && counter.Special === 2 && !isDoubles) {\n\t\t\t\titem = 'Soul Dew';\n\t\t\t} else if (species.name === 'Lopunny') {\n\t\t\t\titem = isDoubles ? 'Iron Ball' : 'Toxic Orb';\n\t\t\t} else if (species.baseSpecies === 'Marowak') {\n\t\t\t\titem = 'Thick Club';\n\t\t\t} else if (species.baseSpecies === 'Pikachu' || species.baseSpecies === 'Pikotton') {\n\t\t\t\titem = 'Light Ball';\n\t\t\t} else if (species.baseSpecies === 'Masdawg' || species.baseSpecies === 'Pasdawg') {\n\t\t\t\titem = 'Thicc Bone';\n\t\t\t} else if (species.baseSpecies === 'Urswine') {\n\t\t\t\titem = 'Bacon Strip';\n\t\t\t} else if (species.baseSpecies === 'Pretzely') {\n\t\t\t\titem = 'Suede Shoes';\n\t\t\t} else if (species.baseSpecies === 'Caroline') {\n\t\t\t\titem = 'Bible';\n\t\t\t} else if (species.baseSpecies === 'Flameboyan') {\n\t\t\t\titem = 'Big Faggot';\n\t\t\t} else if (species.baseSpecies === 'Walruskie') {\n\t\t\t\titem = 'Manifesto';\n\t\t\t} else if (species.name === 'Regieleki' && !isDoubles) {\n\t\t\t\titem = 'Normal Gem';\n\t\t\t} else if (species.name === 'Shedinja') {\n\t\t\t\titem = (!teamDetails.defog && !teamDetails.rapidSpin && !isDoubles) ? 'Heavy-Duty Boots' : 'Focus Sash';\n\t\t\t} else if (species.name === 'Shuckle' && hasMove['stickyweb']) {\n\t\t\t\titem = 'Mental Herb';\n\t\t\t} else if (species.name === 'Unfezant' || hasMove['focusenergy']) {\n\t\t\t\titem = 'Scope Lens';\n\t\t\t} else if (species.name === 'Wobbuffet' || ['Cheek Pouch', 'Harvest', 'Ripen'].includes(ability)) {\n\t\t\t\titem = 'Sitrus Berry';\n\t\t\t} else if (ability === 'Gluttony') {\n\t\t\t\titem = this.sample(['Aguav', 'Figy', 'Iapapa', 'Mago', 'Wiki']) + ' Berry';\n\t\t\t} else if (ability === 'Gorilla Tactics' || ability === 'Imposter' || (ability === 'Magnet Pull' && hasMove['bodypress'] && !isDoubles)) {\n\t\t\t\titem = 'Choice Scarf';\n\t\t\t} else if (hasMove['trick'] || hasMove['switcheroo'] && !isDoubles) {\n\t\t\t\tif (species.baseStats.spe >= 60 && species.baseStats.spe <= 108 && !counter['priority'] && ability !== 'Triage') {\n\t\t\t\t\titem = 'Choice Scarf';\n\t\t\t\t} else {\n\t\t\t\t\titem = (counter.Physical > counter.Special) ? 'Choice Band' : 'Choice Specs';\n\t\t\t\t}\n\t\t\t} else if (species.evos.length && !hasMove['uturn']) {\n\t\t\t\titem = 'Eviolite';\n\t\t\t} else if (hasMove['bellydrum']) {\n\t\t\t\titem = (!!counter['priority'] || !hasMove['substitute']) ? 'Sitrus Berry' : 'Salac Berry';\n\t\t\t} else if (hasMove['geomancy'] || hasMove['meteorbeam']) {\n\t\t\t\titem = 'Power Herb';\n\t\t\t} else if (hasMove['shellsmash']) {\n\t\t\t\titem = (ability === 'Sturdy' && !isLead && !isDoubles) ? 'Heavy-Duty Boots' : 'White Herb';\n\t\t\t} else if (ability === 'Guts' && (counter.Physical > 2 || isDoubles)) {\n\t\t\t\titem = hasType['Fire'] ? 'Toxic Orb' : 'Flame Orb';\n\t\t\t} else if (ability === 'Magic Guard' && counter.damagingMoves.length > 1) {\n\t\t\t\titem = hasMove['counter'] ? 'Focus Sash' : 'Life Orb';\n\t\t\t} else if (ability === 'Sheer Force' && !!counter['sheerforce']) {\n\t\t\t\titem = 'Life Orb';\n\t\t\t} else if (ability === 'Unburden') {\n\t\t\t\titem = (hasMove['closecombat'] || hasMove['curse']) ? 'White Herb' : 'Sitrus Berry';\n\t\t\t} else if (hasMove['acrobatics']) {\n\t\t\t\titem = (ability === 'Grassy Surge') ? 'Grassy Seed' : '';\n\t\t\t} else if (hasMove['auroraveil'] || hasMove['lightscreen'] && hasMove['reflect']) {\n\t\t\t\titem = 'Light Clay';\n\t\t\t} else if (hasMove['rest'] && !hasMove['sleeptalk'] && ability !== 'Shed Skin') {\n\t\t\t\titem = 'Chesto Berry';\n\t\t\t} else if (hasMove['hypnosis'] && ability === 'Beast Boost') {\n\t\t\t\titem = 'Blunder Policy';\n\t\t\t} else if (this.dex.getEffectiveness('Rock', species) >= 2 && !isDoubles) {\n\t\t\t\titem = 'Heavy-Duty Boots';\n\n\t\t\t// Doubles\n\t\t\t} else if (isDoubles && (hasMove['dragonenergy'] || hasMove['eruption'] || hasMove['waterspout']) && counter.damagingMoves.length >= 4) {\n\t\t\t\titem = 'Choice Scarf';\n\t\t\t} else if (isDoubles && hasMove['blizzard'] && ability !== 'Snow Warning' && !teamDetails['hail']) {\n\t\t\t\titem = 'Blunder Policy';\n\t\t\t} else if (isDoubles && this.dex.getEffectiveness('Rock', species) >= 2 && !hasType['Flying']) {\n\t\t\t\titem = 'Heavy-Duty Boots';\n\t\t\t} else if (isDoubles && counter.Physical >= 4 && (hasType['Dragon'] || hasType['Fighting'] || hasType['Rock'] || hasMove['flipturn'] || hasMove['uturn']) &&\n\t\t\t\t!hasMove['fakeout'] && !hasMove['feint'] && !hasMove['rapidspin'] && !hasMove['suckerpunch']\n\t\t\t) {\n\t\t\t\titem = (!counter['priority'] && !hasAbility['Speed Boost'] && !hasMove['aerialace'] && species.baseStats.spe >= 60 && species.baseStats.spe <= 100 && this.randomChance(1, 2)) ? 'Choice Scarf' : 'Choice Band';\n\t\t\t} else if (isDoubles && ((counter.Special >= 4 && (hasType['Dragon'] || hasType ['Fighting'] || hasType['Rock'] || hasMove['voltswitch'])) || (counter.Special >= 3 &&\n\t\t\t\t(hasMove['flipturn'] || hasMove['uturn'])) && !hasMove['acidspray'] && !hasMove['electroweb'])\n\t\t\t) {\n\t\t\t\titem = (species.baseStats.spe >= 60 && species.baseStats.spe <= 100 && this.randomChance(1, 2)) ? 'Choice Scarf' : 'Choice Specs';\n\t\t\t} else if (isDoubles && counter.damagingMoves.length >= 4 && species.baseStats.hp + species.baseStats.def + species.baseStats.spd >= 280) {\n\t\t\t\titem = 'Assault Vest';\n\t\t\t} else if (isDoubles && counter.damagingMoves.length >= 3 && species.baseStats.spe >= 60 && ability !== 'Multiscale' && ability !== 'Sturdy' && !hasMove['acidspray'] && !hasMove['clearsmog'] && !hasMove['electroweb'] &&\n\t\t\t\t!hasMove['fakeout'] && !hasMove['feint'] && !hasMove['icywind'] && !hasMove['incinerate'] && !hasMove['naturesmadness'] && !hasMove['rapidspin'] && !hasMove['snarl'] && !hasMove['uturn']\n\t\t\t) {\n\t\t\t\titem = (ability === 'Defeatist' || species.baseStats.hp + species.baseStats.def + species.baseStats.spd >= 275) ? 'Sitrus Berry' : 'Life Orb';\n\n\t\t\t// Medium priority\n\t\t\t} else if (counter.Physical >= 4 && ability !== 'Serene Grace' && !hasMove['fakeout'] && !hasMove['flamecharge'] && !hasMove['rapidspin'] && (!hasMove['tailslap'] || hasMove['uturn']) && !isDoubles) {\n\t\t\t\tconst scarfReqs = (\n\t\t\t\t\t(species.baseStats.atk >= 100 || ability === 'Huge Power') && species.baseStats.spe >= 60 && species.baseStats.spe <= 108 &&\n\t\t\t\t\tability !== 'Speed Boost' && !counter['priority'] && !hasMove['aerialace'] && !hasMove['bounce'] && !hasMove['dualwingbeat']\n\t\t\t\t);\n\t\t\t\titem = (scarfReqs && this.randomChance(2, 3)) ? 'Choice Scarf' : 'Choice Band';\n\t\t\t} else if (counter.Physical >= 3 && (hasMove['copycat'] || hasMove['memento'] || hasMove['partingshot']) && !hasMove['rapidspin'] && !isDoubles) {\n\t\t\t\titem = 'Choice Band';\n\t\t\t} else if ((counter.Special >= 4 || (counter.Special >= 3 && (hasMove['flipturn'] || hasMove['partingshot'] || hasMove['uturn']))) && !isDoubles) {\n\t\t\t\tconst scarfReqs = species.baseStats.spa >= 100 && species.baseStats.spe >= 60 && species.baseStats.spe <= 108 && ability !== 'Tinted Lens' && !counter.Physical;\n\t\t\t\titem = (scarfReqs && this.randomChance(2, 3)) ? 'Choice Scarf' : 'Choice Specs';\n\t\t\t} else if (((counter.Physical >= 3 && hasMove['defog']) || (counter.Special >= 3 && hasMove['healingwish'])) && !counter['priority'] && !hasMove['uturn'] && !isDoubles) {\n\t\t\t\titem = 'Choice Scarf';\n\t\t\t} else if (hasMove['raindance'] || hasMove['sunnyday'] || (ability === 'Speed Boost' && !counter['hazards']) || ability === 'Stance Change' && counter.damagingMoves.length >= 3) {\n\t\t\t\titem = 'Life Orb';\n\t\t\t} else if (this.dex.getEffectiveness('Rock', species) >= 1 && (['Defeatist', 'Emergency Exit', 'Multiscale'].includes(ability) || hasMove['courtchange'] || hasMove['defog'] || hasMove['rapidspin']) && !isDoubles) {\n\t\t\t\titem = 'Heavy-Duty Boots';\n\t\t\t} else if (species.name === 'Necrozma-Dusk-Mane' || (this.dex.getEffectiveness('Ground', species) < 2 && !!counter['speedsetup'] &&\n\t\t\t\tcounter.damagingMoves.length >= 3 && species.baseStats.hp + species.baseStats.def + species.baseStats.spd >= 300)\n\t\t\t) {\n\t\t\t\titem = 'Weakness Policy';\n\t\t\t} else if (counter.damagingMoves.length >= 4 && species.baseStats.hp + species.baseStats.def + species.baseStats.spd >= 235) {\n\t\t\t\titem = 'Assault Vest';\n\t\t\t} else if ((hasMove['clearsmog'] || hasMove['curse'] || hasMove['haze'] || hasMove['healbell'] || hasMove['protect'] || hasMove['sleeptalk'] || hasMove['strangesteam']) && (ability === 'Moody' || !isDoubles)) {\n\t\t\t\titem = 'Leftovers';\n\n\t\t\t// Better than Leftovers\n\t\t\t} else if (isLead && !['Disguise', 'Sturdy'].includes(ability) &&\n\t\t\t!hasMove['substitute'] && !counter['recoil'] && !counter['recovery'] && species.baseStats.hp + species.baseStats.def + species.baseStats.spd < 255 && !isDoubles) {\n\t\t\t\titem = 'Focus Sash';\n\t\t\t} else if (ability === 'Water Bubble' && !isDoubles) {\n\t\t\t\titem = 'Mystic Water';\n\t\t\t} else if (hasMove['clangoroussoul'] || hasMove['boomburst'] && !!counter['speedsetup']) {\n\t\t\t\titem = 'Throat Spray';\n\t\t\t} else if (((this.dex.getEffectiveness('Rock', species) >= 1 && (!teamDetails.defog || ability === 'Intimidate' || hasMove['uturn'] || hasMove['voltswitch'])) ||\n\t\t\t\t(hasMove['rapidspin'] && (ability === 'Regenerator' || !!counter['recovery']))) && !isDoubles\n\t\t\t) {\n\t\t\t\titem = 'Heavy-Duty Boots';\n\t\t\t} else if (this.dex.getEffectiveness('Ground', species) >= 2 && !hasType['Poison'] && ability !== 'Levitate' && !hasAbility['Iron Barbs'] && !isDoubles) {\n\t\t\t\titem = 'Air Balloon';\n\t\t\t} else if (counter.damagingMoves.length >= 3 && !counter['damage'] && ability !== 'Sturdy' && !hasMove['foulplay'] && !hasMove['rapidspin'] && !hasMove['substitute'] && !hasMove['uturn'] && !isDoubles &&\n\t\t\t\t(!!counter['speedsetup'] || hasMove['trickroom'] || !!counter['drain'] || hasMove['psystrike'] || (species.baseStats.spe > 40 && species.baseStats.hp + species.baseStats.def + species.baseStats.spd < 275))\n\t\t\t) {\n\t\t\t\titem = 'Life Orb';\n\t\t\t} else if (counter.damagingMoves.length >= 4 && !counter['Dragon'] && !counter['Normal'] && !isDoubles) {\n\t\t\t\titem = 'Expert Belt';\n\t\t\t} else if ((hasMove['dragondance'] || hasMove['swordsdance']) && !isDoubles &&\n\t\t\t\t(hasMove['outrage'] || !hasType['Bug'] && !hasType['Fire'] && !hasType['Ground'] && !hasType['Normal'] && !hasType['Poison'] && !['Pastel Veil', 'Storm Drain'].includes(ability))\n\t\t\t) {\n\t\t\t\titem = 'Lum Berry';\n\t\t\t}\n\n\t\t\t// For Trick / Switcheroo\n\t\t\tif (item === 'Leftovers' && hasType['Poison']) {\n\t\t\t\titem = 'Black Sludge';\n\t\t\t}\n\t\t}\n\n\t\tconst fochunItems = [\n\t\t\t\"????????\",\n\t\t\t\"Master Ball\",\n\t\t\t\"Ultra Ball\",\n\t\t\t\"Great Ball\",\n\t\t\t\"Pok\u00E9 Ball\",\n\t\t\t\"Safari Ball\",\n\t\t\t\"Net Ball\",\n\t\t\t\"Dive Ball\",\n\t\t\t\"Nest Ball\",\n\t\t\t\"Repeat Ball\",\n\t\t\t\"Timer Ball\",\n\t\t\t\"Luxury Ball\",\n\t\t\t\"Premier Ball\",\n\t\t\t\"Potion\",\n\t\t\t\"Antidote\",\n\t\t\t\"Burn Heal\",\n\t\t\t\"Ice Heal\",\n\t\t\t\"Awakening\",\n\t\t\t\"Paralyz Heal\",\n\t\t\t\"Full Restore\",\n\t\t\t\"Max Potion\",\n\t\t\t\"Hyper Potion\",\n\t\t\t\"Super Potion\",\n\t\t\t\"Full Heal\",\n\t\t\t\"Revive\",\n\t\t\t\"Max Revive\",\n\t\t\t\"Fresh Water\",\n\t\t\t\"Soda Pop\",\n\t\t\t\"Lemonade\",\n\t\t\t\"Moomoo Milk\",\n\t\t\t\"Energypowder\",\n\t\t\t\"Energy Root\",\n\t\t\t\"Heal Powder\",\n\t\t\t\"Revival Herb\",\n\t\t\t\"Ether\",\n\t\t\t\"Max Ether\",\n\t\t\t\"Elixir\",\n\t\t\t\"Max Elixir\",\n\t\t\t\"Lava Cookie\",\n\t\t\t\"Blue Flute\",\n\t\t\t\"Yellow Flute\",\n\t\t\t\"Red Flute\",\n\t\t\t\"Black Flute\",\n\t\t\t\"White Flute\",\n\t\t\t\"Berry Juice\",\n\t\t\t\"Sacred Ash\",\n\t\t\t\"Shoal Salt\",\n\t\t\t\"Shoal Shell\",\n\t\t\t\"Red Shard\",\n\t\t\t\"Blue Shard\",\n\t\t\t\"Yellow Shard\",\n\t\t\t\"Green Shard\",\n\t\t\t\"Quick Ball\",\n\t\t\t\"Dusk Ball\",\n\t\t\t\"Heal Ball\",\n\t\t\t\"Junk Ball\",\n\t\t\t\"Masta Ball\",\n\t\t\t\"Monster Ball\",\n\t\t\t\"Fast Ball\",\n\t\t\t\"Barbed Ball\",\n\t\t\t\"Rasta Ball\",\n\t\t\t\"B-Ball\",\n\t\t\t\"Rude Ball\",\n\t\t\t\"HP Up\",\n\t\t\t\"Protein\",\n\t\t\t\"Iron\",\n\t\t\t\"Carbos\",\n\t\t\t\"Calcium\",\n\t\t\t\"Rare Candy\",\n\t\t\t\"PP Up\",\n\t\t\t\"Zinc\",\n\t\t\t\"PP Max\",\n\t\t\t\"Magnet Ball\",\n\t\t\t\"Guard Spec.\",\n\t\t\t\"Dire Hit\",\n\t\t\t\"X Attack\",\n\t\t\t\"X Defend\",\n\t\t\t\"X Speed\",\n\t\t\t\"X Accuracy\",\n\t\t\t\"X Special\",\n\t\t\t\"Pok\u00E9 Doll\",\n\t\t\t\"Dream Ball\",\n\t\t\t\"Cellar Key\",\n\t\t\t\"Super Repel\",\n\t\t\t\"Max Repel\",\n\t\t\t\"Escape Rope\",\n\t\t\t\"Repel\",\n\t\t\t\"DDT Spray\",\n\t\t\t\"Rare Bone\",\n\t\t\t\"Grip Claw\",\n\t\t\t\"Destiny Knot\",\n\t\t\t\"Bottlecap\",\n\t\t\t\"Golden Cap\",\n\t\t\t\"Sun Stone\",\n\t\t\t\"Moon Stone\",\n\t\t\t\"Fire Stone\",\n\t\t\t\"Thunderstone\",\n\t\t\t\"Water Stone\",\n\t\t\t\"Leaf Stone\",\n\t\t\t\"Far Doll\",\n\t\t\t\"Tor Doll\",\n\t\t\t\"Metal Coat\",\n\t\t\t\"Up-Grade\",\n\t\t\t\"Tinymushroom\",\n\t\t\t\"Big Mushroom\",\n\t\t\t\"Binding Band\",\n\t\t\t\"Pearl\",\n\t\t\t\"Big Pearl\",\n\t\t\t\"Stardust\",\n\t\t\t\"Star Piece\",\n\t\t\t\"Nugget\",\n\t\t\t\"Heart Scale\",\n\t\t\t\"Gold Clover\",\n\t\t\t\"Clover Leaf\",\n\t\t\t\"Odd Dildo\",\n\t\t\t\"Pirate's Jug\",\n\t\t\t\"Porn Drive\",\n\t\t\t\"House Key\",\n\t\t\t\"Cursed Coin\",\n\t\t\t\"Custap Berry\",\n\t\t\t\"Lab Key\",\n\t\t\t\"Orange Mail\",\n\t\t\t\"Harbor Mail\",\n\t\t\t\"Glitter Mail\",\n\t\t\t\"Mech Mail\",\n\t\t\t\"Wood Mail\",\n\t\t\t\"Wave Mail\",\n\t\t\t\"Bead Mail\",\n\t\t\t\"Shadow Mail\",\n\t\t\t\"Tropic Mail\",\n\t\t\t\"Dream Mail\",\n\t\t\t\"Fab Mail\",\n\t\t\t\"Retro Mail\",\n\t\t\t\"Cheri Berry\",\n\t\t\t\"Chesto Berry\",\n\t\t\t\"Pecha Berry\",\n\t\t\t\"Rawst Berry\",\n\t\t\t\"Aspear Berry\",\n\t\t\t\"Leppa Berry\",\n\t\t\t\"Oran Berry\",\n\t\t\t\"Persim Berry\",\n\t\t\t\"Lum Berry\",\n\t\t\t\"Sitrus Berry\",\n\t\t\t\"Figy Berry\",\n\t\t\t\"Wiki Berry\",\n\t\t\t\"Mago Berry\",\n\t\t\t\"Aguav Berry\",\n\t\t\t\"Iapapa Berry\",\n\t\t\t\"Occa Berry\",\n\t\t\t\"Passho Berry\",\n\t\t\t\"Nanab Berry\",\n\t\t\t\"Rindo Berry\",\n\t\t\t\"Wacan Berry\",\n\t\t\t\"Pomeg Berry\",\n\t\t\t\"Kelpsy Berry\",\n\t\t\t\"Qualot Berry\",\n\t\t\t\"Hondew Berry\",\n\t\t\t\"Grepa Berry\",\n\t\t\t\"Tamato Berry\",\n\t\t\t\"Yache Berry\",\n\t\t\t\"Chople Berry\",\n\t\t\t\"Kebia Berry\",\n\t\t\t\"Nomel Berry\",\n\t\t\t\"Shuca Berry\",\n\t\t\t\"Coba Berry\",\n\t\t\t\"Watmel Berry\",\n\t\t\t\"Payapa Berry\",\n\t\t\t\"Tanga Berry\",\n\t\t\t\"Liechi Berry\",\n\t\t\t\"Ganlon Berry\",\n\t\t\t\"Salac Berry\",\n\t\t\t\"Petaya Berry\",\n\t\t\t\"Apicot Berry\",\n\t\t\t\"Lansat Berry\",\n\t\t\t\"Starf Berry\",\n\t\t\t\"Enigma Berry\",\n\t\t\t\"Charti Berry\",\n\t\t\t\"Kasib Berry\",\n\t\t\t\"Haban Berry\",\n\t\t\t\"Brightpowder\",\n\t\t\t\"White Herb\",\n\t\t\t\"Macho Brace\",\n\t\t\t\"Dream Pill\",\n\t\t\t\"Quick Claw\",\n\t\t\t\"Soothe Bell\",\n\t\t\t\"Mental Herb\",\n\t\t\t\"Choice Band\",\n\t\t\t\"King's Rock\",\n\t\t\t\"Silverpowder\",\n\t\t\t\"Amulet Coin\",\n\t\t\t\"Cleanse Tag\",\n\t\t\t\"Power Herb\",\n\t\t\t\"Big Faggot\",\n\t\t\t\"Bacon Strip\",\n\t\t\t\"Smoke Ball\",\n\t\t\t\"Everstone\",\n\t\t\t\"Focus Band\",\n\t\t\t\"Lucky Egg\",\n\t\t\t\"Scope Lens\",\n\t\t\t\"Iron Ball\",\n\t\t\t\"Leftovers\",\n\t\t\t\"Lagging Tail\",\n\t\t\t\"Light Ball\",\n\t\t\t\"Soft Sand\",\n\t\t\t\"Hard Stone\",\n\t\t\t\"Miracle Seed\",\n\t\t\t\"Black Glasses\",\n\t\t\t\"Black Belt\",\n\t\t\t\"Magnet\",\n\t\t\t\"Mystic Water\",\n\t\t\t\"Sharp Beak\",\n\t\t\t\"Poison Barb\",\n\t\t\t\"Never-Melt Ice\",\n\t\t\t\"Spell Tag\",\n\t\t\t\"Twisted Spoon\",\n\t\t\t\"Charcoal\",\n\t\t\t\"Dragon Fang\",\n\t\t\t\"Silk Scarf\",\n\t\t\t\"Shed Shell\",\n\t\t\t\"Shell Bell\",\n\t\t\t\"Sea Incense\",\n\t\t\t\"Lax Incense\",\n\t\t\t\"Air Balloon\",\n\t\t\t\"Metal Powder\",\n\t\t\t\"Thicc Bone\",\n\t\t\t\"Bible\",\n\t\t\t\"Choice Specs\",\n\t\t\t\"Choice Scarf\",\n\t\t\t\"Life Orb\",\n\t\t\t\"Rocky Helmet\",\n\t\t\t\"Black Sludge\",\n\t\t\t\"Assault Vest\",\n\t\t\t\"Eviolite\",\n\t\t\t\"Colbur Berry\",\n\t\t\t\"Babiri Berry\",\n\t\t\t\"Chilan Berry\",\n\t\t\t\"Roseli Berry\",\n\t\t\t\"Expert Belt\",\n\t\t\t\"Flame Orb\",\n\t\t\t\"Toxic Orb\",\n\t\t\t\"Wide Lens\",\n\t\t\t\"Light Clay\",\n\t\t\t\"Razor Claw\",\n\t\t\t\"Suede Shoes\",\n\t\t\t\"Safety Goggles\",\n\t\t\t\"Ability Pill\",\n\t\t\t\"Focus Sash\",\n\t\t\t\"Heat Rock\",\n\t\t\t\"Damp Rock\",\n\t\t\t\"Taco\",\n\t\t\t\"Weed\",\n\t\t\t\"Zoom Lens\",\n\t\t\t\"Cute Bow\",\n\t\t\t\"Katana\",\n\t\t\t\"Smooth Rock\",\n\t\t\t\"Icy Rock\",\n\t\t\t\"Terrain Extender\",\n\t\t\t\"Weakness Policy\",\n\t\t\t\"Sticky Barb\",\n\t\t\t\"Eject Button\",\n\t\t\t\"Coin Case\",\n\t\t\t\"Itemfinder\",\n\t\t\t\"Old Rod\",\n\t\t\t\"Good Rod\",\n\t\t\t\"Super Rod\",\n\t\t\t\"Ruse Ticket\",\n\t\t\t\"Normal Gem\",\n\t\t\t\"Walkman\",\n\t\t\t\"Fighting Gem\",\n\t\t\t\"Flying Gem\",\n\t\t\t\"Poison Gem\",\n\t\t\t\"Ground Gem\",\n\t\t\t\"Rock Gem\",\n\t\t\t\"Bug Gem\",\n\t\t\t\"Ghost Gem\",\n\t\t\t\"Steel Gem\",\n\t\t\t\"Fire Gem\",\n\t\t\t\"Burn Drive\",\n\t\t\t\"Chill Drive\",\n\t\t\t\"Douse Drive\",\n\t\t\t\"Shock Drive\",\n\t\t\t\"Room Key\",\n\t\t\t\"Water Gem\",\n\t\t\t\"Grass Gem\",\n\t\t\t\"Electric Gem\",\n\t\t\t\"Psychic Gem\",\n\t\t\t\"Fang Fossil\",\n\t\t\t\"Conch Fossil\",\n\t\t\t\"Ice Gem\",\n\t\t\t\"TM01\",\n\t\t\t\"TM02\",\n\t\t\t\"TM03\",\n\t\t\t\"TM04\",\n\t\t\t\"TM05\",\n\t\t\t\"TM06\",\n\t\t\t\"TM07\",\n\t\t\t\"TM08\",\n\t\t\t\"TM09\",\n\t\t\t\"TM10\",\n\t\t\t\"TM11\",\n\t\t\t\"TM12\",\n\t\t\t\"TM13\",\n\t\t\t\"TM14\",\n\t\t\t\"TM15\",\n\t\t\t\"TM16\",\n\t\t\t\"TM17\",\n\t\t\t\"TM18\",\n\t\t\t\"TM19\",\n\t\t\t\"TM20\",\n\t\t\t\"TM21\",\n\t\t\t\"TM22\",\n\t\t\t\"TM23\",\n\t\t\t\"TM24\",\n\t\t\t\"TM25\",\n\t\t\t\"TM26\",\n\t\t\t\"TM27\",\n\t\t\t\"TM28\",\n\t\t\t\"TM29\",\n\t\t\t\"TM30\",\n\t\t\t\"TM31\",\n\t\t\t\"TM32\",\n\t\t\t\"TM33\",\n\t\t\t\"TM34\",\n\t\t\t\"TM35\",\n\t\t\t\"TM36\",\n\t\t\t\"TM37\",\n\t\t\t\"TM38\",\n\t\t\t\"TM39\",\n\t\t\t\"TM40\",\n\t\t\t\"TM41\",\n\t\t\t\"TM42\",\n\t\t\t\"TM43\",\n\t\t\t\"TM44\",\n\t\t\t\"TM45\",\n\t\t\t\"TM46\",\n\t\t\t\"TM47\",\n\t\t\t\"TM48\",\n\t\t\t\"TM49\",\n\t\t\t\"TM50\",\n\t\t\t\"HM01\",\n\t\t\t\"HM02\",\n\t\t\t\"HM03\",\n\t\t\t\"HM04\",\n\t\t\t\"HM05\",\n\t\t\t\"HM06\",\n\t\t\t\"HM07\",\n\t\t\t\"HM08\",\n\t\t\t\"Old Key\",\n\t\t\t\"Rusty Key\",\n\t\t\t\"Large Parcel\",\n\t\t\t\"Poop Flute\",\n\t\t\t\"Cage Key\",\n\t\t\t\"Axe\",\n\t\t\t\"Ban Hammer\",\n\t\t\t\"Raptor Claw\",\n\t\t\t\"Card Key\",\n\t\t\t\"Lift Key\",\n\t\t\t\"Tooth Fossil\",\n\t\t\t\"Horn Fossil\",\n\t\t\t\"Skelecharm\",\n\t\t\t\"Bicycle\",\n\t\t\t\"Town Map\",\n\t\t\t\"VS Seeker\",\n\t\t\t\"Fame Checker\",\n\t\t\t\"TM Case\",\n\t\t\t\"Berry Pouch\",\n\t\t\t\"Dragon Gem\",\n\t\t\t\"Battle Pass\",\n\t\t\t\"Ebin Pass\",\n\t\t\t\"Manifesto\",\n\t\t\t\"Dark Gem\",\n\t\t\t\"Fairy Gem\",\n\t\t\t\"Powder Jar\",\n\t\t\t\"Big Root\",\n\t\t\t\"Jar of Pee\",\n\t\t].map(toID);\n\n\t\tif (isCloveronly && !fochunItems.includes(toID(item))) {\n\t\t\titem = 'Leftovers';\n\t\t}\n\n\t\tconst singlesLevel = randomBattleSet.level || species.randomBattleLevel;\n\t\tlet level: number = (!isDoubles ? singlesLevel : species.randomDoubleBattleLevel) || 80;\n\n\t\t// Weaken mons with strong abilities\n\t\tif (['shadowtag', 'arenatrap', 'moody', 'wonderguard'].includes(toID(ability))) {\n\t\t\tlevel -= 8;\n\t\t}\n\n\t\t// Prepare optimal HP\n\t\tconst srWeakness = (ability === 'Magic Guard' || item === 'Heavy-Duty Boots' ? 0 : this.dex.getEffectiveness('Rock', species));\n\t\twhile (evs.hp > 1) {\n\t\t\tconst hp = Math.floor(Math.floor(2 * species.baseStats.hp + ivs.hp + Math.floor(evs.hp / 4) + 100) * level / 100 + 10);\n\t\t\tif (hasMove['substitute'] && (item === 'Sitrus Berry' || ability === 'Power Construct' || (hasMove['bellydrum'] && item === 'Salac Berry'))) {\n\t\t\t\t// Two Substitutes should activate Sitrus Berry\n\t\t\t\tif (hp % 4 === 0) break;\n\t\t\t} else if (hasMove['bellydrum'] && (item === 'Sitrus Berry' || ability === 'Gluttony')) {\n\t\t\t\t// Belly Drum should activate Sitrus Berry\n\t\t\t\tif (hp % 2 === 0) break;\n\t\t\t} else if (hasMove['substitute'] && hasMove['reversal']) {\n\t\t\t\t// Reversal users should be able to use four Substitutes\n\t\t\t\tif (hp % 4 > 0) break;\n\t\t\t} else {\n\t\t\t\t// Maximize number of Stealth Rock switch-ins\n\t\t\t\tif (srWeakness <= 0 || hp % (4 / srWeakness) > 0) break;\n\t\t\t}\n\t\t\tevs.hp -= 4;\n\t\t}\n\n\t\tif (hasMove['shellsidearm'] && item === 'Choice Specs') evs.atk -= 4;\n\n\t\t// Minimize confusion damage\n\t\tif (!counter['Physical'] && !hasMove['transform'] && (!hasMove['shellsidearm'] || !counter.Status)) {\n\t\t\tevs.atk = 0;\n\t\t\tivs.atk = 0;\n\t\t}\n\n\t\tif (hasMove['gyroball'] || hasMove['trickroom']) {\n\t\t\tevs.spe = 0;\n\t\t\tivs.spe = 0;\n\t\t}\n\n\t\treturn {\n\t\t\tname: nickname || species.baseSpecies,\n\t\t\tspecies: forme,\n\t\t\tgender: species.gender,\n\t\t\tmoves: moves,\n\t\t\tability: ability,\n\t\t\tevs: evs,\n\t\t\tivs: ivs,\n\t\t\titem: item,\n\t\t\tlevel: level,\n\t\t\tshiny: this.randomChance(1, 1024),\n\t\t\tgigantamax: gmax,\n\t\t};\n\t}\n\n\tgetFestivePokemonPool(pokemon: RandomTeamsTypes.RandomSet[] = []) {\n\t\tconst exclude = pokemon.map(p => toID(p.species));\n\t\tconst pokemonPool = [];\n\t\tfor (const id in this.dex.data.FormatsData) {\n\t\t\tconst species = this.dex.species.get(id);\n\t\t\tif (species.gen > this.gen || exclude.includes(species.id)) continue;\n\t\t\tif (!species.types.includes('Fairy') && !species.types.includes('Grass') && !species.types.includes('Ice') && !species.types.includes('Normal')) continue;\n\t\t\tif (species.num <= 69000 || species.num > 69386) continue;\n\t\t\tpokemonPool.push(id);\n\t\t}\n\t\treturn pokemonPool;\n\t}\n\n\trandomFestiveTeam() {\n\t\tconst seed = this.prng.seed;\n\t\tconst pokemon: RandomTeamsTypes.RandomSet[] = [];\n\n\t\tconst baseFormes: {[k: string]: number} = {};\n\n\t\tconst tierCount: {[k: string]: number} = {};\n\t\tconst typeCount: {[k: string]: number} = {};\n\t\tconst typeComboCount: {[k: string]: number} = {};\n\t\tconst teamDetails: RandomTeamsTypes.TeamDetails = {};\n\n\t\tconst pokemonPool = this.getFestivePokemonPool();\n\t\twhile (pokemonPool.length && pokemon.length < this.maxTeamSize) {\n\t\t\tconst species = this.dex.species.get(this.sampleNoReplace(pokemonPool));\n\t\t\tif (!species.exists) continue;\n\n\t\t\t// Check if the forme has moves for random battle\n\t\t\tif ((this.format.gameType === 'singles') || (this.format.gameType === 'freeforall') || (this.format.gameType === 'multi')) {\n\t\t\t\tif (!species.randomBattleMoves) continue;\n\t\t\t} else {\n\t\t\t\tif (!species.randomDoubleBattleMoves) continue;\n\t\t\t}\n\n\t\t\t// Limit to one of each species (Species Clause)\n\t\t\tif (baseFormes[species.baseSpecies]) continue;\n\n\t\t\t// Adjust rate for species with multiple sets\n\t\t\tswitch (species.baseSpecies) {\n\t\t\tcase 'Arceus': case 'Silvally':\n\t\t\t\tif (this.randomChance(8, 9)) continue;\n\t\t\t\tbreak;\n\t\t\tcase 'Aegislash': case 'Basculin': case 'Gourgeist': case 'Meloetta':\n\t\t\t\tif (this.randomChance(1, 2)) continue;\n\t\t\t\tbreak;\n\t\t\tcase 'Greninja':\n\t\t\t\tif (this.gen >= 7 && this.randomChance(1, 2)) continue;\n\t\t\t\tbreak;\n\t\t\tcase 'Darmanitan':\n\t\t\t\tif (species.gen === 8 && this.randomChance(1, 2)) continue;\n\t\t\t\tbreak;\n\t\t\tcase 'Magearna': case 'Toxtricity': case 'Zacian': case 'Zamazenta': case 'Zarude':\n\t\t\tcase 'Appletun': case 'Blastoise': case 'Butterfree': case 'Copperajah': case 'Grimmsnarl': case 'Inteleon': case 'Rillaboom': case 'Snorlax': case 'Urshifu':\n\t\t\t\tif (this.gen >= 8 && this.randomChance(1, 2)) continue;\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\t// Illusion shouldn't be on the last slot\n\t\t\tif (species.name === 'Zoroark' && pokemon.length > 4) continue;\n\n\t\t\tconst tier = species.tier;\n\t\t\tconst types = species.types;\n\t\t\tconst typeCombo = types.slice().sort().join();\n\n\t\t\t// Limit one Pokemon per tier, two for Monotype\n\t\t\t// if ((tierCount[tier] >= (isMonotype ? 2 : 1)) && !this.randomChance(1, Math.pow(5, tierCount[tier]))) {\n\t\t\t// \tcontinue;\n\t\t\t// }\n\n\t\t\tconst set = this.randomSet(species, teamDetails, pokemon.length === 0, !['singles', 'freeforall'].includes(this.format.gameType), false);\n\n\t\t\t// Okay, the set passes, add it to our team\n\t\t\tpokemon.push(set);\n\n\t\t\tif (pokemon.length === this.maxTeamSize) {\n\t\t\t\t// Set Zoroark's level to be the same as the last Pokemon\n\t\t\t\tconst illusion = teamDetails['illusion'];\n\t\t\t\tif (illusion) pokemon[illusion - 1].level = pokemon[5].level;\n\n\t\t\t\t// Don't bother tracking details for the 6th Pokemon\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\t// Now that our Pokemon has passed all checks, we can increment our counters\n\t\t\tbaseFormes[species.baseSpecies] = 1;\n\n\t\t\t// Increment tier counter\n\t\t\tif (tierCount[tier]) {\n\t\t\t\ttierCount[tier]++;\n\t\t\t} else {\n\t\t\t\ttierCount[tier] = 1;\n\t\t\t}\n\n\t\t\t// Increment type counters\n\t\t\tfor (const typeName of types) {\n\t\t\t\tif (typeName in typeCount) {\n\t\t\t\t\ttypeCount[typeName]++;\n\t\t\t\t} else {\n\t\t\t\t\ttypeCount[typeName] = 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (typeCombo in typeComboCount) {\n\t\t\t\ttypeComboCount[typeCombo]++;\n\t\t\t} else {\n\t\t\t\ttypeComboCount[typeCombo] = 1;\n\t\t\t}\n\n\t\t\t// Track what the team has\n\t\t\tif (set.ability === 'Drizzle' || set.moves.includes('raindance')) teamDetails['rain'] = 1;\n\t\t\tif (set.ability === 'Drought' || set.moves.includes('sunnyday')) teamDetails['sun'] = 1;\n\t\t\tif (set.ability === 'Sand Stream') teamDetails['sand'] = 1;\n\t\t\tif (set.ability === 'Snow Warning') teamDetails['hail'] = 1;\n\t\t\tif (set.moves.includes('spikes')) teamDetails['spikes'] = (teamDetails['spikes'] || 0) + 1;\n\t\t\tif (set.moves.includes('stealthrock')) teamDetails['stealthRock'] = 1;\n\t\t\tif (set.moves.includes('stickyweb')) teamDetails['stickyWeb'] = 1;\n\t\t\tif (set.moves.includes('toxicspikes')) teamDetails['toxicSpikes'] = 1;\n\t\t\tif (set.moves.includes('defog')) teamDetails['defog'] = 1;\n\t\t\tif (set.moves.includes('rapidspin')) teamDetails['rapidSpin'] = 1;\n\t\t\tif (set.moves.includes('auroraveil') || set.moves.includes('reflect') && set.moves.includes('lightscreen')) teamDetails['screens'] = 1;\n\n\t\t\t// For setting Zoroark's level\n\t\t\tif (set.ability === 'Illusion') teamDetails['illusion'] = pokemon.length;\n\t\t}\n\n\t\tif (pokemon.length < this.maxTeamSize) throw new Error(`Could not build a random team for ${this.format} (seed=${seed})`);\n\n\t\treturn pokemon;\n\t}\n\n\tgetIrishPokemonPool(pokemon: RandomTeamsTypes.RandomSet[] = []) {\n\t\tconst exclude = pokemon.map(p => toID(p.species));\n\t\tconst pokemonPool = [];\n\t\tfor (const id in this.dex.data.FormatsData) {\n\t\t\tconst species = this.dex.species.get(id);\n\t\t\tif (species.gen > this.gen || exclude.includes(species.id)) continue;\n\t\t\tif (toID(species.color) !== 'green') continue;\n\t\t\tif (species.num <= 69000 || species.num > 69386) continue;\n\t\t\tpokemonPool.push(id);\n\t\t}\n\t\treturn pokemonPool;\n\t}\n\n\trandomIrishTeam() {\n\t\tconst seed = this.prng.seed;\n\t\tconst pokemon: RandomTeamsTypes.RandomSet[] = [];\n\n\t\tconst baseFormes: {[k: string]: number} = {};\n\n\t\tconst tierCount: {[k: string]: number} = {};\n\t\tconst typeCount: {[k: string]: number} = {};\n\t\tconst typeComboCount: {[k: string]: number} = {};\n\t\tconst teamDetails: RandomTeamsTypes.TeamDetails = {};\n\n\t\tconst pokemonPool = this.getIrishPokemonPool();\n\t\twhile (pokemonPool.length && pokemon.length < this.maxTeamSize) {\n\t\t\tconst species = this.dex.species.get(this.sampleNoReplace(pokemonPool));\n\t\t\tif (!species.exists) continue;\n\n\t\t\t// Check if the forme has moves for random battle\n\t\t\tif ((this.format.gameType === 'singles') || (this.format.gameType === 'freeforall') || (this.format.gameType === 'multi')) {\n\t\t\t\tif (!species.randomBattleMoves) continue;\n\t\t\t} else {\n\t\t\t\tif (!species.randomDoubleBattleMoves) continue;\n\t\t\t}\n\n\t\t\t// Limit to one of each species (Species Clause)\n\t\t\tif (baseFormes[species.baseSpecies]) continue;\n\n\t\t\t// Adjust rate for species with multiple sets\n\t\t\tswitch (species.baseSpecies) {\n\t\t\tcase 'Arceus': case 'Silvally':\n\t\t\t\tif (this.randomChance(8, 9)) continue;\n\t\t\t\tbreak;\n\t\t\tcase 'Aegislash': case 'Basculin': case 'Gourgeist': case 'Meloetta':\n\t\t\t\tif (this.randomChance(1, 2)) continue;\n\t\t\t\tbreak;\n\t\t\tcase 'Greninja':\n\t\t\t\tif (this.gen >= 7 && this.randomChance(1, 2)) continue;\n\t\t\t\tbreak;\n\t\t\tcase 'Darmanitan':\n\t\t\t\tif (species.gen === 8 && this.randomChance(1, 2)) continue;\n\t\t\t\tbreak;\n\t\t\tcase 'Magearna': case 'Toxtricity': case 'Zacian': case 'Zamazenta': case 'Zarude':\n\t\t\tcase 'Appletun': case 'Blastoise': case 'Butterfree': case 'Copperajah': case 'Grimmsnarl': case 'Inteleon': case 'Rillaboom': case 'Snorlax': case 'Urshifu':\n\t\t\t\tif (this.gen >= 8 && this.randomChance(1, 2)) continue;\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\t// Illusion shouldn't be on the last slot\n\t\t\tif (species.name === 'Zoroark' && pokemon.length > 4) continue;\n\n\t\t\tconst tier = species.tier;\n\t\t\tconst types = species.types;\n\t\t\tconst typeCombo = types.slice().sort().join();\n\n\t\t\t// Limit one Pokemon per tier, two for Monotype\n\t\t\t// if ((tierCount[tier] >= (isMonotype ? 2 : 1)) && !this.randomChance(1, Math.pow(5, tierCount[tier]))) {\n\t\t\t// \tcontinue;\n\t\t\t// }\n\n\t\t\tconst set = this.randomSet(species, teamDetails, pokemon.length === 0, !['singles', 'freeforall'].includes(this.format.gameType), false);\n\n\t\t\t// Okay, the set passes, add it to our team\n\t\t\tpokemon.push(set);\n\n\t\t\tif (pokemon.length === this.maxTeamSize) {\n\t\t\t\t// Set Zoroark's level to be the same as the last Pokemon\n\t\t\t\tconst illusion = teamDetails['illusion'];\n\t\t\t\tif (illusion) pokemon[illusion - 1].level = pokemon[5].level;\n\n\t\t\t\t// Don't bother tracking details for the 6th Pokemon\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\t// Now that our Pokemon has passed all checks, we can increment our counters\n\t\t\tbaseFormes[species.baseSpecies] = 1;\n\n\t\t\t// Increment tier counter\n\t\t\tif (tierCount[tier]) {\n\t\t\t\ttierCount[tier]++;\n\t\t\t} else {\n\t\t\t\ttierCount[tier] = 1;\n\t\t\t}\n\n\t\t\t// Increment type counters\n\t\t\tfor (const typeName of types) {\n\t\t\t\tif (typeName in typeCount) {\n\t\t\t\t\ttypeCount[typeName]++;\n\t\t\t\t} else {\n\t\t\t\t\ttypeCount[typeName] = 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (typeCombo in typeComboCount) {\n\t\t\t\ttypeComboCount[typeCombo]++;\n\t\t\t} else {\n\t\t\t\ttypeComboCount[typeCombo] = 1;\n\t\t\t}\n\n\t\t\t// Track what the team has\n\t\t\tif (set.ability === 'Drizzle' || set.moves.includes('raindance')) teamDetails['rain'] = 1;\n\t\t\tif (set.ability === 'Drought' || set.moves.includes('sunnyday')) teamDetails['sun'] = 1;\n\t\t\tif (set.ability === 'Sand Stream') teamDetails['sand'] = 1;\n\t\t\tif (set.ability === 'Snow Warning') teamDetails['hail'] = 1;\n\t\t\tif (set.moves.includes('spikes')) teamDetails['spikes'] = (teamDetails['spikes'] || 0) + 1;\n\t\t\tif (set.moves.includes('stealthrock')) teamDetails['stealthRock'] = 1;\n\t\t\tif (set.moves.includes('stickyweb')) teamDetails['stickyWeb'] = 1;\n\t\t\tif (set.moves.includes('toxicspikes')) teamDetails['toxicSpikes'] = 1;\n\t\t\tif (set.moves.includes('defog')) teamDetails['defog'] = 1;\n\t\t\tif (set.moves.includes('rapidspin')) teamDetails['rapidSpin'] = 1;\n\t\t\tif (set.moves.includes('auroraveil') || set.moves.includes('reflect') && set.moves.includes('lightscreen')) teamDetails['screens'] = 1;\n\n\t\t\t// For setting Zoroark's level\n\t\t\tif (set.ability === 'Illusion') teamDetails['illusion'] = pokemon.length;\n\t\t}\n\n\t\tif (pokemon.length < this.maxTeamSize) throw new Error(`Could not build a random team for ${this.format} (seed=${seed})`);\n\n\t\treturn pokemon;\n\t}\n\n\tgetSpookyPokemonPool(isCloveronly: boolean, pokemon: RandomTeamsTypes.RandomSet[] = []) {\n\t\tconst exclude = pokemon.map(p => toID(p.species));\n\t\tconst pokemonPool = [];\n\t\tfor (const id in this.dex.data.FormatsData) {\n\t\t\tif (['shedinja', 'sprucifix'].includes(id)) continue;\n\t\t\tconst species = this.dex.species.get(id);\n\t\t\tif (species.gen > this.gen || exclude.includes(species.id)) continue;\n\t\t\tif (!species.types.includes('Ghost') && !species.types.includes('Dark')) continue;\n\t\t\tif (isCloveronly) {\n\t\t\t\tif (species.num <= 69000 || species.num > 69386) continue;\n\t\t\t} else {\n\t\t\t\tif (species.num > 1000) continue;\n\t\t\t}\n\t\t\tpokemonPool.push(id);\n\t\t}\n\t\treturn pokemonPool;\n\t}\n\n\trandomSpookyTeam() {\n\t\tconst seed = this.prng.seed;\n\t\tconst pokemon: RandomTeamsTypes.RandomSet[] = [];\n\t\tconst ocbmon: RandomTeamsTypes.RandomSet[] = [];\n\n\t\tconst baseFormes: {[k: string]: number} = {};\n\n\t\tconst tierCount: {[k: string]: number} = {};\n\t\tconst typeCount: {[k: string]: number} = {};\n\t\tconst typeComboCount: {[k: string]: number} = {};\n\t\tconst teamDetails: RandomTeamsTypes.TeamDetails = {};\n\n\t\tconst pokemonPool = this.getSpookyPokemonPool(false);\n\t\twhile (pokemonPool.length && pokemon.length < 3) {\n\t\t\tconst species = this.dex.species.get(this.sampleNoReplace(pokemonPool));\n\t\t\tif (!species.exists) continue;\n\n\t\t\t// Check if the forme has moves for random battle\n\t\t\tif ((this.format.gameType === 'singles') || (this.format.gameType === 'freeforall') || (this.format.gameType === 'multi')) {\n\t\t\t\tif (!species.randomBattleMoves) continue;\n\t\t\t} else {\n\t\t\t\tif (!species.randomDoubleBattleMoves) continue;\n\t\t\t}\n\n\t\t\t// Limit to one of each species (Species Clause)\n\t\t\tif (baseFormes[species.baseSpecies]) continue;\n\n\t\t\t// Adjust rate for species with multiple sets\n\t\t\tswitch (species.baseSpecies) {\n\t\t\tcase 'Arceus': case 'Silvally':\n\t\t\t\tif (this.randomChance(8, 9)) continue;\n\t\t\t\tbreak;\n\t\t\tcase 'Aegislash': case 'Basculin': case 'Gourgeist': case 'Meloetta':\n\t\t\t\tif (this.randomChance(1, 2)) continue;\n\t\t\t\tbreak;\n\t\t\tcase 'Greninja':\n\t\t\t\tif (this.gen >= 7 && this.randomChance(1, 2)) continue;\n\t\t\t\tbreak;\n\t\t\tcase 'Darmanitan':\n\t\t\t\tif (species.gen === 8 && this.randomChance(1, 2)) continue;\n\t\t\t\tbreak;\n\t\t\tcase 'Magearna': case 'Toxtricity': case 'Zacian': case 'Zamazenta': case 'Zarude':\n\t\t\tcase 'Appletun': case 'Blastoise': case 'Butterfree': case 'Copperajah': case 'Grimmsnarl': case 'Inteleon': case 'Rillaboom': case 'Snorlax': case 'Urshifu':\n\t\t\t\tif (this.gen >= 8 && this.randomChance(1, 2)) continue;\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\t// Illusion shouldn't be on the last slot\n\t\t\tif (species.name === 'Zoroark' && pokemon.length > 4) continue;\n\n\t\t\tconst tier = species.tier;\n\t\t\tconst types = species.types;\n\t\t\tconst typeCombo = types.slice().sort().join();\n\n\t\t\t// Limit one Pokemon per tier, two for Monotype\n\t\t\t// if ((tierCount[tier] >= (isMonotype ? 2 : 1)) && !this.randomChance(1, Math.pow(5, tierCount[tier]))) {\n\t\t\t// \tcontinue;\n\t\t\t// }\n\n\t\t\tconst set = this.randomSet(species, teamDetails, pokemon.length === 0, !['singles', 'freeforall'].includes(this.format.gameType), false);\n\n\t\t\t// Okay, the set passes, add it to our team\n\t\t\tpokemon.push(set);\n\n\t\t\tif (pokemon.length === this.maxTeamSize) {\n\t\t\t\t// Set Zoroark's level to be the same as the last Pokemon\n\t\t\t\tconst illusion = teamDetails['illusion'];\n\t\t\t\tif (illusion) pokemon[illusion - 1].level = pokemon[5].level;\n\n\t\t\t\t// Don't bother tracking details for the 6th Pokemon\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\t// Now that our Pokemon has passed all checks, we can increment our counters\n\t\t\tbaseFormes[species.baseSpecies] = 1;\n\n\t\t\t// Increment tier counter\n\t\t\tif (tierCount[tier]) {\n\t\t\t\ttierCount[tier]++;\n\t\t\t} else {\n\t\t\t\ttierCount[tier] = 1;\n\t\t\t}\n\n\t\t\t// Increment type counters\n\t\t\tfor (const typeName of types) {\n\t\t\t\tif (typeName in typeCount) {\n\t\t\t\t\ttypeCount[typeName]++;\n\t\t\t\t} else {\n\t\t\t\t\ttypeCount[typeName] = 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (typeCombo in typeComboCount) {\n\t\t\t\ttypeComboCount[typeCombo]++;\n\t\t\t} else {\n\t\t\t\ttypeComboCount[typeCombo] = 1;\n\t\t\t}\n\n\t\t\t// Track what the team has\n\t\t\tif (set.ability === 'Drizzle' || set.moves.includes('raindance')) teamDetails['rain'] = 1;\n\t\t\tif (set.ability === 'Drought' || set.moves.includes('sunnyday')) teamDetails['sun'] = 1;\n\t\t\tif (set.ability === 'Sand Stream') teamDetails['sand'] = 1;\n\t\t\tif (set.ability === 'Snow Warning') teamDetails['hail'] = 1;\n\t\t\tif (set.moves.includes('spikes')) teamDetails['spikes'] = (teamDetails['spikes'] || 0) + 1;\n\t\t\tif (set.moves.includes('stealthrock')) teamDetails['stealthRock'] = 1;\n\t\t\tif (set.moves.includes('stickyweb')) teamDetails['stickyWeb'] = 1;\n\t\t\tif (set.moves.includes('toxicspikes')) teamDetails['toxicSpikes'] = 1;\n\t\t\tif (set.moves.includes('defog')) teamDetails['defog'] = 1;\n\t\t\tif (set.moves.includes('rapidspin')) teamDetails['rapidSpin'] = 1;\n\t\t\tif (set.moves.includes('auroraveil') || set.moves.includes('reflect') && set.moves.includes('lightscreen')) teamDetails['screens'] = 1;\n\n\t\t\t// For setting Zoroark's level\n\t\t\tif (set.ability === 'Illusion') teamDetails['illusion'] = pokemon.length;\n\t\t}\n\n\t\tconst ocbmonPool = this.getSpookyPokemonPool(true);\n\t\twhile (ocbmonPool.length && ocbmon.length < 3) {\n\t\t\tconst species = this.dex.species.get(this.sampleNoReplace(ocbmonPool));\n\t\t\tif (!species.exists) continue;\n\n\t\t\t// Check if the forme has moves for random battle\n\t\t\tif ((this.format.gameType === 'singles') || (this.format.gameType === 'freeforall') || (this.format.gameType === 'multi')) {\n\t\t\t\tif (!species.randomBattleMoves) continue;\n\t\t\t} else {\n\t\t\t\tif (!species.randomDoubleBattleMoves) continue;\n\t\t\t}\n\n\t\t\t// Limit to one of each species (Species Clause)\n\t\t\tif (baseFormes[species.baseSpecies]) continue;\n\n\t\t\t// Adjust rate for species with multiple sets\n\t\t\tswitch (species.baseSpecies) {\n\t\t\tcase 'Arceus': case 'Silvally':\n\t\t\t\tif (this.randomChance(8, 9)) continue;\n\t\t\t\tbreak;\n\t\t\tcase 'Aegislash': case 'Basculin': case 'Gourgeist': case 'Meloetta':\n\t\t\t\tif (this.randomChance(1, 2)) continue;\n\t\t\t\tbreak;\n\t\t\tcase 'Greninja':\n\t\t\t\tif (this.gen >= 7 && this.randomChance(1, 2)) continue;\n\t\t\t\tbreak;\n\t\t\tcase 'Darmanitan':\n\t\t\t\tif (species.gen === 8 && this.randomChance(1, 2)) continue;\n\t\t\t\tbreak;\n\t\t\tcase 'Magearna': case 'Toxtricity': case 'Zacian': case 'Zamazenta': case 'Zarude':\n\t\t\tcase 'Appletun': case 'Blastoise': case 'Butterfree': case 'Copperajah': case 'Grimmsnarl': case 'Inteleon': case 'Rillaboom': case 'Snorlax': case 'Urshifu':\n\t\t\t\tif (this.gen >= 8 && this.randomChance(1, 2)) continue;\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\t// Illusion shouldn't be on the last slot\n\t\t\tif (species.name === 'Zoroark' && pokemon.length > 4) continue;\n\n\t\t\tconst tier = species.tier;\n\t\t\tconst types = species.types;\n\t\t\tconst typeCombo = types.slice().sort().join();\n\n\t\t\t// Limit one Pokemon per tier, two for Monotype\n\t\t\t// if ((tierCount[tier] >= (isMonotype ? 2 : 1)) && !this.randomChance(1, Math.pow(5, tierCount[tier]))) {\n\t\t\t// \tcontinue;\n\t\t\t// }\n\n\t\t\tconst set = this.randomSet(species, teamDetails, pokemon.length === 0, !['singles', 'freeforall'].includes(this.format.gameType), true);\n\n\t\t\t// Okay, the set passes, add it to our team\n\t\t\tpokemon.push(set);\n\n\t\t\tif (pokemon.length === this.maxTeamSize) {\n\t\t\t\t// Set Zoroark's level to be the same as the last Pokemon\n\t\t\t\tconst illusion = teamDetails['illusion'];\n\t\t\t\tif (illusion) pokemon[illusion - 1].level = pokemon[5].level;\n\n\t\t\t\t// Don't bother tracking details for the 6th Pokemon\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\t// Now that our Pokemon has passed all checks, we can increment our counters\n\t\t\tbaseFormes[species.baseSpecies] = 1;\n\n\t\t\t// Increment tier counter\n\t\t\tif (tierCount[tier]) {\n\t\t\t\ttierCount[tier]++;\n\t\t\t} else {\n\t\t\t\ttierCount[tier] = 1;\n\t\t\t}\n\n\t\t\t// Increment type counters\n\t\t\tfor (const typeName of types) {\n\t\t\t\tif (typeName in typeCount) {\n\t\t\t\t\ttypeCount[typeName]++;\n\t\t\t\t} else {\n\t\t\t\t\ttypeCount[typeName] = 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (typeCombo in typeComboCount) {\n\t\t\t\ttypeComboCount[typeCombo]++;\n\t\t\t} else {\n\t\t\t\ttypeComboCount[typeCombo] = 1;\n\t\t\t}\n\n\t\t\t// Track what the team has\n\t\t\tif (set.ability === 'Drizzle' || set.moves.includes('raindance')) teamDetails['rain'] = 1;\n\t\t\tif (set.ability === 'Drought' || set.moves.includes('sunnyday')) teamDetails['sun'] = 1;\n\t\t\tif (set.ability === 'Sand Stream') teamDetails['sand'] = 1;\n\t\t\tif (set.ability === 'Snow Warning') teamDetails['hail'] = 1;\n\t\t\tif (set.moves.includes('spikes')) teamDetails['spikes'] = (teamDetails['spikes'] || 0) + 1;\n\t\t\tif (set.moves.includes('stealthrock')) teamDetails['stealthRock'] = 1;\n\t\t\tif (set.moves.includes('stickyweb')) teamDetails['stickyWeb'] = 1;\n\t\t\tif (set.moves.includes('toxicspikes')) teamDetails['toxicSpikes'] = 1;\n\t\t\tif (set.moves.includes('defog')) teamDetails['defog'] = 1;\n\t\t\tif (set.moves.includes('rapidspin')) teamDetails['rapidSpin'] = 1;\n\t\t\tif (set.moves.includes('auroraveil') || set.moves.includes('reflect') && set.moves.includes('lightscreen')) teamDetails['screens'] = 1;\n\n\t\t\t// For setting Zoroark's level\n\t\t\tif (set.ability === 'Illusion') teamDetails['illusion'] = pokemon.length;\n\t\t}\n\t\tif ((pokemon.length + ocbmon.length) < this.maxTeamSize) throw new Error(`Could not build a random team for ${this.format} (seed=${seed})`);\n\n\t\treturn [...pokemon, ...ocbmon];\n\t}\n\n\tgetPokemonPool(type: string, pokemon: RandomTeamsTypes.RandomSet[] = [], isMonotype = false, legalInFormat = false) {\n\t\tconst exclude = pokemon.map(p => toID(p.species));\n\t\tconst pokemonPool = [];\n\t\tfor (const id in this.dex.data.FormatsData) {\n\t\t\tlet species = this.dex.species.get(id);\n\t\t\tif (species.gen > this.gen || exclude.includes(species.id)) continue;\n\n\t\t\tif (legalInFormat && species.isNonstandard !== null) continue;\n\n\t\t\tif (isMonotype) {\n\t\t\t\tif (!species.types.includes(type)) continue;\n\t\t\t\tif (typeof species.battleOnly === 'string') {\n\t\t\t\t\tspecies = this.dex.species.get(species.battleOnly);\n\t\t\t\t\tif (!species.types.includes(type)) continue;\n\t\t\t\t}\n\t\t\t}\n\t\t\tpokemonPool.push(id);\n\t\t}\n\t\treturn pokemonPool;\n\t}\n\n\trandomTeam() {\n\t\tconst seed = this.prng.seed;\n\t\tconst ruleTable = this.dex.formats.getRuleTable(this.format);\n\t\tconst pokemon: RandomTeamsTypes.RandomSet[] = [];\n\n\t\t// For Monotype\n\t\tconst isMonotype = ruleTable.has('sametypeclause');\n\t\tconst typePool = Object.keys(this.dex.data.TypeChart);\n\t\tconst type = this.sample(typePool);\n\n\t\t// PotD stuff\n\t\tlet potd: Species | false = false;\n\t\tif (global.Config && Config.potd && ruleTable.has('potd')) {\n\t\t\tpotd = this.dex.species.get(Config.potd);\n\t\t}\n\n\t\t// Ocbmons\n\t\tconst isCloveronly = this.format.id.includes('cloveronly');\n\n\t\tconst baseFormes: {[k: string]: number} = {};\n\n\t\tconst tierCount: {[k: string]: number} = {};\n\t\tconst typeCount: {[k: string]: number} = {};\n\t\tconst typeComboCount: {[k: string]: number} = {};\n\t\tconst teamDetails: RandomTeamsTypes.TeamDetails = {};\n\n\t\tconst pokemonPool = this.getPokemonPool(type, pokemon, isMonotype, isCloveronly);\n\t\twhile (pokemonPool.length && pokemon.length < this.maxTeamSize) {\n\t\t\tlet species = this.dex.species.get(this.sampleNoReplace(pokemonPool));\n\t\t\tif (!species.exists) continue;\n\t\t\tif (pokemon.length === 0 && this.noLead.includes(toID(species.name))) continue;\n\n\t\t\t// Check if the forme has moves for random battle\n\t\t\tif ((this.format.gameType === 'singles') || (this.format.gameType === 'freeforall') || (this.format.gameType === 'multi')) {\n\t\t\t\tif (!species.randomBattleMoves) continue;\n\t\t\t} else {\n\t\t\t\tif (!species.randomDoubleBattleMoves) continue;\n\t\t\t}\n\n\t\t\t// Limit to one of each species (Species Clause)\n\t\t\tif (baseFormes[species.baseSpecies]) continue;\n\n\t\t\t// Adjust rate for species with multiple sets\n\t\t\tswitch (species.baseSpecies) {\n\t\t\tcase 'Arceus': case 'Silvally':\n\t\t\t\tif (this.randomChance(8, 9) && !isMonotype) continue;\n\t\t\t\tbreak;\n\t\t\tcase 'Aegislash': case 'Basculin': case 'Gourgeist': case 'Meloetta':\n\t\t\t\tif (this.randomChance(1, 2)) continue;\n\t\t\t\tbreak;\n\t\t\tcase 'Greninja':\n\t\t\t\tif (this.gen >= 7 && this.randomChance(1, 2)) continue;\n\t\t\t\tbreak;\n\t\t\tcase 'Darmanitan':\n\t\t\t\tif (species.gen === 8 && this.randomChance(1, 2)) continue;\n\t\t\t\tbreak;\n\t\t\tcase 'Magearna': case 'Toxtricity': case 'Zacian': case 'Zamazenta': case 'Zarude':\n\t\t\tcase 'Appletun': case 'Blastoise': case 'Butterfree': case 'Copperajah': case 'Grimmsnarl': case 'Inteleon': case 'Rillaboom': case 'Snorlax': case 'Urshifu':\n\t\t\t\tif (this.gen >= 8 && this.randomChance(1, 2)) continue;\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\t// Illusion shouldn't be on the last slot\n\t\t\tif (species.name === 'Zoroark' && pokemon.length > 4) continue;\n\n\t\t\tconst tier = species.tier;\n\t\t\tconst types = species.types;\n\t\t\tconst typeCombo = types.slice().sort().join();\n\n\t\t\t// Limit one Pokemon per tier, two for Monotype\n\t\t\t// if ((tierCount[tier] >= (isMonotype ? 2 : 1)) && !this.randomChance(1, Math.pow(5, tierCount[tier]))) {\n\t\t\t// \tcontinue;\n\t\t\t// }\n\n\t\t\tif (!isMonotype) {\n\t\t\t\t// Limit two of any type\n\t\t\t\tlet skip = false;\n\t\t\t\tfor (const typeName of types) {\n\t\t\t\t\tif (typeCount[typeName] > 1) {\n\t\t\t\t\t\tskip = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (skip) continue;\n\t\t\t}\n\n\t\t\t// Limit one of any type combination, two in Monotype\n\t\t\tif (typeComboCount[typeCombo] >= (isMonotype ? 2 : 1)) continue;\n\n\t\t\t// The Pokemon of the Day\n\t\t\tif (!!potd && potd.exists && pokemon.length === 1) species = potd;\n\n\t\t\tconst set = this.randomSet(species, teamDetails, pokemon.length === 0, !['singles', 'freeforall'].includes(this.format.gameType), isCloveronly);\n\n\t\t\t// Okay, the set passes, add it to our team\n\t\t\tpokemon.push(set);\n\n\t\t\tif (pokemon.length === this.maxTeamSize) {\n\t\t\t\t// Set Zoroark's level to be the same as the last Pokemon\n\t\t\t\tconst illusion = teamDetails['illusion'];\n\t\t\t\tif (illusion) pokemon[illusion - 1].level = pokemon[5].level;\n\n\t\t\t\t// Don't bother tracking details for the 6th Pokemon\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\t// Now that our Pokemon has passed all checks, we can increment our counters\n\t\t\tbaseFormes[species.baseSpecies] = 1;\n\n\t\t\t// Increment tier counter\n\t\t\tif (tierCount[tier]) {\n\t\t\t\ttierCount[tier]++;\n\t\t\t} else {\n\t\t\t\ttierCount[tier] = 1;\n\t\t\t}\n\n\t\t\t// Increment type counters\n\t\t\tfor (const typeName of types) {\n\t\t\t\tif (typeName in typeCount) {\n\t\t\t\t\ttypeCount[typeName]++;\n\t\t\t\t} else {\n\t\t\t\t\ttypeCount[typeName] = 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (typeCombo in typeComboCount) {\n\t\t\t\ttypeComboCount[typeCombo]++;\n\t\t\t} else {\n\t\t\t\ttypeComboCount[typeCombo] = 1;\n\t\t\t}\n\n\t\t\t// Track what the team has\n\t\t\tif (set.ability === 'Drizzle' || set.moves.includes('raindance')) teamDetails['rain'] = 1;\n\t\t\tif (set.ability === 'Drought' || set.moves.includes('sunnyday')) teamDetails['sun'] = 1;\n\t\t\tif (set.ability === 'Sand Stream') teamDetails['sand'] = 1;\n\t\t\tif (set.ability === 'Snow Warning') teamDetails['hail'] = 1;\n\t\t\tif (set.moves.includes('spikes')) teamDetails['spikes'] = (teamDetails['spikes'] || 0) + 1;\n\t\t\tif (set.moves.includes('stealthrock')) teamDetails['stealthRock'] = 1;\n\t\t\tif (set.moves.includes('stickyweb')) teamDetails['stickyWeb'] = 1;\n\t\t\tif (set.moves.includes('toxicspikes')) teamDetails['toxicSpikes'] = 1;\n\t\t\tif (set.moves.includes('defog')) teamDetails['defog'] = 1;\n\t\t\tif (set.moves.includes('rapidspin')) teamDetails['rapidSpin'] = 1;\n\t\t\tif (set.moves.includes('auroraveil') || set.moves.includes('reflect') && set.moves.includes('lightscreen')) teamDetails['screens'] = 1;\n\n\t\t\t// For setting Zoroark's level\n\t\t\tif (set.ability === 'Illusion') teamDetails['illusion'] = pokemon.length;\n\t\t}\n\t\tif (pokemon.length < this.maxTeamSize) throw new Error(`Could not build a random team for ${this.format} (seed=${seed})`);\n\n\t\treturn pokemon;\n\t}\n}\n\nexport default RandomTeams;\n"],
  "mappings": "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",
  "names": []
}
