{
  "version": 3,
  "sources": ["../../../../data/mods/clovermixandmega/scripts.ts"],
  "sourcesContent": ["export const Scripts: ModdedBattleScriptsData = {\r\n\tinherit: 'clover',\r\n\tinit() {\r\n\t\tfor (const i in this.data.Items) {\r\n\t\t\tif (!this.data.Items[i].megaStone) continue;\r\n\t\t\tthis.modData('Items', i).onTakeItem = false;\r\n\t\t\tconst id = this.toID(this.data.Items[i].megaStone);\r\n\t\t\tthis.modData('FormatsData', id).isNonstandard = null;\r\n\t\t}\r\n\t},\r\n\tactions: {\r\n\t\tcanMegaEvo(pokemon) {\r\n\t\t\tif (pokemon.species.isMega) return null;\r\n\r\n\t\t\tconst item = pokemon.getItem();\r\n\t\t\tif (item.megaStone) {\r\n\t\t\t\tif (item.megaStone === pokemon.baseSpecies.name) return null;\r\n\t\t\t\treturn item.megaStone;\r\n\t\t\t} else {\r\n\t\t\t\treturn null;\r\n\t\t\t}\r\n\t\t},\r\n\t\trunMegaEvo(pokemon) {\r\n\t\t\tif (pokemon.species.isMega) return false;\r\n\r\n\t\t\t// @ts-ignore\r\n\t\t\tconst species: Species = this.getMixedSpecies(pokemon.m.originalSpecies, pokemon.canMegaEvo);\r\n\r\n\t\t\t// Pok\u00E9mon affected by Sky Drop cannot Mega Evolve. Enforce it here for now.\r\n\t\t\tfor (const foeActive of pokemon.foes()) {\r\n\t\t\t\tif (foeActive.volatiles['skydrop']?.source === pokemon) {\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Do we have a proper sprite for it?\r\n\t\t\tif (this.dex.species.get(pokemon.canMegaEvo!).baseSpecies === pokemon.m.originalSpecies) {\r\n\t\t\t\tpokemon.formeChange(species, pokemon.getItem(), true);\r\n\t\t\t} else {\r\n\t\t\t\tconst oSpecies = this.dex.species.get(pokemon.m.originalSpecies);\r\n\t\t\t\t// @ts-ignore\r\n\t\t\t\tconst oMegaSpecies = this.dex.species.get(species.originalMega);\r\n\t\t\t\tpokemon.formeChange(species, pokemon.getItem(), true);\r\n\t\t\t\tthis.battle.add('-start', pokemon, oMegaSpecies.requiredItem, '[silent]');\r\n\t\t\t\tif (oSpecies.types.length !== pokemon.species.types.length || oSpecies.types[1] !== pokemon.species.types[1]) {\r\n\t\t\t\t\tthis.battle.add('-start', pokemon, 'typechange', pokemon.species.types.join('/'), '[silent]');\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tpokemon.canMegaEvo = null;\r\n\t\t\treturn true;\r\n\t\t},\r\n\t\tgetMixedSpecies(originalForme, megaForme) {\r\n\t\t\tconst originalSpecies = this.dex.species.get(originalForme);\r\n\t\t\tconst megaSpecies = this.dex.species.get(megaForme);\r\n\t\t\tif (originalSpecies.baseSpecies === megaSpecies.baseSpecies) return megaSpecies;\r\n\t\t\t// @ts-ignore\r\n\t\t\tconst deltas = this.getMegaDeltas(megaSpecies);\r\n\t\t\t// @ts-ignore\r\n\t\t\tconst species = this.doGetMixedSpecies(originalSpecies, deltas);\r\n\t\t\treturn species;\r\n\t\t},\r\n\t\tgetMegaDeltas(megaSpecies) {\r\n\t\t\tconst baseSpecies = this.dex.species.get(megaSpecies.baseSpecies);\r\n\t\t\tconst deltas: {\r\n\t\t\t\tability: string,\r\n\t\t\t\tbaseStats: SparseStatsTable,\r\n\t\t\t\tweighthg: number,\r\n\t\t\t\toriginalMega: string,\r\n\t\t\t\trequiredItem: string | undefined,\r\n\t\t\t\ttype?: string,\r\n\t\t\t\tisMega?: boolean,\r\n\t\t\t} = {\r\n\t\t\t\tability: megaSpecies.abilities['0'],\r\n\t\t\t\tbaseStats: {},\r\n\t\t\t\tweighthg: megaSpecies.weighthg - baseSpecies.weighthg,\r\n\t\t\t\toriginalMega: megaSpecies.name,\r\n\t\t\t\trequiredItem: megaSpecies.requiredItem,\r\n\t\t\t};\r\n\t\t\tlet statId: StatID;\r\n\t\t\tfor (statId in megaSpecies.baseStats) {\r\n\t\t\t\tdeltas.baseStats[statId] = megaSpecies.baseStats[statId] - baseSpecies.baseStats[statId];\r\n\t\t\t}\r\n\t\t\tif (megaSpecies.types.length > baseSpecies.types.length) {\r\n\t\t\t\tdeltas.type = megaSpecies.types[1];\r\n\t\t\t} else if (megaSpecies.types.length < baseSpecies.types.length) {\r\n\t\t\t\tdeltas.type = 'mono';\r\n\t\t\t} else if (megaSpecies.types[1] !== baseSpecies.types[1]) {\r\n\t\t\t\tdeltas.type = megaSpecies.types[1];\r\n\t\t\t}\r\n\t\t\tif (megaSpecies.isMega) deltas.isMega = true;\r\n\t\t\treturn deltas;\r\n\t\t},\r\n\t\tdoGetMixedSpecies(speciesOrForme, deltas) {\r\n\t\t\tif (!deltas) throw new TypeError(\"Must specify deltas!\");\r\n\t\t\tconst species = this.dex.deepClone(this.dex.species.get(speciesOrForme));\r\n\t\t\tspecies.abilities = {'0': deltas.ability};\r\n\t\t\tif (species.types[0] === deltas.type) {\r\n\t\t\t\tspecies.types = [deltas.type];\r\n\t\t\t} else if (deltas.type === 'mono') {\r\n\t\t\t\tspecies.types = [species.types[0]];\r\n\t\t\t} else if (deltas.type) {\r\n\t\t\t\tspecies.types = [species.types[0], deltas.type];\r\n\t\t\t}\r\n\t\t\tconst baseStats = species.baseStats;\r\n\t\t\tfor (const statName in baseStats) {\r\n\t\t\t\tbaseStats[statName] = this.battle.clampIntRange(baseStats[statName] + deltas.baseStats[statName], 1, 255);\r\n\t\t\t}\r\n\t\t\tspecies.weighthg = Math.max(1, species.weighthg + deltas.weighthg);\r\n\t\t\tspecies.originalMega = deltas.originalMega;\r\n\t\t\tspecies.requiredItem = deltas.requiredItem;\r\n\t\t\tif (deltas.isMega) species.isMega = true;\r\n\t\t\treturn species;\r\n\t\t},\r\n\t},\r\n};\r\n"],
  "mappings": "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",
  "names": []
}
