{
  "version": 3,
  "sources": ["../../../../data/mods/gen5/random-teams.ts"],
  "sourcesContent": ["import RandomGen6Teams from '../gen6/random-teams';\r\nimport {Utils} from '../../../lib';\r\nimport {toID} from '../../../sim/dex';\r\nimport {PRNG} from '../../../sim';\r\nimport type {MoveCounter, OldRandomBattleSpecies} from '../gen8/random-teams';\r\n\r\n// Moves that shouldn't be the only STAB moves:\r\nconst NO_STAB = [\r\n\t'aquajet', 'bounce', 'chatter', 'clearsmog', 'dragontail', 'eruption', 'explosion', 'fakeout', 'flamecharge',\r\n\t'iceshard', 'icywind', 'incinerate', 'machpunch', 'pluck', 'pursuit', 'quickattack', 'reversal', 'selfdestruct',\r\n\t'skydrop', 'snarl', 'suckerpunch', 'uturn', 'vacuumwave', 'voltswitch', 'waterspout',\r\n];\r\n\r\nexport class RandomGen5Teams extends RandomGen6Teams {\r\n\trandomData: {[species: string]: OldRandomBattleSpecies} = require('./random-data.json');\r\n\r\n\tconstructor(format: string | Format, prng: PRNG | PRNGSeed | null) {\r\n\t\tsuper(format, prng);\r\n\t\tthis.noStab = NO_STAB;\r\n\r\n\t\tthis.moveEnforcementCheckers = {\r\n\t\t\tlead: (movePool, moves, abilities, types, counter) => (\r\n\t\t\t\tmovePool.includes('stealthrock') &&\r\n\t\t\t\t!!counter.get('Status') &&\r\n\t\t\t\t!counter.setupType &&\r\n\t\t\t\t!counter.get('speedsetup') &&\r\n\t\t\t\t!moves.has('substitute')\r\n\t\t\t),\r\n\t\t\tDark: (movePool, moves, abilities, types, counter) => !counter.get('Dark'),\r\n\t\t\tDragon: (movePool, moves, abilities, types, counter) => !counter.get('Dragon'),\r\n\t\t\tElectric: (movePool, moves, abilities, types, counter) => !counter.get('Electric') || movePool.includes('thunder'),\r\n\t\t\tFighting: (movePool, moves, abilities, types, counter, species) => (\r\n\t\t\t\t!counter.get('Fighting') &&\r\n\t\t\t\t(species.baseStats.atk >= 90 || abilities.has('Pure Power') || !!counter.setupType || !counter.get('Status'))\r\n\t\t\t),\r\n\t\t\tFire: (movePool, moves, abilities, types, counter) => !counter.get('Fire'),\r\n\t\t\tFlying: (movePool, moves, abilities, types, counter) => (\r\n\t\t\t\t!counter.get('Flying') && (types.has('Normal') || abilities.has('Serene Grace'))\r\n\t\t\t),\r\n\t\t\tGhost: (movePool, moves, abilities, types, counter) => !types.has('Dark') && !counter.get('Ghost'),\r\n\t\t\tGrass: movePool => (['hornleech', 'seedflare', 'woodhammer'].some(m => movePool.includes(m))),\r\n\t\t\tGround: (movePool, moves, abilities, types, counter) => (\r\n\t\t\t\t!counter.get('Ground') && !moves.has('rest') && !moves.has('sleeptalk')\r\n\t\t\t),\r\n\t\t\tIce: (movePool, moves, abilities, types, counter) => !counter.get('Ice'),\r\n\t\t\tNormal: (movePool, moves, abilities, types, counter, species) => (\r\n\t\t\t\tmovePool.includes('return') && species.baseStats.atk > 80\r\n\t\t\t),\r\n\t\t\tRock: (movePool, moves, abilities, types, counter, species) => !counter.get('Rock') && species.baseStats.atk >= 80,\r\n\t\t\tSteel: (movePool, moves, abilities, types, counter) => !counter.get('Steel') && abilities.has('Technician'),\r\n\t\t\tWater: (movePool, moves, abilities, types, counter) => (\r\n\t\t\t\t!counter.get('Water') || (abilities.has('Adaptability') && movePool.includes('waterfall'))\r\n\t\t\t),\r\n\t\t\tContrary: (movePool, moves, abilities, types, counter, species, teamDetails) => (\r\n\t\t\t\t!counter.get('contrary') && species.name !== 'Shuckle'\r\n\t\t\t),\r\n\t\t\tGuts: (movePool, moves, abilities, types) => types.has('Normal') && movePool.includes('facade'),\r\n\t\t\t'Slow Start': movePool => movePool.includes('substitute'),\r\n\t\t};\r\n\t}\r\n\r\n\tshouldCullMove(\r\n\t\tmove: Move,\r\n\t\ttypes: Set<string>,\r\n\t\tmoves: Set<string>,\r\n\t\tabilities: Set<string>,\r\n\t\tcounter: MoveCounter,\r\n\t\tmovePool: string[],\r\n\t\tteamDetails: RandomTeamsTypes.TeamDetails,\r\n\t\tspecies: Species,\r\n\t\tisLead: boolean,\r\n\t): {cull: boolean, isSetup?: boolean} {\r\n\t\tconst hasRestTalk = moves.has('rest') && moves.has('sleeptalk');\r\n\t\tswitch (move.id) {\r\n\t\t// Not very useful without their supporting moves\r\n\t\tcase 'endeavor':\r\n\t\t\treturn {cull: !isLead};\r\n\t\tcase 'focuspunch':\r\n\t\t\treturn {cull: !moves.has('substitute') || counter.damagingMoves.size < 2 || moves.has('swordsdance')};\r\n\t\tcase 'lightscreen':\r\n\t\t\tif (movePool.length > 1) {\r\n\t\t\t\tconst screen = movePool.indexOf('reflect');\r\n\t\t\t\tif (screen >= 0) this.fastPop(movePool, screen);\r\n\t\t\t}\r\n\t\t\treturn {cull: !moves.has('reflect')};\r\n\t\tcase 'reflect':\r\n\t\t\tif (movePool.length > 1) {\r\n\t\t\t\tconst screen = movePool.indexOf('lightscreen');\r\n\t\t\t\tif (screen >= 0) this.fastPop(movePool, screen);\r\n\t\t\t}\r\n\t\t\treturn {cull: !moves.has('lightscreen')};\r\n\t\tcase 'rest':\r\n\t\t\treturn {cull: movePool.includes('sleeptalk')};\r\n\t\tcase 'sleeptalk':\r\n\t\t\tif (movePool.length > 1) {\r\n\t\t\t\tconst rest = movePool.indexOf('rest');\r\n\t\t\t\tif (rest >= 0) this.fastPop(movePool, rest);\r\n\t\t\t}\r\n\t\t\treturn {cull: !moves.has('rest')};\r\n\t\tcase 'storedpower':\r\n\t\t\treturn {cull: !counter.setupType && !moves.has('cosmicpower')};\r\n\t\tcase 'weatherball':\r\n\t\t\treturn {cull: !moves.has('sunnyday')};\r\n\r\n\t\t// Set up once and only if we have the moves for it\r\n\t\tcase 'bellydrum': case 'bulkup': case 'coil': case 'curse': case 'dragondance': case 'honeclaws': case 'swordsdance':\r\n\t\t\treturn {cull: (counter.setupType !== 'Physical' || counter.get('physicalsetup') > 1 || (\r\n\t\t\t\tcounter.get('Physical') + counter.get('physicalpool') < 2 &&\r\n\t\t\t\t!hasRestTalk\r\n\t\t\t)), isSetup: true};\r\n\t\tcase 'calmmind': case 'nastyplot': case 'tailglow':\r\n\t\t\treturn {cull: (counter.setupType !== 'Special' || counter.get('specialsetup') > 1 || (\r\n\t\t\t\tcounter.get('Special') + counter.get('specialpool') < 2 &&\r\n\t\t\t\t!hasRestTalk\r\n\t\t\t)), isSetup: true};\r\n\t\tcase 'growth': case 'shellsmash': case 'workup':\r\n\t\t\tconst moveTotal = counter.damagingMoves.size + counter.get('physicalpool') + counter.get('specialpool');\r\n\t\t\treturn {\r\n\t\t\t\tcull: (\r\n\t\t\t\t\tcounter.setupType !== 'Mixed' ||\r\n\t\t\t\t\tcounter.get('mixedsetup') > 1 ||\r\n\t\t\t\t\tmoveTotal < 2 ||\r\n\t\t\t\t\t(move.id === 'growth' && !moves.has('sunnyday'))\r\n\t\t\t\t),\r\n\t\t\t\tisSetup: true,\r\n\t\t\t};\r\n\t\tcase 'agility': case 'autotomize': case 'rockpolish':\r\n\t\t\treturn {\r\n\t\t\t\tcull: (\r\n\t\t\t\t\t(counter.damagingMoves.size < 2 && !counter.setupType) ||\r\n\t\t\t\t\thasRestTalk\r\n\t\t\t\t),\r\n\t\t\t\tisSetup: !counter.setupType,\r\n\t\t\t};\r\n\r\n\t\t// Bad after setup\r\n\t\tcase 'bulletpunch':\r\n\t\t\treturn {cull: !!counter.get('speedsetup')};\r\n\t\tcase 'circlethrow': case 'dragontail':\r\n\t\t\treturn {cull: moves.has('substitute') || (!!counter.setupType && !moves.has('rest') && !moves.has('sleeptalk'))};\r\n\t\tcase 'fakeout': case 'healingwish':\r\n\t\t\treturn {cull: !!counter.setupType || !!counter.get('recovery') || moves.has('substitute')};\r\n\t\tcase 'haze': case 'magiccoat': case 'pursuit': case 'spikes':\r\n\t\t\treturn {cull: !!counter.setupType || !!counter.get('speedsetup') || moves.has('rest') || moves.has('trickroom')};\r\n\t\tcase 'iceshard':\r\n\t\t\treturn {cull: moves.has('shellsmash')};\r\n\t\tcase 'leechseed': case 'roar': case 'whirlwind':\r\n\t\t\treturn {cull: !!counter.setupType || !!counter.get('speedsetup') || moves.has('dragontail')};\r\n\t\tcase 'nightshade': case 'seismictoss': case 'superfang':\r\n\t\t\treturn {cull: !!counter.setupType || counter.damagingMoves.size > 1};\r\n\t\tcase 'protect':\r\n\t\t\treturn {cull: (\r\n\t\t\t\tmoves.has('rest') ||\r\n\t\t\t\t(counter.setupType && !abilities.has('Speed Boost') && !moves.has('wish')) ||\r\n\t\t\t\tmoves.has('lightscreen') && moves.has('reflect')\r\n\t\t\t)};\r\n\t\tcase 'rapidspin':\r\n\t\t\treturn {cull: moves.has('shellsmash') || (!!counter.setupType && counter.get('Status') >= 2)};\r\n\t\tcase 'stealthrock':\r\n\t\t\treturn {cull: !!counter.setupType || !!counter.get('speedsetup') || moves.has('rest') || !!teamDetails.stealthRock};\r\n\t\tcase 'switcheroo': case 'trick':\r\n\t\t\treturn {cull: (\r\n\t\t\t\tcounter.get('Physical') + counter.get('Special') < 3 ||\r\n\t\t\t\t['fakeout', 'rapidspin', 'suckerpunch'].some(m => moves.has(m))\r\n\t\t\t)};\r\n\t\tcase 'toxic':\r\n\t\t\treturn {cull: !!counter.setupType || !!counter.get('speedsetup') || moves.has('trickroom')};\r\n\t\tcase 'toxicspikes':\r\n\t\t\treturn {cull: !!counter.setupType || !!teamDetails.toxicSpikes};\r\n\t\tcase 'trickroom':\r\n\t\t\treturn {cull: (\r\n\t\t\t\t!!counter.setupType ||\r\n\t\t\t\t!!counter.get('speedsetup') ||\r\n\t\t\t\tcounter.damagingMoves.size < 2 ||\r\n\t\t\t\tmoves.has('lightscreen') || moves.has('reflect')\r\n\t\t\t)};\r\n\t\tcase 'uturn':\r\n\t\t\t// Infernape doesn't want mixed sets with U-turn\r\n\t\t\tconst infernapeCase = species.id === 'infernape' && !!counter.get('Special');\r\n\t\t\treturn {cull: !!counter.setupType || !!counter.get('speedsetup') || infernapeCase};\r\n\t\tcase 'voltswitch':\r\n\t\t\treturn {cull: (\r\n\t\t\t\t!!counter.setupType ||\r\n\t\t\t\t!!counter.get('speedsetup') ||\r\n\t\t\t\t['magnetrise', 'uturn'].some(m => moves.has(m))\r\n\t\t\t)};\r\n\r\n\t\t// Ineffective having both\r\n\t\t// Attacks:\r\n\t\tcase 'bugbite':\r\n\t\t\treturn {cull: moves.has('uturn')};\r\n\t\tcase 'crunch':\r\n\t\t\treturn {cull: !types.has('Dark') && moves.has('suckerpunch')};\r\n\t\tcase 'dragonpulse': case 'spacialrend':\r\n\t\t\treturn {cull: moves.has('dracometeor') || moves.has('outrage')};\r\n\t\tcase 'thunderbolt':\r\n\t\t\treturn {cull: moves.has('wildcharge')};\r\n\t\tcase 'drainpunch': case 'focusblast':\r\n\t\t\treturn {cull: moves.has('closecombat') || moves.has('lowkick')};\r\n\t\tcase 'blueflare': case 'flareblitz': case 'fierydance': case 'flamethrower': case 'lavaplume':\r\n\t\t\treturn {cull: ['fireblast', 'overheat', 'vcreate'].some(m => moves.has(m))};\r\n\t\tcase 'bravebird': case 'pluck':\r\n\t\t\treturn {cull: moves.has('acrobatics') || moves.has('hurricane')};\r\n\t\tcase 'acrobatics':\r\n\t\t\treturn {cull: !counter.setupType && moves.has('hurricane')};\r\n\t\tcase 'hurricane':\r\n\t\t\treturn {cull: !!counter.setupType && moves.has('acrobatics')};\r\n\t\tcase 'gigadrain':\r\n\t\t\treturn {cull: (!counter.setupType && moves.has('leafstorm')) ||\r\n\t\t\t\t['petaldance', 'powerwhip'].some(m => moves.has(m))};\r\n\t\tcase 'solarbeam':\r\n\t\t\treturn {cull: (!abilities.has('Drought') && !moves.has('sunnyday')) || moves.has('gigadrain')};\r\n\t\tcase 'leafstorm':\r\n\t\t\treturn {cull: !!counter.setupType && (moves.has('gigadrain') || moves.has('seedbomb'))};\r\n\t\tcase 'seedbomb':\r\n\t\t\treturn {cull: !counter.setupType && (moves.has('leafstorm'))};\r\n\t\tcase 'bonemerang': case 'earthpower':\r\n\t\t\treturn {cull: moves.has('earthquake')};\r\n\t\tcase 'extremespeed': case 'headsmash':\r\n\t\t\treturn {cull: moves.has('roost')};\r\n\t\tcase 'facade':\r\n\t\t\treturn {cull: moves.has('suckerpunch') && !types.has('Normal')};\r\n\t\tcase 'hydropump':\r\n\t\t\treturn {cull: moves.has('waterfall') && !!counter.setupType};\r\n\t\tcase 'judgment':\r\n\t\t\treturn {cull: counter.setupType !== 'Special' && counter.get('stab') > 1};\r\n\t\tcase 'return':\r\n\t\t\treturn {cull: moves.has('doubleedge')};\r\n\t\tcase 'rockblast':\r\n\t\t\treturn {cull: moves.has('stoneedge')};\r\n\t\tcase 'poisonjab':\r\n\t\t\treturn {cull: moves.has('gunkshot')};\r\n\t\tcase 'psychic':\r\n\t\t\treturn {cull: moves.has('psyshock')};\r\n\t\tcase 'scald': case 'surf':\r\n\t\t\treturn {cull: moves.has('hydropump') || moves.has('waterfall')};\r\n\t\tcase 'shadowball':\r\n\t\t\t// mono-Psychic types with Calm Mind shouldn't have Shadow Ball as their only coverage\r\n\t\t\t// Chimecho is exempt since Shadow Ball is its only coverage move\r\n\t\t\treturn {cull: types.has('Psychic') && types.size < 2 && counter.get('Special') < 3 &&\r\n\t\t\t\tmoves.has('calmmind') && species.id !== 'chimecho'};\r\n\t\tcase 'waterfall':\r\n\t\t\treturn {cull: moves.has('hydropump') && !counter.setupType && !moves.has('raindance') && !teamDetails.rain};\r\n\t\tcase 'waterspout':\r\n\t\t\treturn {cull: !!counter.get('Status')};\r\n\r\n\t\t// Status:\r\n\t\tcase 'encore': case 'icepunch': case 'raindance': case 'suckerpunch':\r\n\t\t\treturn {cull: moves.has('thunderwave') || hasRestTalk};\r\n\t\tcase 'glare': case 'headbutt':\r\n\t\t\treturn {cull: moves.has('bodyslam')};\r\n\t\tcase 'healbell':\r\n\t\t\treturn {cull: !!counter.get('speedsetup') || moves.has('magiccoat')};\r\n\t\tcase 'moonlight': case 'painsplit': case 'recover': case 'roost': case 'softboiled': case 'synthesis':\r\n\t\t\t// Prevent Roost + Protect on Gliscor\r\n\t\t\tconst gliscorCase = species.id === 'gliscor' && moves.has('protect');\r\n\t\t\treturn {cull: ['leechseed', 'rest', 'wish'].some(m => moves.has(m)) || gliscorCase};\r\n\t\tcase 'substitute':\r\n\t\t\treturn {cull: (\r\n\t\t\t\t(moves.has('doubleedge') && !abilities.has('rockhead')) ||\r\n\t\t\t\t['pursuit', 'rest', 'superpower', 'uturn', 'voltswitch'].some(m => moves.has(m)) ||\r\n\t\t\t\t// Sceptile wants Swords Dance\r\n\t\t\t\t(moves.has('acrobatics') && moves.has('earthquake')) ||\r\n\t\t\t\tmovePool.includes('shiftgear')\r\n\t\t\t)};\r\n\t\tcase 'thunderwave':\r\n\t\t\treturn {cull: (\r\n\t\t\t\t!!counter.setupType ||\r\n\t\t\t\t!!counter.get('speedsetup') ||\r\n\t\t\t\thasRestTalk ||\r\n\t\t\t\tmoves.has('discharge') || moves.has('trickroom')\r\n\t\t\t)};\r\n\t\tcase 'willowisp':\r\n\t\t\treturn {cull: moves.has('lavaplume') || moves.has('scald') && !types.has('Ghost')};\r\n\t\t}\r\n\r\n\t\treturn {cull: false};\r\n\t}\r\n\r\n\tshouldCullAbility(\r\n\t\tability: string,\r\n\t\ttypes: Set<string>,\r\n\t\tmoves: Set<string>,\r\n\t\tabilities: Set<string>,\r\n\t\tcounter: MoveCounter,\r\n\t\tmovePool: string[],\r\n\t\tteamDetails: RandomTeamsTypes.TeamDetails,\r\n\t\tspecies: Species\r\n\t): boolean {\r\n\t\tswitch (ability) {\r\n\t\tcase 'Anger Point': case 'Gluttony': case 'Moody': case 'Sand Veil': case 'Snow Cloak': case 'Steadfast':\r\n\t\t\treturn true;\r\n\t\tcase 'Analytic': case 'Download': case 'Hyper Cutter':\r\n\t\t\treturn species.nfe;\r\n\t\tcase 'Chlorophyll': case 'Solar Power':\r\n\t\t\treturn (abilities.has('Harvest') || (!moves.has('sunnyday') && !teamDetails.sun));\r\n\t\tcase 'Compound Eyes': case 'No Guard':\r\n\t\t\treturn !counter.get('inaccurate');\r\n\t\tcase 'Contrary': case 'Iron Fist': case 'Skill Link':\r\n\t\t\treturn !counter.get(toID(ability));\r\n\t\tcase 'Defiant': case 'Moxie':\r\n\t\t\treturn !counter.get('Physical');\r\n\t\tcase 'Flash Fire':\r\n\t\t\treturn abilities.has('Drought');\r\n\t\tcase 'Guts':\r\n\t\t\treturn (species.id === 'heracross');\r\n\t\tcase 'Hydration': case 'Rain Dish': case 'Swift Swim':\r\n\t\t\treturn (!moves.has('raindance') && !teamDetails.rain);\r\n\t\tcase 'Hustle':\r\n\t\t\treturn counter.get('Physical') < 2;\r\n\t\tcase 'Ice Body':\r\n\t\t\treturn !teamDetails.hail;\r\n\t\tcase 'Immunity':\r\n\t\t\treturn abilities.has('Toxic Boost');\r\n\t\tcase 'Intimidate':\r\n\t\t\treturn moves.has('rest') || species.id === 'staraptor';\r\n\t\tcase 'Lightning Rod':\r\n\t\t\treturn species.types.includes('Ground');\r\n\t\tcase 'Limber':\r\n\t\t\treturn species.types.includes('Electric');\r\n\t\tcase 'Mold Breaker':\r\n\t\t\treturn (\r\n\t\t\t\tabilities.has('Adaptability') ||\r\n\t\t\t\tmoves.has('rest') && moves.has('sleeptalk') ||\r\n\t\t\t\t(abilities.has('Sheer Force') && !!counter.get('sheerforce'))\r\n\t\t\t);\r\n\t\tcase 'Overgrow':\r\n\t\t\treturn !counter.get('Grass');\r\n\t\tcase 'Poison Heal':\r\n\t\t\treturn (abilities.has('Technician') && !!counter.get('technician'));\r\n\t\tcase 'Prankster':\r\n\t\t\treturn !counter.get('Status');\r\n\t\tcase 'Pressure': case 'Synchronize':\r\n\t\t\treturn (counter.get('Status') < 2 || abilities.has('Trace'));\r\n\t\tcase 'Reckless': case 'Rock Head':\r\n\t\t\treturn (!counter.get('recoil') || abilities.has('Sap Sipper'));\r\n\t\tcase 'Regenerator':\r\n\t\t\treturn abilities.has('Magic Guard');\r\n\t\tcase 'Sand Force': case 'Sand Rush':\r\n\t\t\treturn !teamDetails.sand;\r\n\t\tcase 'Serene Grace':\r\n\t\t\treturn (!counter.get('serenegrace') || species.id === 'blissey');\r\n\t\tcase 'Sheer Force':\r\n\t\t\treturn (!counter.get('sheerforce') || abilities.has('Guts'));\r\n\t\tcase 'Sturdy':\r\n\t\t\treturn (!!counter.get('recoil') && !counter.get('recovery'));\r\n\t\tcase 'Swarm':\r\n\t\t\treturn !counter.get('Bug');\r\n\t\tcase 'Technician':\r\n\t\t\treturn (!counter.get('technician') || moves.has('tailslap'));\r\n\t\tcase 'Tinted Lens':\r\n\t\t\treturn (abilities.has('Insomnia') || abilities.has('Magic Guard') || moves.has('protect'));\r\n\t\tcase 'Unaware':\r\n\t\t\treturn (!!counter.setupType || abilities.has('Magic Guard'));\r\n\t\tcase 'Unburden':\r\n\t\t\treturn species.baseStats.spe > 100 && !moves.has('acrobatics');\r\n\t\tcase 'Water Absorb':\r\n\t\t\treturn (abilities.has('Drizzle') || abilities.has('Unaware') || abilities.has('Volt Absorb'));\r\n\t\t}\r\n\r\n\t\treturn false;\r\n\t}\r\n\r\n\r\n\tgetAbility(\r\n\t\ttypes: Set<string>,\r\n\t\tmoves: Set<string>,\r\n\t\tabilities: Set<string>,\r\n\t\tcounter: MoveCounter,\r\n\t\tmovePool: string[],\r\n\t\tteamDetails: RandomTeamsTypes.TeamDetails,\r\n\t\tspecies: Species,\r\n\t): string {\r\n\t\tconst abilityData = Array.from(abilities).map(a => this.dex.abilities.get(a));\r\n\t\tUtils.sortBy(abilityData, abil => -abil.rating);\r\n\r\n\t\tif (abilityData.length <= 1) return abilityData[0].name;\r\n\r\n\t\t// Hard-code abilities here\r\n\t\tif (abilities.has('Guts') && moves.has('facade') && (!abilities.has('Quick Feet') || !counter.setupType)) return 'Guts';\r\n\t\tif (abilities.has('Prankster') && counter.get('Status') > 1) return 'Prankster';\r\n\t\tif (abilities.has('Quick Feet') && moves.has('facade')) return 'Quick Feet';\r\n\t\tif (abilities.has('Swift Swim') && moves.has('raindance')) return 'Swift Swim';\r\n\t\tif (species.name === 'Altaria') return 'Natural Cure';\r\n\t\t// Mandibuzz doesn't want Weak Armor\r\n\t\tif (species.name === 'Mandibuzz') return this.sample(['Big Pecks', 'Overcoat']);\r\n\r\n\t\tlet abilityAllowed: Ability[] = [];\r\n\t\t// Obtain a list of abilities that are allowed (not culled)\r\n\t\tfor (const ability of abilityData) {\r\n\t\t\tif (ability.rating >= 1 && !this.shouldCullAbility(\r\n\t\t\t\tability.name, types, moves, abilities, counter, movePool, teamDetails, species\r\n\t\t\t)) {\r\n\t\t\t\tabilityAllowed.push(ability);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// If all abilities are rejected, re-allow all abilities\r\n\t\tif (!abilityAllowed.length) {\r\n\t\t\tfor (const ability of abilityData) {\r\n\t\t\t\tif (ability.rating > 0) abilityAllowed.push(ability);\r\n\t\t\t}\r\n\t\t\tif (!abilityAllowed.length) abilityAllowed = abilityData;\r\n\t\t}\r\n\r\n\t\tif (abilityAllowed.length === 1) return abilityAllowed[0].name;\r\n\t\t// Sort abilities by rating with an element of randomness\r\n\t\t// All three abilities can be chosen\r\n\t\tif (abilityAllowed[2] && abilityAllowed[0].rating - 0.5 <= abilityAllowed[2].rating) {\r\n\t\t\tif (abilityAllowed[1].rating <= abilityAllowed[2].rating) {\r\n\t\t\t\tif (this.randomChance(1, 2)) [abilityAllowed[1], abilityAllowed[2]] = [abilityAllowed[2], abilityAllowed[1]];\r\n\t\t\t} else {\r\n\t\t\t\tif (this.randomChance(1, 3)) [abilityAllowed[1], abilityAllowed[2]] = [abilityAllowed[2], abilityAllowed[1]];\r\n\t\t\t}\r\n\t\t\tif (abilityAllowed[0].rating <= abilityAllowed[1].rating) {\r\n\t\t\t\tif (this.randomChance(2, 3)) [abilityAllowed[0], abilityAllowed[1]] = [abilityAllowed[1], abilityAllowed[0]];\r\n\t\t\t} else {\r\n\t\t\t\tif (this.randomChance(1, 2)) [abilityAllowed[0], abilityAllowed[1]] = [abilityAllowed[1], abilityAllowed[0]];\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\t// Third ability cannot be chosen\r\n\t\t\tif (abilityAllowed[0].rating <= abilityAllowed[1].rating) {\r\n\t\t\t\tif (this.randomChance(1, 2)) [abilityAllowed[0], abilityAllowed[1]] = [abilityAllowed[1], abilityAllowed[0]];\r\n\t\t\t} else if (abilityAllowed[0].rating - 0.5 <= abilityAllowed[1].rating) {\r\n\t\t\t\tif (this.randomChance(1, 3)) [abilityAllowed[0], abilityAllowed[1]] = [abilityAllowed[1], abilityAllowed[0]];\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// After sorting, choose the first ability\r\n\t\treturn abilityAllowed[0].name;\r\n\t}\r\n\r\n\tgetHighPriorityItem(\r\n\t\tability: string,\r\n\t\ttypes: Set<string>,\r\n\t\tmoves: Set<string>,\r\n\t\tcounter: MoveCounter,\r\n\t\tteamDetails: RandomTeamsTypes.TeamDetails,\r\n\t\tspecies: Species,\r\n\t\tisLead: boolean\r\n\t): string | undefined {\r\n\t\tif (species.requiredItem) return species.requiredItem;\r\n\t\tif (species.requiredItems) return this.sample(species.requiredItems);\r\n\r\n\t\tif (species.name === 'Marowak') return 'Thick Club';\r\n\t\tif (species.name === 'Farfetch\\u2019d') return 'Stick';\r\n\t\tif (species.name === 'Latias' || species.name === 'Latios') return 'Soul Dew';\r\n\t\tif (species.name === 'Pikachu') return 'Light Ball';\r\n\t\tif (species.name === 'Shedinja' || species.name === 'Smeargle') return 'Focus Sash';\r\n\t\tif (species.name === 'Unown') return 'Choice Specs';\r\n\t\tif (species.name === 'Wobbuffet' && moves.has('destinybond') && this.randomChance(1, 2)) return 'Custap Berry';\r\n\t\tif (ability === 'Imposter') return 'Choice Scarf';\r\n\t\tif (moves.has('switcheroo') || moves.has('trick')) {\r\n\t\t\tif (species.baseStats.spe >= 60 && species.baseStats.spe <= 108 && !counter.get('priority')) {\r\n\t\t\t\treturn 'Choice Scarf';\r\n\t\t\t} else {\r\n\t\t\t\treturn (counter.get('Physical') > counter.get('Special')) ? 'Choice Band' : 'Choice Specs';\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (species.nfe) return 'Eviolite';\r\n\t\tif (moves.has('shellsmash')) return 'White Herb';\r\n\t\tif (ability === 'Harvest' || moves.has('bellydrum')) return 'Sitrus Berry';\r\n\t\tif ((ability === 'Magic Guard' || ability === 'Sheer Force') && counter.damagingMoves.size > 1) return 'Life Orb';\r\n\t\tif (\r\n\t\t\tability === 'Poison Heal' ||\r\n\t\t\tability === 'Toxic Boost' ||\r\n\t\t\t(ability === 'Quick Feet' && moves.has('facade'))\r\n\t\t) {\r\n\t\t\treturn 'Toxic Orb';\r\n\t\t}\r\n\t\tif (moves.has('psychoshift')) return 'Flame Orb';\r\n\t\tif (moves.has('rest') && !moves.has('sleeptalk') && ability !== 'Natural Cure' && ability !== 'Shed Skin') {\r\n\t\t\treturn 'Chesto Berry';\r\n\t\t}\r\n\t\tif (ability === 'Guts' && moves.has('facade')) {\r\n\t\t\treturn (types.has('Fire') || moves.has('uturn') || moves.has('voltswitch')) ? 'Toxic Orb' : 'Flame Orb';\r\n\t\t}\r\n\t\tif (moves.has('raindance')) return (ability === 'Forecast') ? 'Damp Rock' : 'Life Orb';\r\n\t\tif (moves.has('sunnyday')) return (ability === 'Forecast' || ability === 'Flower Gift') ? 'Heat Rock' : 'Life Orb';\r\n\t\tif (moves.has('lightscreen') && moves.has('reflect')) return 'Light Clay';\r\n\t\tif (moves.has('acrobatics')) return 'Flying Gem';\r\n\t\tif (ability === 'Unburden') return moves.has('fakeout') ? 'Normal Gem' : `${species.types[0]} Gem`;\r\n\t}\r\n\r\n\tgetLowPriorityItem(\r\n\t\tability: string,\r\n\t\ttypes: Set<string>,\r\n\t\tmoves: Set<string>,\r\n\t\tabilities: Set<string>,\r\n\t\tcounter: MoveCounter,\r\n\t\tteamDetails: RandomTeamsTypes.TeamDetails,\r\n\t\tspecies: Species,\r\n\t\tisLead: boolean,\r\n\t): string | undefined {\r\n\t\tif (\r\n\t\t\tability === 'Speed Boost' &&\r\n\t\t\t!moves.has('substitute') &&\r\n\t\t\tcounter.get('Physical') + counter.get('Special') > 2\r\n\t\t) {\r\n\t\t\treturn 'Life Orb';\r\n\t\t}\r\n\t\tif (\r\n\t\t\tcounter.get('Physical') >= 4 &&\r\n\t\t\t['dragontail', 'fakeout', 'flamecharge'].every(m => !moves.has(m)) &&\r\n\t\t\t!moves.has('suckerpunch') &&\r\n\t\t\t(!moves.has('rapidspin') || this.dex.getEffectiveness('Rock', species) < 1)\r\n\t\t) {\r\n\t\t\treturn (\r\n\t\t\t\t(species.baseStats.atk >= 100 || abilities.has('Huge Power')) &&\r\n\t\t\t\tspecies.baseStats.spe >= 60 && species.baseStats.spe <= 108 &&\r\n\t\t\t\t!counter.get('priority') &&\r\n\t\t\t\tthis.randomChance(2, 3)\r\n\t\t\t) ? 'Choice Scarf' : 'Choice Band';\r\n\t\t}\r\n\t\tif (counter.get('Special') >= 4 || (counter.get('Special') >= 3 && moves.has('uturn'))) {\r\n\t\t\treturn (\r\n\t\t\t\tspecies.baseStats.spa >= 100 &&\r\n\t\t\t\tspecies.baseStats.spe >= 60 && species.baseStats.spe <= 108 &&\r\n\t\t\t\t!moves.has('uturn') &&\r\n\t\t\t\t(ability === 'Download' || this.randomChance(2, 3))\r\n\t\t\t) ? 'Choice Scarf' : 'Choice Specs';\r\n\t\t}\r\n\r\n\t\tif (counter.setupType && moves.has('outrage')) return 'Lum Berry';\r\n\t\tif (this.dex.getEffectiveness('Ground', species) >= 2 && ability !== 'Levitate') return 'Air Balloon';\r\n\t\tif (counter.get('Dark') >= 3) return 'Black Glasses';\r\n\t\tif (species.name === 'Palkia' && (moves.has('dracometeor') || moves.has('spacialrend'))) {\r\n\t\t\treturn 'Lustrous Orb';\r\n\t\t}\r\n\t\tif (\r\n\t\t\ttypes.has('Poison') ||\r\n\t\t\t['bodyslam', 'dragontail', 'protect', 'scald', 'sleeptalk', 'substitute'].some(m => moves.has(m))\r\n\t\t) {\r\n\t\t\treturn 'Leftovers';\r\n\t\t}\r\n\t\tif (counter.damagingMoves.size >= 4 && ability !== 'Sturdy') {\r\n\t\t\treturn moves.has('uturn') ? 'Expert Belt' : 'Life Orb';\r\n\t\t}\r\n\t\tif (\r\n\t\t\tisLead &&\r\n\t\t\tcounter.get('hazards') &&\r\n\t\t\t!counter.get('recovery') &&\r\n\t\t\tability !== 'Regenerator' &&\r\n\t\t\tspecies.baseStats.hp + species.baseStats.def + species.baseStats.spd <= 275\r\n\t\t) {\r\n\t\t\treturn ability === 'Sturdy' ? 'Custap Berry' : 'Focus Sash';\r\n\t\t}\r\n\t\tif (moves.has('voltswitch') && species.baseStats.spe <= 90) {\r\n\t\t\treturn 'Leftovers';\r\n\t\t}\r\n\t\tif (\r\n\t\t\tcounter.damagingMoves.size >= 3 &&\r\n\t\t\tspecies.baseStats.spe >= 40 &&\r\n\t\t\tspecies.baseStats.hp + species.baseStats.def + species.baseStats.spd <= 275 &&\r\n\t\t\tability !== 'Sturdy' &&\r\n\t\t\t!moves.has('rapidspin') && !moves.has('uturn')\r\n\t\t) {\r\n\t\t\treturn 'Life Orb';\r\n\t\t}\r\n\t}\r\n\r\n\trandomSet(\r\n\t\tspecies: string | Species,\r\n\t\tteamDetails: RandomTeamsTypes.TeamDetails = {},\r\n\t\tisLead = false\r\n\t): RandomTeamsTypes.RandomSet {\r\n\t\tspecies = this.dex.species.get(species);\r\n\t\tlet forme = species.name;\r\n\r\n\t\tif (typeof species.battleOnly === 'string') {\r\n\t\t\t// Only change the forme. The species has custom moves, and may have different typing and requirements.\r\n\t\t\tforme = species.battleOnly;\r\n\t\t}\r\n\t\tif (species.cosmeticFormes) {\r\n\t\t\tforme = this.sample([species.name].concat(species.cosmeticFormes));\r\n\t\t}\r\n\r\n\t\tconst data = this.randomData[species.id];\r\n\r\n\t\tconst movePool = (data.moves || Object.keys(this.dex.species.getLearnset(species.id)!)).slice();\r\n\t\tconst rejectedPool = [];\r\n\t\tconst moves = new Set<string>();\r\n\t\tlet ability = '';\r\n\r\n\t\tconst evs = {hp: 85, atk: 85, def: 85, spa: 85, spd: 85, spe: 85};\r\n\t\tconst ivs: SparseStatsTable = {hp: 31, atk: 31, def: 31, spa: 31, spd: 31, spe: 31};\r\n\t\tconst types = new Set(species.types);\r\n\t\tconst abilities = new Set(Object.values(species.abilities));\r\n\t\tif (species.unreleasedHidden) abilities.delete(species.abilities.H);\r\n\r\n\t\tlet availableHP = 0;\r\n\t\tfor (const setMoveid of movePool) {\r\n\t\t\tif (setMoveid.startsWith('hiddenpower')) availableHP++;\r\n\t\t}\r\n\r\n\t\tlet counter: MoveCounter;\r\n\t\t// We use a special variable to track Hidden Power\r\n\t\t// so that we can check for all Hidden Powers at once\r\n\t\tlet hasHiddenPower = false;\r\n\r\n\t\tdo {\r\n\t\t\t// Choose next 4 moves from learnset/viable moves and add them to moves list:\r\n\t\t\twhile (moves.size < this.maxMoveCount && movePool.length) {\r\n\t\t\t\tconst moveid = this.sampleNoReplace(movePool);\r\n\t\t\t\tif (moveid.startsWith('hiddenpower')) {\r\n\t\t\t\t\tavailableHP--;\r\n\t\t\t\t\tif (hasHiddenPower) continue;\r\n\t\t\t\t\thasHiddenPower = true;\r\n\t\t\t\t}\r\n\t\t\t\tmoves.add(moveid);\r\n\t\t\t}\r\n\r\n\t\t\twhile (moves.size < this.maxMoveCount && rejectedPool.length) {\r\n\t\t\t\tconst moveid = this.sampleNoReplace(rejectedPool);\r\n\t\t\t\tif (moveid.startsWith('hiddenpower')) {\r\n\t\t\t\t\tif (hasHiddenPower) {\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t}\r\n\t\t\t\t\thasHiddenPower = true;\r\n\t\t\t\t}\r\n\t\t\t\tmoves.add(moveid);\r\n\t\t\t}\r\n\r\n\t\t\tcounter = this.queryMoves(moves, species.types, abilities, movePool);\r\n\r\n\t\t\t// Iterate through the moves again, this time to cull them:\r\n\t\t\tfor (const moveid of moves) {\r\n\t\t\t\tconst move = this.dex.moves.get(moveid);\r\n\r\n\t\t\t\tlet {cull, isSetup} = this.shouldCullMove(\r\n\t\t\t\t\tmove, types, moves, abilities, counter, movePool,\r\n\t\t\t\t\tteamDetails, species, isLead\r\n\t\t\t\t);\r\n\r\n\t\t\t\t// This move doesn't satisfy our setup requirements:\r\n\t\t\t\tif (\r\n\t\t\t\t\t(move.category === 'Physical' && counter.setupType === 'Special') ||\r\n\t\t\t\t\t(move.category === 'Special' && counter.setupType === 'Physical')\r\n\t\t\t\t) {\r\n\t\t\t\t\t// Reject STABs last in case the setup type changes later on\r\n\t\t\t\t\tconst stabs = counter.get(species.types[0]) + (counter.get(species.types[1]) || 0);\r\n\t\t\t\t\tif (!types.has(move.type) || stabs > 1 || counter.get(move.category) < 2) cull = true;\r\n\t\t\t\t}\r\n\t\t\t\tif (\r\n\t\t\t\t\t!isSetup &&\r\n\t\t\t\t\tcounter.setupType &&\r\n\t\t\t\t\tcounter.setupType !== 'Mixed' &&\r\n\t\t\t\t\tmove.category !== counter.setupType &&\r\n\t\t\t\t\tcounter.get(counter.setupType) < 2 &&\r\n\t\t\t\t\t(move.category !== 'Status' || !move.flags.heal) &&\r\n\t\t\t\t\tmoveid !== 'sleeptalk' && (\r\n\t\t\t\t\t\tmove.category !== 'Status' || (\r\n\t\t\t\t\t\t\tcounter.get(counter.setupType) + counter.get('Status') > 3 &&\r\n\t\t\t\t\t\t\tcounter.get('physicalsetup') + counter.get('specialsetup') < 2\r\n\t\t\t\t\t\t)\r\n\t\t\t\t\t)\r\n\t\t\t\t) {\r\n\t\t\t\t\t// Mono-attacking with setup and RestTalk is allowed\r\n\t\t\t\t\t// Reject Status moves only if there is nothing else to reject\r\n\t\t\t\t\tcull = true;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (\r\n\t\t\t\t\tcounter.setupType === 'Special' &&\r\n\t\t\t\t\tmoveid === 'hiddenpower' &&\r\n\t\t\t\t\tspecies.types.length > 1 &&\r\n\t\t\t\t\tcounter.get('Special') <= 2 &&\r\n\t\t\t\t\t!types.has(move.type) &&\r\n\t\t\t\t\t!counter.get('Physical') &&\r\n\t\t\t\t\tcounter.get('specialpool')\r\n\t\t\t\t) {\r\n\t\t\t\t\t// Hidden Power isn't good enough\r\n\t\t\t\t\tcull = true;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconst runEnforcementChecker = (checkerName: string) => {\r\n\t\t\t\t\tif (!this.moveEnforcementCheckers[checkerName]) return false;\r\n\t\t\t\t\treturn this.moveEnforcementCheckers[checkerName](\r\n\t\t\t\t\t\tmovePool, moves, abilities, types, counter, species as Species, teamDetails\r\n\t\t\t\t\t);\r\n\t\t\t\t};\r\n\t\t\t\t// Pokemon should have moves that benefit their Type/Ability/Weather, as well as moves required by its forme\r\n\t\t\t\tif (\r\n\t\t\t\t\t!cull &&\r\n\t\t\t\t\t!['judgment', 'lightscreen', 'quiverdance', 'reflect', 'sleeptalk'].includes(moveid) &&\r\n\t\t\t\t\t!isSetup && !move.weather && !move.damage && (move.category !== 'Status' || !move.flags.heal) && (\r\n\t\t\t\t\t\tmove.category === 'Status' ||\r\n\t\t\t\t\t\t!types.has(move.type) ||\r\n\t\t\t\t\t\tmove.basePower && move.basePower < 40 && !move.multihit\r\n\t\t\t\t\t) && (counter.get('physicalsetup') + counter.get('specialsetup') < 2 && (\r\n\t\t\t\t\t\t!counter.setupType ||\r\n\t\t\t\t\t\tcounter.setupType === 'Mixed' ||\r\n\t\t\t\t\t\t(move.category !== counter.setupType && move.category !== 'Status') ||\r\n\t\t\t\t\t\tcounter.get(counter.setupType) + counter.get('Status') > 3\r\n\t\t\t\t\t))\r\n\t\t\t\t) {\r\n\t\t\t\t\tif (\r\n\t\t\t\t\t\t(\r\n\t\t\t\t\t\t\t!counter.get('stab') &&\r\n\t\t\t\t\t\t\t!counter.get('damage') && (\r\n\t\t\t\t\t\t\t\tspecies.types.length > 1 ||\r\n\t\t\t\t\t\t\t\t(species.types[0] !== 'Normal' && species.types[0] !== 'Psychic') ||\r\n\t\t\t\t\t\t\t\t!moves.has('icebeam') ||\r\n\t\t\t\t\t\t\t\tspecies.baseStats.spa >= species.baseStats.spd\r\n\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t) || (\r\n\t\t\t\t\t\t\t!counter.get('recovery') &&\r\n\t\t\t\t\t\t\t!counter.setupType &&\r\n\t\t\t\t\t\t\t['healingwish', 'trick', 'trickroom'].every(m => !moves.has(m)) &&\r\n\t\t\t\t\t\t\t!abilities.has('Poison Heal') &&\r\n\t\t\t\t\t\t\t(counter.get('Status') || (species.nfe && !!counter.get('Status'))) &&\r\n\t\t\t\t\t\t\t(['recover', 'roost', 'slackoff', 'softboiled'].some(m => movePool.includes(m)))\r\n\t\t\t\t\t\t) || (\r\n\t\t\t\t\t\t\t(movePool.includes('moonlight') && types.size < 2 && !moves.has('trickroom')) ||\r\n\t\t\t\t\t\t\tmovePool.includes('darkvoid') ||\r\n\t\t\t\t\t\t\tmovePool.includes('milkdrink') ||\r\n\t\t\t\t\t\t\tmovePool.includes('quiverdance') ||\r\n\t\t\t\t\t\t\t(species.requiredMove && movePool.includes(toID(species.requiredMove)))\r\n\t\t\t\t\t\t) || (\r\n\t\t\t\t\t\t\tisLead && runEnforcementChecker('lead')\r\n\t\t\t\t\t\t)\r\n\t\t\t\t\t) {\r\n\t\t\t\t\t\tcull = true;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tfor (const type of types) {\r\n\t\t\t\t\t\t\tif (runEnforcementChecker(type)) {\r\n\t\t\t\t\t\t\t\tcull = true;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tfor (const abil of abilities) {\r\n\t\t\t\t\t\t\tif (runEnforcementChecker(abil)) {\r\n\t\t\t\t\t\t\t\tcull = true;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Sleep Talk shouldn't be selected without Rest\r\n\t\t\t\tif (moveid === 'rest' && cull) {\r\n\t\t\t\t\tconst sleeptalk = movePool.indexOf('sleeptalk');\r\n\t\t\t\t\tif (sleeptalk >= 0) {\r\n\t\t\t\t\t\tif (movePool.length < 2) {\r\n\t\t\t\t\t\t\tcull = false;\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tthis.fastPop(movePool, sleeptalk);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Remove rejected moves from the move list\r\n\t\t\t\tconst isHP = moveid.startsWith('hiddenpower');\r\n\t\t\t\tif (\r\n\t\t\t\t\tcull &&\r\n\t\t\t\t\t(movePool.length - availableHP || availableHP && (isHP || !hasHiddenPower))\r\n\t\t\t\t) {\r\n\t\t\t\t\tif (\r\n\t\t\t\t\t\tmove.category !== 'Status' && !move.damage && !move.flags.charge &&\r\n\t\t\t\t\t\t(!isHP || !availableHP)\r\n\t\t\t\t\t) rejectedPool.push(moveid);\r\n\t\t\t\t\tmoves.delete(moveid);\r\n\t\t\t\t\tif (isHP) hasHiddenPower = false;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\tif (cull && rejectedPool.length) {\r\n\t\t\t\t\tmoves.delete(moveid);\r\n\t\t\t\t\tif (moveid.startsWith('hiddenpower')) hasHiddenPower = false;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} while (moves.size < this.maxMoveCount && (movePool.length || rejectedPool.length));\r\n\r\n\t\tif (hasHiddenPower) {\r\n\t\t\tlet hpType;\r\n\t\t\tfor (const move of moves) {\r\n\t\t\t\tif (move.startsWith('hiddenpower')) hpType = move.substr(11);\r\n\t\t\t}\r\n\t\t\tif (!hpType) throw new Error(`hasHiddenPower is true, but no Hidden Power move was found.`);\r\n\t\t\tconst HPivs = this.dex.types.get(hpType).HPivs;\r\n\t\t\tlet iv: StatID;\r\n\t\t\tfor (iv in HPivs) {\r\n\t\t\t\tivs[iv] = HPivs[iv];\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tability = this.getAbility(types, moves, abilities, counter, movePool, teamDetails, species);\r\n\r\n\t\tlet item = this.getHighPriorityItem(ability, types, moves, counter, teamDetails, species, isLead);\r\n\t\tif (item === undefined) {\r\n\t\t\titem = this.getLowPriorityItem(ability, types, moves, abilities, counter, teamDetails, species, isLead);\r\n\t\t}\r\n\t\tif (item === undefined) item = 'Leftovers';\r\n\t\tif (item === 'Leftovers' && types.has('Poison')) {\r\n\t\t\titem = 'Black Sludge';\r\n\t\t}\r\n\r\n\t\tconst level = this.adjustLevel || data.level || (species.nfe ? 90 : 80);\r\n\r\n\t\t// Prepare optimal HP\r\n\t\tconst srWeakness = this.dex.getEffectiveness('Rock', species);\r\n\t\twhile (evs.hp > 1) {\r\n\t\t\tconst hp = Math.floor(\r\n\t\t\t\tMath.floor(\r\n\t\t\t\t\t2 * species.baseStats.hp + (ivs.hp || 31) + Math.floor(evs.hp / 4) + 100\r\n\t\t\t\t) * level / 100 + 10\r\n\t\t\t);\r\n\t\t\tif (moves.has('bellydrum') && item === 'Sitrus Berry') {\r\n\t\t\t\t// Belly Drum should activate Sitrus Berry\r\n\t\t\t\tif (hp % 2 === 0) break;\r\n\t\t\t} else {\r\n\t\t\t\t// Maximize number of Stealth Rock switch-ins\r\n\t\t\t\tif (srWeakness <= 0 || hp % (4 / srWeakness) > 0) break;\r\n\t\t\t}\r\n\t\t\tevs.hp -= 4;\r\n\t\t}\r\n\r\n\t\t// Minimize confusion damage\r\n\t\tif (!counter.get('Physical') && !moves.has('transform')) {\r\n\t\t\tevs.atk = 0;\r\n\t\t\tivs.atk = hasHiddenPower ? (ivs.atk || 31) - 28 : 0;\r\n\t\t}\r\n\r\n\t\tif (['gyroball', 'metalburst', 'trickroom'].some(m => moves.has(m))) {\r\n\t\t\tevs.spe = 0;\r\n\t\t\tivs.spe = hasHiddenPower ? (ivs.spe || 31) - 28 : 0;\r\n\t\t}\r\n\r\n\t\treturn {\r\n\t\t\tname: species.baseSpecies,\r\n\t\t\tspecies: forme,\r\n\t\t\tgender: species.gender,\r\n\t\t\tshiny: this.randomChance(1, 1024),\r\n\t\t\tmoves: Array.from(moves),\r\n\t\t\tability,\r\n\t\t\tevs,\r\n\t\t\tivs,\r\n\t\t\titem,\r\n\t\t\tlevel,\r\n\t\t};\r\n\t}\r\n\r\n\trandomTeam() {\r\n\t\tthis.enforceNoDirectCustomBanlistChanges();\r\n\r\n\t\tconst seed = this.prng.seed;\r\n\t\tconst ruleTable = this.dex.formats.getRuleTable(this.format);\r\n\t\tconst pokemon: RandomTeamsTypes.RandomSet[] = [];\r\n\r\n\t\t// For Monotype\r\n\t\tconst isMonotype = !!this.forceMonotype || ruleTable.has('sametypeclause');\r\n\t\tconst typePool = this.dex.types.names();\r\n\t\tconst type = this.forceMonotype || this.sample(typePool);\r\n\r\n\t\tconst baseFormes: {[k: string]: number} = {};\r\n\t\tconst tierCount: {[k: string]: number} = {};\r\n\t\tconst typeCount: {[k: string]: number} = {};\r\n\t\tconst typeComboCount: {[k: string]: number} = {};\r\n\t\tconst typeWeaknesses: {[k: string]: number} = {};\r\n\t\tconst teamDetails: RandomTeamsTypes.TeamDetails = {};\r\n\r\n\t\tconst [pokemonPool, baseSpeciesPool] = this.getPokemonPool(type, pokemon, isMonotype, Object.keys(this.randomData));\r\n\t\twhile (baseSpeciesPool.length && pokemon.length < this.maxTeamSize) {\r\n\t\t\tconst baseSpecies = this.sampleNoReplace(baseSpeciesPool);\r\n\t\t\tconst currentSpeciesPool: Species[] = [];\r\n\t\t\tfor (const poke of pokemonPool) {\r\n\t\t\t\tconst species = this.dex.species.get(poke);\r\n\t\t\t\tif (species.baseSpecies === baseSpecies) currentSpeciesPool.push(species);\r\n\t\t\t}\r\n\t\t\tconst species = this.sample(currentSpeciesPool);\r\n\t\t\tif (!species.exists) continue;\r\n\r\n\t\t\t// Limit to one of each species (Species Clause)\r\n\t\t\tif (baseFormes[species.baseSpecies]) continue;\r\n\r\n\t\t\t// Illusion shouldn't be in the last slot\r\n\t\t\tif (species.name === 'Zoroark' && pokemon.length > 4) continue;\r\n\r\n\t\t\t// Dynamically scale limits for different team sizes. The default and minimum value is 1.\r\n\t\t\tconst limitFactor = Math.round(this.maxTeamSize / 6) || 1;\r\n\t\t\tconst tier = species.tier;\r\n\r\n\t\t\t// Limit two Pokemon per tier\r\n\t\t\tif (this.gen === 5 && !isMonotype && !this.forceMonotype && tierCount[tier] >= 2 * limitFactor) continue;\r\n\r\n\t\t\tconst set = this.randomSet(species, teamDetails, pokemon.length === 0);\r\n\r\n\t\t\tconst types = species.types;\r\n\t\t\tlet typeCombo = types.slice().sort().join();\r\n\r\n\t\t\tif (!isMonotype && !this.forceMonotype) {\r\n\t\t\t\t// Limit two of any type\r\n\t\t\t\tlet skip = false;\r\n\t\t\t\tfor (const typeName of types) {\r\n\t\t\t\t\tif (typeCount[typeName] >= 2 * limitFactor) {\r\n\t\t\t\t\t\tskip = true;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (skip) continue;\r\n\r\n\t\t\t\t// Limit three weak to any type\r\n\t\t\t\tfor (const typeName of this.dex.types.names()) {\r\n\t\t\t\t\t// it's weak to the type\r\n\t\t\t\t\tif (this.dex.getEffectiveness(typeName, species) > 0) {\r\n\t\t\t\t\t\tif (!typeWeaknesses[typeName]) typeWeaknesses[typeName] = 0;\r\n\t\t\t\t\t\tif (typeWeaknesses[typeName] >= 3 * limitFactor) {\r\n\t\t\t\t\t\t\tskip = true;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (skip) continue;\r\n\r\n\t\t\t\t// Limit one of any type combination\r\n\t\t\t\tif (set.ability === 'Drought' || set.ability === 'Drizzle' || set.ability === 'Sand Stream') {\r\n\t\t\t\t\t// Drought, Drizzle and Sand Stream don't count towards the type combo limit\r\n\t\t\t\t\ttypeCombo = set.ability;\r\n\t\t\t\t\tif (typeCombo in typeComboCount) continue;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tif (typeComboCount[typeCombo] >= 1 * limitFactor) continue;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Okay, the set passes, add it to our team\r\n\t\t\tpokemon.push(set);\r\n\r\n\t\t\tif (pokemon.length === this.maxTeamSize) {\r\n\t\t\t\t// Set Zoroark's level to be the same as the last Pokemon\r\n\t\t\t\tconst illusion = teamDetails.illusion;\r\n\t\t\t\tif (illusion) pokemon[illusion - 1].level = pokemon[this.maxTeamSize - 1].level;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t\t// Now that our Pokemon has passed all checks, we can increment our counters\r\n\t\t\tbaseFormes[species.baseSpecies] = 1;\r\n\r\n\t\t\t// Increment tier counter\r\n\t\t\tif (tierCount[tier]) {\r\n\t\t\t\ttierCount[tier]++;\r\n\t\t\t} else {\r\n\t\t\t\ttierCount[tier] = 1;\r\n\t\t\t}\r\n\r\n\t\t\t// Increment type counters\r\n\t\t\tfor (const typeName of types) {\r\n\t\t\t\tif (typeName in typeCount) {\r\n\t\t\t\t\ttypeCount[typeName]++;\r\n\t\t\t\t} else {\r\n\t\t\t\t\ttypeCount[typeName] = 1;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (typeCombo in typeComboCount) {\r\n\t\t\t\ttypeComboCount[typeCombo]++;\r\n\t\t\t} else {\r\n\t\t\t\ttypeComboCount[typeCombo] = 1;\r\n\t\t\t}\r\n\r\n\t\t\t// Increment weakness counter\r\n\t\t\tfor (const typeName of this.dex.types.names()) {\r\n\t\t\t\t// it's weak to the type\r\n\t\t\t\tif (this.dex.getEffectiveness(typeName, species) > 0) {\r\n\t\t\t\t\ttypeWeaknesses[typeName]++;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Team details\r\n\t\t\tif (set.ability === 'Snow Warning' || set.moves.includes('hail')) teamDetails.hail = 1;\r\n\t\t\tif (set.ability === 'Drizzle' || set.moves.includes('raindance')) teamDetails.rain = 1;\r\n\t\t\tif (set.ability === 'Sand Stream') teamDetails.sand = 1;\r\n\t\t\tif (set.moves.includes('stealthrock')) teamDetails.stealthRock = 1;\r\n\t\t\tif (set.moves.includes('toxicspikes')) teamDetails.toxicSpikes = 1;\r\n\t\t\tif (set.moves.includes('rapidspin')) teamDetails.rapidSpin = 1;\r\n\r\n\t\t\t// For setting Zoroark's level\r\n\t\t\tif (set.ability === 'Illusion') teamDetails.illusion = pokemon.length;\r\n\t\t}\r\n\t\tif (pokemon.length < this.maxTeamSize && pokemon.length < 12) {\r\n\t\t\tthrow new Error(`Could not build a random team for ${this.format} (seed=${seed})`);\r\n\t\t}\r\n\r\n\t\treturn pokemon;\r\n\t}\r\n}\r\n\r\nexport default RandomGen5Teams;\r\n"],
  "mappings": "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",
  "names": ["RandomGen6Teams", "species"]
}
