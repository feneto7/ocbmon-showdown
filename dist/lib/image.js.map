{
  "version": 3,
  "sources": ["../../lib/image.ts"],
  "sourcesContent": ["import Axios from 'axios';\r\nimport probe from 'probe-image-size';\r\n\r\ninterface Dimensions {\r\n\twidth: number;\r\n\theight: number;\r\n}\r\n\r\ninterface AspectRatio {\r\n\twidth: number;\r\n\theight: number;\r\n}\r\n\r\ninterface VerificationParameters {\r\n\tvalidTypes: string[];\r\n\tenforceRatio?: { min: AspectRatio, max: AspectRatio };\r\n\tminDimensions?: Dimensions;\r\n\tmaxDimensions?: Dimensions;\r\n\tfileSize?: number;\r\n}\r\n\r\ntype ImageResult = { error: string } | { image: Buffer, width: number, height: number, type: string };\r\n\r\nexport const downloadImageWithVerification = async (\r\n\timageUrl: string,\r\n\t{validTypes, enforceRatio, minDimensions, maxDimensions, fileSize}: VerificationParameters,\r\n): Promise<ImageResult> => {\r\n\ttry {\r\n\t\tconst imageBuffer = (await Axios.get(imageUrl, {responseType: 'arraybuffer'})).data;\r\n\t\tconst probeResult = probe.sync(imageBuffer);\r\n\r\n\t\tif (!probeResult) {\r\n\t\t\treturn {error: 'Invalid image.'};\r\n\t\t}\r\n\r\n\t\tconst {width, height, type} = probeResult;\r\n\r\n\t\tif (fileSize && imageBuffer.length > fileSize) {\r\n\t\t\treturn {error: `Invalid image size. Found image of size ${imageBuffer.length}B, must be less than ${fileSize}B`};\r\n\t\t}\r\n\r\n\t\tif (!validTypes.includes(type)) {\r\n\t\t\treturn {error: `Invalid image type. Found image of type ${type}, must be one of ${validTypes.join(',')}`};\r\n\t\t}\r\n\r\n\t\tif (enforceRatio) {\r\n\t\t\tconst ratio = width / height;\r\n\t\t\tconst minRatio = enforceRatio.min.width / enforceRatio.min.height;\r\n\t\t\tconst maxRatio = enforceRatio.max.width / enforceRatio.max.height;\r\n\t\t\tif (ratio < minRatio || ratio > maxRatio) {\r\n\t\t\t\treturn {error: `Invalid image size. Found image of size ${width}x${height}. Must have an aspect ratio between ${enforceRatio.min.width}:${enforceRatio.min.height} (${minRatio.toFixed(3)}) and ${enforceRatio.max.width}:${enforceRatio.max.height} (${maxRatio.toFixed(3)})`};\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (minDimensions) {\r\n\t\t\tif (width < minDimensions.width || height < minDimensions.height) {\r\n\t\t\t\treturn {error: `Invalid image size. Found image of size ${width}x${height}. Must be greater than or equal to ${minDimensions.width}x${maxDimensions?.height}`};\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (maxDimensions) {\r\n\t\t\tif (width > maxDimensions.width || height > maxDimensions.height) {\r\n\t\t\t\treturn {error: `Invalid image size. Found image of size ${width}x${height}. Must be less than or equal to ${maxDimensions.width}x${maxDimensions.height}`};\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn {image: imageBuffer, width, height, type};\r\n\t} catch {\r\n\t\treturn {error: 'Unknown error downloading image. '};\r\n\t}\r\n};\r\n\r\nexport default {downloadImageWithVerification};\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAkB;AAClB,8BAAkB;AAsBX,MAAM,gCAAgC,OAC5C,UACA,EAAC,YAAY,cAAc,eAAe,eAAe,SAAQ,MACvC;AAC1B,MAAI;AACH,UAAM,eAAe,MAAM,aAAAA,QAAM,IAAI,UAAU,EAAC,cAAc,cAAa,CAAC,GAAG;AAC/E,UAAM,cAAc,wBAAAC,QAAM,KAAK,WAAW;AAE1C,QAAI,CAAC,aAAa;AACjB,aAAO,EAAC,OAAO,iBAAgB;AAAA,IAChC;AAEA,UAAM,EAAC,OAAO,QAAQ,KAAI,IAAI;AAE9B,QAAI,YAAY,YAAY,SAAS,UAAU;AAC9C,aAAO,EAAC,OAAO,2CAA2C,YAAY,8BAA8B,YAAW;AAAA,IAChH;AAEA,QAAI,CAAC,WAAW,SAAS,IAAI,GAAG;AAC/B,aAAO,EAAC,OAAO,2CAA2C,wBAAwB,WAAW,KAAK,GAAG,IAAG;AAAA,IACzG;AAEA,QAAI,cAAc;AACjB,YAAM,QAAQ,QAAQ;AACtB,YAAM,WAAW,aAAa,IAAI,QAAQ,aAAa,IAAI;AAC3D,YAAM,WAAW,aAAa,IAAI,QAAQ,aAAa,IAAI;AAC3D,UAAI,QAAQ,YAAY,QAAQ,UAAU;AACzC,eAAO,EAAC,OAAO,2CAA2C,SAAS,6CAA6C,aAAa,IAAI,SAAS,aAAa,IAAI,WAAW,SAAS,QAAQ,CAAC,UAAU,aAAa,IAAI,SAAS,aAAa,IAAI,WAAW,SAAS,QAAQ,CAAC,KAAI;AAAA,MAC/Q;AAAA,IACD;AAEA,QAAI,eAAe;AAClB,UAAI,QAAQ,cAAc,SAAS,SAAS,cAAc,QAAQ;AACjE,eAAO,EAAC,OAAO,2CAA2C,SAAS,4CAA4C,cAAc,SAAS,eAAe,SAAQ;AAAA,MAC9J;AAAA,IACD;AAEA,QAAI,eAAe;AAClB,UAAI,QAAQ,cAAc,SAAS,SAAS,cAAc,QAAQ;AACjE,eAAO,EAAC,OAAO,2CAA2C,SAAS,yCAAyC,cAAc,SAAS,cAAc,SAAQ;AAAA,MAC1J;AAAA,IACD;AAEA,WAAO,EAAC,OAAO,aAAa,OAAO,QAAQ,KAAI;AAAA,EAChD,QAAE;AACD,WAAO,EAAC,OAAO,oCAAmC;AAAA,EACnD;AACD;AAEA,IAAO,gBAAQ,EAAC,8BAA6B;",
  "names": ["Axios", "probe"]
}
