{
  "version": 3,
  "sources": ["../../server/badges.ts"],
  "sourcesContent": ["/**\r\n * Badges chat-plugin database handler.\r\n * @author MrSableye\r\n */\r\n// @ts-ignore in case it isn't installed\r\nimport type * as Database from 'better-sqlite3';\r\nimport {FS, ProcessManager, Repl} from '../lib';\r\nimport {Config} from './config-loader';\r\nimport * as path from 'path';\r\n\r\n/** Max badges per user */\r\nexport const MAX_OWNED_BADGES = 1000;\r\nexport const MAX_USER_BADGES = 100;\r\nexport const DEFAULT_FILE = FS('databases/badges.db').path;\r\nconst PM_TIMEOUT = 30 * 60 * 1000;\r\n\r\nexport interface DatabaseRequest {\r\n\tstatement: string;\r\n\ttype: 'all' | 'get' | 'run' | 'transaction';\r\n\tdata: AnyObject | any[];\r\n}\r\n\r\nexport interface DatabaseResult {\r\n\t/** Specify this to return an error message to the user */\r\n\terror?: string;\r\n\tresult?: any;\r\n}\r\n\r\nexport interface Badge {\r\n\tbadge_id: string;\r\n\tbadge_name: string;\r\n\towner_id: string;\r\n\tfile_name: string;\r\n\tcreate_date: number;\r\n\tbadge_name_template?: string;\r\n}\r\n\r\nexport type UpdateableBadgeAttribute = Exclude<keyof Badge, 'badge_id' | 'create_date'>;\r\n\r\nexport interface UserBadge extends Badge {\r\n\tuser_id: string;\r\n\tpriority: number;\r\n\tis_hidden: number;\r\n\tbadge_data?: string;\r\n}\r\n\r\nexport interface UserManagedBadge extends Badge {\r\n\tuser_id: string;\r\n}\r\n\r\n/** Like Chat.ErrorMessage, but made for the subprocess so we can throw errors to the user not using errorMessage\r\n * because errorMessage crashes when imported (plus we have to spawn dex, etc, all unnecessary - this is easier)\r\n */\r\nexport class FailureMessage extends Error {\r\n\tconstructor(message: string) {\r\n\t\tsuper(message);\r\n\t\tthis.name = 'FailureMessage';\r\n\t\tError.captureStackTrace(this, FailureMessage);\r\n\t}\r\n}\r\n\r\nexport class BadgesDatabase {\r\n\tfile: string;\r\n\tconstructor(file: string = DEFAULT_FILE) {\r\n\t\tthis.file = file === ':memory:' ? file : path.resolve(file);\r\n\t}\r\n\tstatic setupDatabase(fileName?: string) {\r\n\t\tconst file = fileName || process.env.filename || DEFAULT_FILE;\r\n\t\tconst exists = FS(file).existsSync() || file === ':memory:';\r\n\t\tconst database: Database.Database = new (require('better-sqlite3'))(file);\r\n\t\tif (!exists) {\r\n\t\t\tdatabase.exec(FS('databases/schemas/badges.sql').readSync());\r\n\t\t} else {\r\n\t\t\tlet val;\r\n\t\t\ttry {\r\n\t\t\t\tval = database.prepare(`SELECT val FROM database_settings WHERE name = 'version'`).get().val;\r\n\t\t\t} catch (e) {}\r\n\t\t\tconst actualVersion = FS(`databases/migrations/badges`).readdirIfExistsSync().length;\r\n\t\t\tif (val === undefined) {\r\n\t\t\t\t// hasn't been set up before, write new version.\r\n\t\t\t\tdatabase.exec(FS('databases/schemas/badges.sql').readSync());\r\n\t\t\t}\r\n\t\t\tif (typeof val === 'number' && val !== actualVersion) {\r\n\t\t\t\tthrow new Error(`Badges DB is out of date, please migrate to latest version.`);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tfor (const k in FUNCTIONS) {\r\n\t\t\tdatabase.function(k, FUNCTIONS[k]);\r\n\t\t}\r\n\r\n\t\tfor (const k in ACTIONS) {\r\n\t\t\ttry {\r\n\t\t\t\tstatements[k] = database.prepare(ACTIONS[k as keyof typeof ACTIONS]);\r\n\t\t\t} catch (e) {\r\n\t\t\t\tthrow new Error(`Badges DB statement crashed: ${ACTIONS[k as keyof typeof ACTIONS]} (${e.message})`);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tfor (const k in TRANSACTIONS) {\r\n\t\t\ttransactions[k] = database.transaction(TRANSACTIONS[k]);\r\n\t\t}\r\n\r\n\t\treturn database;\r\n\t}\r\n\tall(statement: string, data: any[] | AnyObject) {\r\n\t\treturn this.query({type: 'all', data, statement});\r\n\t}\r\n\ttransaction(statement: string, data: any[] | AnyObject) {\r\n\t\treturn this.query({data, statement, type: 'transaction'});\r\n\t}\r\n\trun(statement: string, data: any[] | AnyObject) {\r\n\t\treturn this.query({statement, data, type: 'run'});\r\n\t}\r\n\tget(statement: string, data: any[] | AnyObject) {\r\n\t\treturn this.query({statement, data, type: 'get'});\r\n\t}\r\n\tprivate async query(input: DatabaseRequest) {\r\n\t\tconst process = PM.acquire();\r\n\t\tif (!process) throw new Error(`Missing badges process`);\r\n\t\tconst result = await process.query(input);\r\n\t\tif (result.error) {\r\n\t\t\tthrow new Chat.ErrorMessage(result.error);\r\n\t\t}\r\n\t\treturn result.result;\r\n\t}\r\n\tgetBadge(badgeID: string): Promise<Badge | undefined> {\r\n\t\treturn this.get('getBadge', [badgeID]);\r\n\t}\r\n\tgetBadges(): Promise<Badge[]> {\r\n\t\treturn this.all('getBadges', []);\r\n\t}\r\n\tgetOwnedBadges(ownerID: string): Promise<Badge[]> {\r\n\t\treturn this.all('getOwnedBadges', [ownerID, MAX_OWNED_BADGES]);\r\n\t}\r\n\tgetUserBadges(userID: string): Promise<UserBadge[]> {\r\n\t\treturn this.all('getUserBadges', [userID, MAX_USER_BADGES]);\r\n\t}\r\n\tgetVisibleUserBadges(userID: string): Promise<UserBadge[]> {\r\n\t\treturn this.all('getVisibleUserBadges', [userID, MAX_USER_BADGES]);\r\n\t}\r\n\tasync getBadgeOwners(badgeID: string, requesterID: string, overridePermissions: boolean): Promise<UserBadge[]> {\r\n\t\treturn (await this.transaction('getBadgeOwners', [badgeID, requesterID, overridePermissions])).result;\r\n\t}\r\n\tcreateBadge(badgeID: string, badgeName: string, ownerID: string, filePath: string, badgeNameTemplate?: string) {\r\n\t\treturn this.transaction('createBadge', [badgeID, badgeName, ownerID, filePath, badgeNameTemplate]);\r\n\t}\r\n\tdeleteBadge(badgeID: string, requesterID: string, overridePermissions: boolean) {\r\n\t\treturn this.transaction('deleteBadge', [badgeID, requesterID, overridePermissions]);\r\n\t}\r\n\tupdateBadgeAttribute(\r\n\t\tbadgeID: string,\r\n\t\tattributeName: UpdateableBadgeAttribute,\r\n\t\tattributeValue: any,\r\n\t\trequesterID: string,\r\n\t\toverridePermissions: boolean,\r\n\t) {\r\n\t\treturn this.transaction('updateBadgeAttribute', [badgeID, attributeName, attributeValue, requesterID, overridePermissions]);\r\n\t}\r\n\taddBadgeToUser(userID: string, badgeID: string, requesterID: string, overridePermissions: boolean) {\r\n\t\treturn this.transaction('addBadgeToUser', [userID, badgeID, requesterID, overridePermissions]);\r\n\t}\r\n\tremoveBadgeFromUser(userID: string, badgeID: string, requesterID: string, overridePermissions: boolean) {\r\n\t\treturn this.transaction('removeBadgeFromUser', [userID, badgeID, requesterID, overridePermissions]);\r\n\t}\r\n\tdeleteUserBadges(badgeID: string) {\r\n\t\treturn this.run('deleteUserBadges', [badgeID]);\r\n\t}\r\n\ttoggleBadgeVisibility(userID: string, badgeID: string, isVisible: boolean) {\r\n\t\treturn this.transaction('toggleBadgeVisibility', [userID, badgeID, isVisible]);\r\n\t}\r\n\tupdateBadgePriority(userID: string, badgeID: string, priority: number) {\r\n\t\treturn this.transaction('updateBadgePriority', [userID, badgeID, priority]);\r\n\t}\r\n\tupdateBadgeData(userID: string, badgeID: string, badgeData: any, requesterID: string, overridePermissions: boolean) {\r\n\t\treturn this.transaction('updateBadgeData', [userID, badgeID, JSON.stringify(badgeData), requesterID, overridePermissions]);\r\n\t}\r\n\tgetUserManagedBadges(userID: string): Promise<UserManagedBadge[]> {\r\n\t\treturn this.all('getUserManagedBadges', [userID]);\r\n\t}\r\n\tgetBadgeManagers(badgeID: string): Promise<UserManagedBadge[]> {\r\n\t\treturn this.all('getBadgeManagers', [badgeID]);\r\n\t}\r\n\taddManagedBadgeToUser(userID: string, badgeID: string, requesterID: string, overridePermissions: boolean) {\r\n\t\treturn this.transaction('addManagedBadgeToUser', [userID, badgeID, requesterID, overridePermissions]);\r\n\t}\r\n\tremoveManagedBadgeFromUser(userID: string, badgeID: string, requesterID: string, overridePermissions: boolean) {\r\n\t\treturn this.transaction('removeManagedBadgeFromUser', [userID, badgeID, requesterID, overridePermissions]);\r\n\t}\r\n\tdeleteUserManagedBadges(badgeID: string) {\r\n\t\treturn this.run('deleteUserManagedBadges', [badgeID]);\r\n\t}\r\n}\r\n\r\nconst statements: {[k: string]: Database.Statement} = {};\r\nconst transactions: {[k: string]: Database.Transaction} = {};\r\n\r\nconst ACTIONS = {\r\n\tgetBadge: `SELECT * FROM badges WHERE badge_id = ?`,\r\n\tgetBadges: `SELECT * FROM badges`,\r\n\tgetOwnedBadges: `SELECT * FROM badges WHERE owner_id = ? LIMIT ?`,\r\n\tcreateBadge: `INSERT INTO badges (badge_id, badge_name, owner_id, file_name, create_date, badge_name_template) VALUES (?, ?, ?, ?, ?, ?)`,\r\n\tdeleteBadge: `DELETE FROM badges WHERE badge_id = ?`,\r\n\tupdateBadgeName: `UPDATE badges SET badge_name = ? WHERE badge_id = ?`,\r\n\tupdateBadgeOwner: `UPDATE badges SET owner_id = ? WHERE badge_id = ?`,\r\n\tupdateBadgeFileName: `UPDATE badges SET file_name = ? WHERE badge_id = ?`,\r\n\tupdateBadgeNameTemplate: `UPDATE badges SET badge_name_template = ? WHERE badge_id = ?`,\r\n\tfindBadge: `SELECT * FROM badges WHERE badge_id = ?`,\r\n\tcountOwnedBadges: `SELECT count(*) as num FROM badges WHERE owner_id = ?`,\r\n\tgetUserBadges: (\r\n\t\t`SELECT user_badges.user AS user_id, badges.badge_id, badges.badge_name, badges.badge_name_template, badges.file_name, user_badges.priority, user_badges.is_hidden, user_badges.badge_data, badges.create_date ` +\r\n\t\t`FROM badges INNER JOIN user_badges ON badges.badge_id = user_badges.badge WHERE user_badges.user = ? LIMIT ?`\r\n\t),\r\n\tgetVisibleUserBadges: (\r\n\t\t`SELECT user_badges.user AS user_id, badges.badge_id, badges.badge_name, badges.badge_name_template, badges.file_name, user_badges.priority, user_badges.is_hidden, user_badges.badge_data, badges.create_date ` +\r\n\t\t`FROM badges INNER JOIN user_badges ON badges.badge_id = user_badges.badge WHERE (user_badges.user = ? AND user_badges.is_hidden = 0) LIMIT ?`\r\n\t),\r\n\tgetBadgeOwners: (\r\n\t\t`SELECT user_badges.user AS user_id, badges.badge_id, badges.badge_name, badges.badge_name_template, badges.file_name, user_badges.priority, user_badges.is_hidden, user_badges.badge_data, badges.create_date ` +\r\n\t\t`FROM badges INNER JOIN user_badges ON badges.badge_id = user_badges.badge WHERE (user_badges.badge = ?)`\r\n\t),\r\n\tcountUserBadges: `SELECT count(*) as num FROM user_badges WHERE user = ?`,\r\n\taddBadgeToUser: `INSERT INTO user_badges(user, badge, priority, is_hidden, create_date) VALUES (?, ?, ?, 0, ?)`,\r\n\tremoveBadgeFromUser: `DELETE FROM user_badges WHERE (user = ? AND badge = ?)`,\r\n\tdeleteUserBadges: `DELETE FROM user_badges WHERE (badge = ?)`,\r\n\ttoggleBadgeVisibility: `UPDATE user_badges SET is_hidden = ? WHERE (user = ? AND badge = ?)`,\r\n\tupdateBadgePriority: `UPDATE user_badges SET priority = ? WHERE (user = ? AND badge = ?)`,\r\n\tupdateBadgeData: `UPDATE user_badges SET badge_data = ? WHERE (user = ? AND badge = ?)`,\r\n\tfindUserBadge: `SELECT * FROM user_badges WHERE (user = ? AND badge = ?)`,\r\n\tfindMaxPriority: `SELECT MAX(priority) as num FROM user_badges WHERE (user = ?)`,\r\n\tgetUserManagedBadges: (\r\n\t\t`SELECT user_managed_badges.user AS user_id, badges.badge_id, badges.badge_name, badges.file_name, badges.create_date, badges.badge_name_template ` +\r\n\t\t`FROM badges INNER JOIN user_managed_badges ON badges.badge_id = user_managed_badges.badge WHERE user_managed_badges.user = ?`\r\n\t),\r\n\tgetBadgeManagers: (\r\n\t\t`SELECT user_managed_badges.user AS user_id, badges.badge_id, badges.badge_name, badges.file_name, badges.create_date, badges.badge_name_template ` +\r\n\t\t`FROM badges INNER JOIN user_managed_badges ON badges.badge_id = user_managed_badges.badge WHERE (user_managed_badges.badge = ?)`\r\n\t),\r\n\taddManagedBadgeToUser: `INSERT INTO user_managed_badges(user, badge) VALUES (?, ?)`,\r\n\tremoveManagedBadgeFromUser: `DELETE FROM user_managed_badges WHERE (user = ? AND badge = ?)`,\r\n\tdeleteUserManagedBadges: `DELETE FROM user_managed_badges WHERE (badge = ?)`,\r\n\tfindUserManagedBadge: `SELECT * FROM user_managed_badges WHERE (user = ? AND badge = ?)`,\r\n};\r\n\r\nconst FUNCTIONS: {[k: string]: (...input: any[]) => any} = {};\r\n\r\nconst TRANSACTIONS: {[k: string]: (input: any[]) => DatabaseResult} = {\r\n\tcreateBadge: requests => {\r\n\t\tfor (const request of requests) {\r\n\t\t\tconst [badgeID, badgeName, ownerID, filePath, badgeNameTemplate] = request;\r\n\r\n\t\t\tconst existingBadge = statements.findBadge.all(badgeID);\r\n\t\t\tif (existingBadge.length) {\r\n\t\t\t\tthrow new FailureMessage(`A badge with id '${badgeID}' already exists.`);\r\n\t\t\t}\r\n\r\n\t\t\tconst ownedBadges = statements.countOwnedBadges.get([ownerID])['num'];\r\n\t\t\tif (ownedBadges >= MAX_OWNED_BADGES) {\r\n\t\t\t\tthrow new FailureMessage(`You own the maximum number of badges.`);\r\n\t\t\t}\r\n\r\n\t\t\tstatements.createBadge.run(badgeID, badgeName, ownerID, filePath, Date.now(), badgeNameTemplate);\r\n\t\t}\r\n\t\treturn {result: []};\r\n\t},\r\n\tdeleteBadge: requests => {\r\n\t\tfor (const request of requests) {\r\n\t\t\tconst [badgeID, requesterID, overridePermissions] = request;\r\n\r\n\t\t\tconst existingBadge = statements.findBadge.all(badgeID);\r\n\t\t\tif (!existingBadge.length) {\r\n\t\t\t\tthrow new FailureMessage(`No badge with id '${badgeID}' exists.`);\r\n\t\t\t}\r\n\r\n\t\t\tif (!overridePermissions && (existingBadge[0].owner_id !== requesterID)) {\r\n\t\t\t\tthrow new FailureMessage(`You do not own '${badgeID}'.`);\r\n\t\t\t}\r\n\r\n\t\t\tstatements.deleteBadge.run(badgeID);\r\n\t\t}\r\n\t\treturn {result: []};\r\n\t},\r\n\tupdateBadgeAttribute: requests => {\r\n\t\tfor (const request of requests) {\r\n\t\t\tconst [badgeID, attributeName, attributeValue, requesterID, overridePermissions] = request;\r\n\r\n\t\t\tconst existingBadge = statements.findBadge.all(badgeID);\r\n\t\t\tif (!existingBadge.length) {\r\n\t\t\t\tthrow new FailureMessage(`No badge with id '${badgeID}' exists.`);\r\n\t\t\t}\r\n\r\n\t\t\tif (!overridePermissions && (existingBadge[0].owner_id !== requesterID)) {\r\n\t\t\t\tthrow new FailureMessage(`You do not own '${badgeID}'.`);\r\n\t\t\t}\r\n\r\n\t\t\tif (attributeName === 'badge_name') {\r\n\t\t\t\tstatements.updateBadgeName.run(attributeValue, badgeID);\r\n\t\t\t} else if (attributeName === 'owner_id') {\r\n\t\t\t\tstatements.updateBadgeOwner.run(attributeValue, badgeID);\r\n\t\t\t} else if (attributeName === 'file_name') {\r\n\t\t\t\tstatements.updateBadgeFileName.run(attributeValue, badgeID);\r\n\t\t\t} else if (attributeName === 'badge_name_template') {\r\n\t\t\t\tstatements.updateBadgeNameTemplate.run(attributeValue, badgeID);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn {result: []};\r\n\t},\r\n\tgetBadgeOwners: requests => {\r\n\t\tconst result = [];\r\n\t\tfor (const request of requests) {\r\n\t\t\tconst [badgeID, requesterID, overridePermissions] = request;\r\n\r\n\t\t\tconst existingBadge = statements.findBadge.all(badgeID);\r\n\t\t\tif (!existingBadge.length) {\r\n\t\t\t\tthrow new FailureMessage(`No badge with id '${badgeID}' exists.`);\r\n\t\t\t}\r\n\r\n\t\t\tif (!overridePermissions && (existingBadge[0].owner_id !== requesterID)) {\r\n\t\t\t\tthrow new FailureMessage(`You do not own '${badgeID}'.`);\r\n\t\t\t}\r\n\r\n\t\t\tconst badgeOwners = statements.getBadgeOwners.all(badgeID);\r\n\t\t\tresult.push(...badgeOwners);\r\n\t\t}\r\n\t\treturn {result};\r\n\t},\r\n\taddBadgeToUser: requests => {\r\n\t\tfor (const request of requests) {\r\n\t\t\tconst [userID, badgeID, requesterID, overridePermissions] = request;\r\n\r\n\t\t\tconst existingBadge = statements.findBadge.all(badgeID);\r\n\t\t\tif (!existingBadge.length) {\r\n\t\t\t\tthrow new FailureMessage(`No badge with id '${badgeID}' exists.`);\r\n\t\t\t}\r\n\r\n\t\t\tconst badgeManagers = statements.getBadgeManagers.all(badgeID);\r\n\t\t\tconst isManager = badgeManagers.some((badgeManager) => badgeManager.user_id === requesterID);\r\n\r\n\t\t\tif (!overridePermissions && (existingBadge[0].owner_id !== requesterID) && !isManager) {\r\n\t\t\t\tthrow new FailureMessage(`You do not own or manage '${badgeID}'.`);\r\n\t\t\t}\r\n\r\n\t\t\tconst userOwnedBadges = statements.countUserBadges.get(userID)['num'];\r\n\t\t\tif (userOwnedBadges >= MAX_USER_BADGES) {\r\n\t\t\t\tthrow new FailureMessage(`User '${userID}' has the maximum number of badges.`);\r\n\t\t\t}\r\n\r\n\t\t\tconst existingOwnedBadge = statements.findUserBadge.all(userID, badgeID);\r\n\t\t\tif (existingOwnedBadge.length) {\r\n\t\t\t\tthrow new FailureMessage(`User '${userID}' already has badge '${badgeID}'.`);\r\n\t\t\t}\r\n\r\n\t\t\tconst maxBadgePriority = statements.findMaxPriority.get(userID)['num'] || 0;\r\n\r\n\t\t\tstatements.addBadgeToUser.run(userID, badgeID, maxBadgePriority + 1, Date.now());\r\n\t\t}\r\n\t\treturn {result: []};\r\n\t},\r\n\tremoveBadgeFromUser: requests => {\r\n\t\tfor (const request of requests) {\r\n\t\t\tconst [userID, badgeID, requesterID, overridePermissions] = request;\r\n\r\n\t\t\tconst existingBadge = statements.findBadge.all(badgeID);\r\n\t\t\tif (!existingBadge.length) {\r\n\t\t\t\tthrow new FailureMessage(`No badge with id '${badgeID}' exists.`);\r\n\t\t\t}\r\n\r\n\t\t\tconst badgeManagers = statements.getBadgeManagers.all(badgeID);\r\n\t\t\tconst isManager = badgeManagers.some((badgeManager) => badgeManager.user_id === requesterID);\r\n\r\n\t\t\tif (!overridePermissions && (existingBadge[0].owner_id !== requesterID) && !isManager) {\r\n\t\t\t\tthrow new FailureMessage(`You do not own or manage '${badgeID}'.`);\r\n\t\t\t}\r\n\r\n\t\t\tconst existingOwnedBadge = statements.findUserBadge.all(userID, badgeID);\r\n\t\t\tif (!existingOwnedBadge.length) {\r\n\t\t\t\tthrow new FailureMessage(`User '${userID}' does not have badge '${badgeID}'.`);\r\n\t\t\t}\r\n\r\n\t\t\tstatements.removeBadgeFromUser.run(userID, badgeID);\r\n\t\t}\r\n\t\treturn {result: []};\r\n\t},\r\n\ttoggleBadgeVisibility: requests => {\r\n\t\tfor (const request of requests) {\r\n\t\t\tconst [userID, badgeID, isVisible] = request;\r\n\r\n\t\t\tconst existingOwnedBadge = statements.findUserBadge.all(userID, badgeID);\r\n\t\t\tif (!existingOwnedBadge.length) {\r\n\t\t\t\tthrow new FailureMessage(`User '${userID}' does not have badge '${badgeID}'.`);\r\n\t\t\t}\r\n\r\n\t\t\tstatements.toggleBadgeVisibility.run(isVisible ? 0 : 1, userID, badgeID);\r\n\t\t}\r\n\t\treturn {result: []};\r\n\t},\r\n\tupdateBadgePriority: requests => {\r\n\t\tfor (const request of requests) {\r\n\t\t\tconst [userID, badgeID, priority] = request;\r\n\r\n\t\t\tconst existingOwnedBadge = statements.findUserBadge.all(userID, badgeID);\r\n\t\t\tif (!existingOwnedBadge.length) {\r\n\t\t\t\tthrow new FailureMessage(`User '${userID}' does not have badge '${badgeID}'.`);\r\n\t\t\t}\r\n\r\n\t\t\tstatements.updateBadgePriority.run(priority, userID, badgeID);\r\n\t\t}\r\n\t\treturn {result: []};\r\n\t},\r\n\tupdateBadgeData: requests => {\r\n\t\tfor (const request of requests) {\r\n\t\t\tconst [userID, badgeID, badgeData, requesterID, overridePermissions] = request;\r\n\r\n\t\t\tconst existingOwnedBadge = statements.findUserBadge.all(userID, badgeID);\r\n\t\t\tif (!existingOwnedBadge.length) {\r\n\t\t\t\tthrow new FailureMessage(`User '${userID}' does not have badge '${badgeID}'.`);\r\n\t\t\t}\r\n\r\n\t\t\tconst badgeManagers = statements.getBadgeManagers.all(badgeID);\r\n\t\t\tconst isManager = badgeManagers.some((badgeManager) => badgeManager.user_id === requesterID);\r\n\r\n\t\t\tif (!overridePermissions && (existingOwnedBadge[0].owner_id !== requesterID) && !isManager) {\r\n\t\t\t\tthrow new FailureMessage(`You do not own or manage '${badgeID}'.`);\r\n\t\t\t}\r\n\r\n\t\t\tstatements.updateBadgeData.run(badgeData, userID, badgeID);\r\n\t\t}\r\n\t\treturn {result: []};\r\n\t},\r\n\taddManagedBadgeToUser: requests => {\r\n\t\tfor (const request of requests) {\r\n\t\t\tconst [userID, badgeID, requesterID, overridePermissions] = request;\r\n\r\n\t\t\tconst existingBadge = statements.findBadge.all(badgeID);\r\n\t\t\tif (!existingBadge.length) {\r\n\t\t\t\tthrow new FailureMessage(`No badge with id '${badgeID}' exists.`);\r\n\t\t\t}\r\n\r\n\t\t\tif (!overridePermissions && (existingBadge[0].owner_id !== requesterID)) {\r\n\t\t\t\tthrow new FailureMessage(`You do not own '${badgeID}'.`);\r\n\t\t\t}\r\n\r\n\t\t\tconst existingManagedBadge = statements.findUserManagedBadge.all(userID, badgeID);\r\n\t\t\tif (existingManagedBadge.length) {\r\n\t\t\t\tthrow new FailureMessage(`User '${userID}' already manages '${badgeID}'.`);\r\n\t\t\t}\r\n\r\n\t\t\tstatements.addManagedBadgeToUser.run(userID, badgeID);\r\n\t\t}\r\n\t\treturn {result: []};\r\n\t},\r\n\tremoveManagedBadgeFromUser: requests => {\r\n\t\tfor (const request of requests) {\r\n\t\t\tconst [userID, badgeID, requesterID, overridePermissions] = request;\r\n\r\n\t\t\tconst existingBadge = statements.findBadge.all(badgeID);\r\n\t\t\tif (!existingBadge.length) {\r\n\t\t\t\tthrow new FailureMessage(`No badge with id '${badgeID}' exists.`);\r\n\t\t\t}\r\n\r\n\t\t\tif (!overridePermissions && (existingBadge[0].owner_id !== requesterID)) {\r\n\t\t\t\tthrow new FailureMessage(`You do not own '${badgeID}'.`);\r\n\t\t\t}\r\n\r\n\t\t\tconst existingManagedBadge = statements.findUserManagedBadge.all(userID, badgeID);\r\n\t\t\tif (!existingManagedBadge.length) {\r\n\t\t\t\tthrow new FailureMessage(`User '${userID}' does not manage '${badgeID}'.`);\r\n\t\t\t}\r\n\r\n\t\t\tstatements.removeManagedBadgeFromUser.run(userID, badgeID);\r\n\t\t}\r\n\t\treturn {result: []};\r\n\t},\r\n};\r\n\r\nexport const PM = new ProcessManager.QueryProcessManager<DatabaseRequest, DatabaseResult>(module, query => {\r\n\tconst {type, statement, data} = query;\r\n\tconst start = Date.now();\r\n\tconst result: DatabaseResult = {};\r\n\ttry {\r\n\t\tswitch (type) {\r\n\t\tcase 'run':\r\n\t\t\tresult.result = statements[statement].run(data);\r\n\t\t\tbreak;\r\n\t\tcase 'get':\r\n\t\t\tresult.result = statements[statement].get(data);\r\n\t\t\tbreak;\r\n\t\tcase 'transaction':\r\n\t\t\tresult.result = transactions[statement]([data]);\r\n\t\t\tbreak;\r\n\t\tcase 'all':\r\n\t\t\tresult.result = statements[statement].all(data);\r\n\t\t\tbreak;\r\n\t\t}\r\n\t} catch (e) {\r\n\t\tif (!e.name.endsWith('FailureMessage')) {\r\n\t\t\tresult.error = \"Sorry! The database process crashed. We've been notified and will fix this.\";\r\n\t\t\tMonitor.crashlog(e, \"A badges database process\", query);\r\n\t\t} else {\r\n\t\t\tresult.error = e.message;\r\n\t\t}\r\n\t\treturn result;\r\n\t}\r\n\tconst delta = Date.now() - start;\r\n\tif (delta > 1000) {\r\n\t\tMonitor.slow(`[Slow badges query] ${JSON.stringify(query)}`);\r\n\t}\r\n\treturn result;\r\n}, PM_TIMEOUT, message => {\r\n\tif (message.startsWith('SLOW\\n')) {\r\n\t\tMonitor.slow(message.slice(5));\r\n\t}\r\n});\r\n\r\nif (require.main === module) {\r\n\tglobal.Config = (require as any)('./config-loader').Config;\r\n\tif (Config.usesqlite) {\r\n\t\tBadgesDatabase.setupDatabase();\r\n\t}\r\n\tglobal.Monitor = {\r\n\t\tcrashlog(error: Error, source = 'A badges database process', details: AnyObject | null = null) {\r\n\t\t\tconst repr = JSON.stringify([error.name, error.message, source, details]);\r\n\t\t\tprocess.send!(`THROW\\n@!!@${repr}\\n${error.stack}`);\r\n\t\t},\r\n\t\tslow(message: string) {\r\n\t\t\tprocess.send!(`CALLBACK\\nSLOW\\n${message}`);\r\n\t\t},\r\n\t};\r\n\tprocess.on('uncaughtException', err => {\r\n\t\tif (Config.crashguard) {\r\n\t\t\tMonitor.crashlog(err, 'A badges child process');\r\n\t\t}\r\n\t});\r\n\t// eslint-disable-next-line no-eval\r\n\tRepl.start(`badges-${process.pid}`, cmd => eval(cmd));\r\n} else {\r\n\tPM.spawn(Config.badgesprocesses || 1);\r\n}\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA,iBAAuC;AACvC,2BAAqB;AACrB,WAAsB;AAGf,MAAM,mBAAmB;AACzB,MAAM,kBAAkB;AACxB,MAAM,mBAAe,eAAG,qBAAqB,EAAE;AACtD,MAAM,aAAa,KAAK,KAAK;AAuCtB,MAAM,uBAAuB,MAAM;AAAA,EACzC,YAAY,SAAiB;AAC5B,UAAM,OAAO;AACb,SAAK,OAAO;AACZ,UAAM,kBAAkB,MAAM,cAAc;AAAA,EAC7C;AACD;AAEO,MAAM,eAAe;AAAA,EAE3B,YAAY,OAAe,cAAc;AACxC,SAAK,OAAO,SAAS,aAAa,OAAO,KAAK,QAAQ,IAAI;AAAA,EAC3D;AAAA,EACA,OAAO,cAAc,UAAmB;AACvC,UAAM,OAAO,YAAY,QAAQ,IAAI,YAAY;AACjD,UAAM,aAAS,eAAG,IAAI,EAAE,WAAW,KAAK,SAAS;AACjD,UAAM,WAA8B,IAAK,SAAQ,gBAAgB,GAAG,IAAI;AACxE,QAAI,CAAC,QAAQ;AACZ,eAAS,SAAK,eAAG,8BAA8B,EAAE,SAAS,CAAC;AAAA,IAC5D,OAAO;AACN,UAAI;AACJ,UAAI;AACH,cAAM,SAAS,QAAQ,0DAA0D,EAAE,IAAI,EAAE;AAAA,MAC1F,SAAS,GAAP;AAAA,MAAW;AACb,YAAM,oBAAgB,eAAG,6BAA6B,EAAE,oBAAoB,EAAE;AAC9E,UAAI,QAAQ,QAAW;AAEtB,iBAAS,SAAK,eAAG,8BAA8B,EAAE,SAAS,CAAC;AAAA,MAC5D;AACA,UAAI,OAAO,QAAQ,YAAY,QAAQ,eAAe;AACrD,cAAM,IAAI,MAAM,6DAA6D;AAAA,MAC9E;AAAA,IACD;AAEA,eAAW,KAAK,WAAW;AAC1B,eAAS,SAAS,GAAG,UAAU,CAAC,CAAC;AAAA,IAClC;AAEA,eAAW,KAAK,SAAS;AACxB,UAAI;AACH,mBAAW,CAAC,IAAI,SAAS,QAAQ,QAAQ,CAAyB,CAAC;AAAA,MACpE,SAAS,GAAP;AACD,cAAM,IAAI,MAAM,gCAAgC,QAAQ,CAAyB,MAAM,EAAE,UAAU;AAAA,MACpG;AAAA,IACD;AAEA,eAAW,KAAK,cAAc;AAC7B,mBAAa,CAAC,IAAI,SAAS,YAAY,aAAa,CAAC,CAAC;AAAA,IACvD;AAEA,WAAO;AAAA,EACR;AAAA,EACA,IAAI,WAAmB,MAAyB;AAC/C,WAAO,KAAK,MAAM,EAAC,MAAM,OAAO,MAAM,UAAS,CAAC;AAAA,EACjD;AAAA,EACA,YAAY,WAAmB,MAAyB;AACvD,WAAO,KAAK,MAAM,EAAC,MAAM,WAAW,MAAM,cAAa,CAAC;AAAA,EACzD;AAAA,EACA,IAAI,WAAmB,MAAyB;AAC/C,WAAO,KAAK,MAAM,EAAC,WAAW,MAAM,MAAM,MAAK,CAAC;AAAA,EACjD;AAAA,EACA,IAAI,WAAmB,MAAyB;AAC/C,WAAO,KAAK,MAAM,EAAC,WAAW,MAAM,MAAM,MAAK,CAAC;AAAA,EACjD;AAAA,EACA,MAAc,MAAM,OAAwB;AAC3C,UAAMA,WAAU,GAAG,QAAQ;AAC3B,QAAI,CAACA;AAAS,YAAM,IAAI,MAAM,wBAAwB;AACtD,UAAM,SAAS,MAAMA,SAAQ,MAAM,KAAK;AACxC,QAAI,OAAO,OAAO;AACjB,YAAM,IAAI,KAAK,aAAa,OAAO,KAAK;AAAA,IACzC;AACA,WAAO,OAAO;AAAA,EACf;AAAA,EACA,SAAS,SAA6C;AACrD,WAAO,KAAK,IAAI,YAAY,CAAC,OAAO,CAAC;AAAA,EACtC;AAAA,EACA,YAA8B;AAC7B,WAAO,KAAK,IAAI,aAAa,CAAC,CAAC;AAAA,EAChC;AAAA,EACA,eAAe,SAAmC;AACjD,WAAO,KAAK,IAAI,kBAAkB,CAAC,SAAS,gBAAgB,CAAC;AAAA,EAC9D;AAAA,EACA,cAAc,QAAsC;AACnD,WAAO,KAAK,IAAI,iBAAiB,CAAC,QAAQ,eAAe,CAAC;AAAA,EAC3D;AAAA,EACA,qBAAqB,QAAsC;AAC1D,WAAO,KAAK,IAAI,wBAAwB,CAAC,QAAQ,eAAe,CAAC;AAAA,EAClE;AAAA,EACA,MAAM,eAAe,SAAiB,aAAqB,qBAAoD;AAC9G,YAAQ,MAAM,KAAK,YAAY,kBAAkB,CAAC,SAAS,aAAa,mBAAmB,CAAC,GAAG;AAAA,EAChG;AAAA,EACA,YAAY,SAAiB,WAAmB,SAAiB,UAAkB,mBAA4B;AAC9G,WAAO,KAAK,YAAY,eAAe,CAAC,SAAS,WAAW,SAAS,UAAU,iBAAiB,CAAC;AAAA,EAClG;AAAA,EACA,YAAY,SAAiB,aAAqB,qBAA8B;AAC/E,WAAO,KAAK,YAAY,eAAe,CAAC,SAAS,aAAa,mBAAmB,CAAC;AAAA,EACnF;AAAA,EACA,qBACC,SACA,eACA,gBACA,aACA,qBACC;AACD,WAAO,KAAK,YAAY,wBAAwB,CAAC,SAAS,eAAe,gBAAgB,aAAa,mBAAmB,CAAC;AAAA,EAC3H;AAAA,EACA,eAAe,QAAgB,SAAiB,aAAqB,qBAA8B;AAClG,WAAO,KAAK,YAAY,kBAAkB,CAAC,QAAQ,SAAS,aAAa,mBAAmB,CAAC;AAAA,EAC9F;AAAA,EACA,oBAAoB,QAAgB,SAAiB,aAAqB,qBAA8B;AACvG,WAAO,KAAK,YAAY,uBAAuB,CAAC,QAAQ,SAAS,aAAa,mBAAmB,CAAC;AAAA,EACnG;AAAA,EACA,iBAAiB,SAAiB;AACjC,WAAO,KAAK,IAAI,oBAAoB,CAAC,OAAO,CAAC;AAAA,EAC9C;AAAA,EACA,sBAAsB,QAAgB,SAAiB,WAAoB;AAC1E,WAAO,KAAK,YAAY,yBAAyB,CAAC,QAAQ,SAAS,SAAS,CAAC;AAAA,EAC9E;AAAA,EACA,oBAAoB,QAAgB,SAAiB,UAAkB;AACtE,WAAO,KAAK,YAAY,uBAAuB,CAAC,QAAQ,SAAS,QAAQ,CAAC;AAAA,EAC3E;AAAA,EACA,gBAAgB,QAAgB,SAAiB,WAAgB,aAAqB,qBAA8B;AACnH,WAAO,KAAK,YAAY,mBAAmB,CAAC,QAAQ,SAAS,KAAK,UAAU,SAAS,GAAG,aAAa,mBAAmB,CAAC;AAAA,EAC1H;AAAA,EACA,qBAAqB,QAA6C;AACjE,WAAO,KAAK,IAAI,wBAAwB,CAAC,MAAM,CAAC;AAAA,EACjD;AAAA,EACA,iBAAiB,SAA8C;AAC9D,WAAO,KAAK,IAAI,oBAAoB,CAAC,OAAO,CAAC;AAAA,EAC9C;AAAA,EACA,sBAAsB,QAAgB,SAAiB,aAAqB,qBAA8B;AACzG,WAAO,KAAK,YAAY,yBAAyB,CAAC,QAAQ,SAAS,aAAa,mBAAmB,CAAC;AAAA,EACrG;AAAA,EACA,2BAA2B,QAAgB,SAAiB,aAAqB,qBAA8B;AAC9G,WAAO,KAAK,YAAY,8BAA8B,CAAC,QAAQ,SAAS,aAAa,mBAAmB,CAAC;AAAA,EAC1G;AAAA,EACA,wBAAwB,SAAiB;AACxC,WAAO,KAAK,IAAI,2BAA2B,CAAC,OAAO,CAAC;AAAA,EACrD;AACD;AAEA,MAAM,aAAgD,CAAC;AACvD,MAAM,eAAoD,CAAC;AAE3D,MAAM,UAAU;AAAA,EACf,UAAU;AAAA,EACV,WAAW;AAAA,EACX,gBAAgB;AAAA,EAChB,aAAa;AAAA,EACb,aAAa;AAAA,EACb,iBAAiB;AAAA,EACjB,kBAAkB;AAAA,EAClB,qBAAqB;AAAA,EACrB,yBAAyB;AAAA,EACzB,WAAW;AAAA,EACX,kBAAkB;AAAA,EAClB,eACC;AAAA,EAGD,sBACC;AAAA,EAGD,gBACC;AAAA,EAGD,iBAAiB;AAAA,EACjB,gBAAgB;AAAA,EAChB,qBAAqB;AAAA,EACrB,kBAAkB;AAAA,EAClB,uBAAuB;AAAA,EACvB,qBAAqB;AAAA,EACrB,iBAAiB;AAAA,EACjB,eAAe;AAAA,EACf,iBAAiB;AAAA,EACjB,sBACC;AAAA,EAGD,kBACC;AAAA,EAGD,uBAAuB;AAAA,EACvB,4BAA4B;AAAA,EAC5B,yBAAyB;AAAA,EACzB,sBAAsB;AACvB;AAEA,MAAM,YAAqD,CAAC;AAE5D,MAAM,eAAgE;AAAA,EACrE,aAAa,cAAY;AACxB,eAAW,WAAW,UAAU;AAC/B,YAAM,CAAC,SAAS,WAAW,SAAS,UAAU,iBAAiB,IAAI;AAEnE,YAAM,gBAAgB,WAAW,UAAU,IAAI,OAAO;AACtD,UAAI,cAAc,QAAQ;AACzB,cAAM,IAAI,eAAe,oBAAoB,0BAA0B;AAAA,MACxE;AAEA,YAAM,cAAc,WAAW,iBAAiB,IAAI,CAAC,OAAO,CAAC,EAAE,KAAK;AACpE,UAAI,eAAe,kBAAkB;AACpC,cAAM,IAAI,eAAe,uCAAuC;AAAA,MACjE;AAEA,iBAAW,YAAY,IAAI,SAAS,WAAW,SAAS,UAAU,KAAK,IAAI,GAAG,iBAAiB;AAAA,IAChG;AACA,WAAO,EAAC,QAAQ,CAAC,EAAC;AAAA,EACnB;AAAA,EACA,aAAa,cAAY;AACxB,eAAW,WAAW,UAAU;AAC/B,YAAM,CAAC,SAAS,aAAa,mBAAmB,IAAI;AAEpD,YAAM,gBAAgB,WAAW,UAAU,IAAI,OAAO;AACtD,UAAI,CAAC,cAAc,QAAQ;AAC1B,cAAM,IAAI,eAAe,qBAAqB,kBAAkB;AAAA,MACjE;AAEA,UAAI,CAAC,uBAAwB,cAAc,CAAC,EAAE,aAAa,aAAc;AACxE,cAAM,IAAI,eAAe,mBAAmB,WAAW;AAAA,MACxD;AAEA,iBAAW,YAAY,IAAI,OAAO;AAAA,IACnC;AACA,WAAO,EAAC,QAAQ,CAAC,EAAC;AAAA,EACnB;AAAA,EACA,sBAAsB,cAAY;AACjC,eAAW,WAAW,UAAU;AAC/B,YAAM,CAAC,SAAS,eAAe,gBAAgB,aAAa,mBAAmB,IAAI;AAEnF,YAAM,gBAAgB,WAAW,UAAU,IAAI,OAAO;AACtD,UAAI,CAAC,cAAc,QAAQ;AAC1B,cAAM,IAAI,eAAe,qBAAqB,kBAAkB;AAAA,MACjE;AAEA,UAAI,CAAC,uBAAwB,cAAc,CAAC,EAAE,aAAa,aAAc;AACxE,cAAM,IAAI,eAAe,mBAAmB,WAAW;AAAA,MACxD;AAEA,UAAI,kBAAkB,cAAc;AACnC,mBAAW,gBAAgB,IAAI,gBAAgB,OAAO;AAAA,MACvD,WAAW,kBAAkB,YAAY;AACxC,mBAAW,iBAAiB,IAAI,gBAAgB,OAAO;AAAA,MACxD,WAAW,kBAAkB,aAAa;AACzC,mBAAW,oBAAoB,IAAI,gBAAgB,OAAO;AAAA,MAC3D,WAAW,kBAAkB,uBAAuB;AACnD,mBAAW,wBAAwB,IAAI,gBAAgB,OAAO;AAAA,MAC/D;AAAA,IACD;AACA,WAAO,EAAC,QAAQ,CAAC,EAAC;AAAA,EACnB;AAAA,EACA,gBAAgB,cAAY;AAC3B,UAAM,SAAS,CAAC;AAChB,eAAW,WAAW,UAAU;AAC/B,YAAM,CAAC,SAAS,aAAa,mBAAmB,IAAI;AAEpD,YAAM,gBAAgB,WAAW,UAAU,IAAI,OAAO;AACtD,UAAI,CAAC,cAAc,QAAQ;AAC1B,cAAM,IAAI,eAAe,qBAAqB,kBAAkB;AAAA,MACjE;AAEA,UAAI,CAAC,uBAAwB,cAAc,CAAC,EAAE,aAAa,aAAc;AACxE,cAAM,IAAI,eAAe,mBAAmB,WAAW;AAAA,MACxD;AAEA,YAAM,cAAc,WAAW,eAAe,IAAI,OAAO;AACzD,aAAO,KAAK,GAAG,WAAW;AAAA,IAC3B;AACA,WAAO,EAAC,OAAM;AAAA,EACf;AAAA,EACA,gBAAgB,cAAY;AAC3B,eAAW,WAAW,UAAU;AAC/B,YAAM,CAAC,QAAQ,SAAS,aAAa,mBAAmB,IAAI;AAE5D,YAAM,gBAAgB,WAAW,UAAU,IAAI,OAAO;AACtD,UAAI,CAAC,cAAc,QAAQ;AAC1B,cAAM,IAAI,eAAe,qBAAqB,kBAAkB;AAAA,MACjE;AAEA,YAAM,gBAAgB,WAAW,iBAAiB,IAAI,OAAO;AAC7D,YAAM,YAAY,cAAc,KAAK,CAAC,iBAAiB,aAAa,YAAY,WAAW;AAE3F,UAAI,CAAC,uBAAwB,cAAc,CAAC,EAAE,aAAa,eAAgB,CAAC,WAAW;AACtF,cAAM,IAAI,eAAe,6BAA6B,WAAW;AAAA,MAClE;AAEA,YAAM,kBAAkB,WAAW,gBAAgB,IAAI,MAAM,EAAE,KAAK;AACpE,UAAI,mBAAmB,iBAAiB;AACvC,cAAM,IAAI,eAAe,SAAS,2CAA2C;AAAA,MAC9E;AAEA,YAAM,qBAAqB,WAAW,cAAc,IAAI,QAAQ,OAAO;AACvE,UAAI,mBAAmB,QAAQ;AAC9B,cAAM,IAAI,eAAe,SAAS,8BAA8B,WAAW;AAAA,MAC5E;AAEA,YAAM,mBAAmB,WAAW,gBAAgB,IAAI,MAAM,EAAE,KAAK,KAAK;AAE1E,iBAAW,eAAe,IAAI,QAAQ,SAAS,mBAAmB,GAAG,KAAK,IAAI,CAAC;AAAA,IAChF;AACA,WAAO,EAAC,QAAQ,CAAC,EAAC;AAAA,EACnB;AAAA,EACA,qBAAqB,cAAY;AAChC,eAAW,WAAW,UAAU;AAC/B,YAAM,CAAC,QAAQ,SAAS,aAAa,mBAAmB,IAAI;AAE5D,YAAM,gBAAgB,WAAW,UAAU,IAAI,OAAO;AACtD,UAAI,CAAC,cAAc,QAAQ;AAC1B,cAAM,IAAI,eAAe,qBAAqB,kBAAkB;AAAA,MACjE;AAEA,YAAM,gBAAgB,WAAW,iBAAiB,IAAI,OAAO;AAC7D,YAAM,YAAY,cAAc,KAAK,CAAC,iBAAiB,aAAa,YAAY,WAAW;AAE3F,UAAI,CAAC,uBAAwB,cAAc,CAAC,EAAE,aAAa,eAAgB,CAAC,WAAW;AACtF,cAAM,IAAI,eAAe,6BAA6B,WAAW;AAAA,MAClE;AAEA,YAAM,qBAAqB,WAAW,cAAc,IAAI,QAAQ,OAAO;AACvE,UAAI,CAAC,mBAAmB,QAAQ;AAC/B,cAAM,IAAI,eAAe,SAAS,gCAAgC,WAAW;AAAA,MAC9E;AAEA,iBAAW,oBAAoB,IAAI,QAAQ,OAAO;AAAA,IACnD;AACA,WAAO,EAAC,QAAQ,CAAC,EAAC;AAAA,EACnB;AAAA,EACA,uBAAuB,cAAY;AAClC,eAAW,WAAW,UAAU;AAC/B,YAAM,CAAC,QAAQ,SAAS,SAAS,IAAI;AAErC,YAAM,qBAAqB,WAAW,cAAc,IAAI,QAAQ,OAAO;AACvE,UAAI,CAAC,mBAAmB,QAAQ;AAC/B,cAAM,IAAI,eAAe,SAAS,gCAAgC,WAAW;AAAA,MAC9E;AAEA,iBAAW,sBAAsB,IAAI,YAAY,IAAI,GAAG,QAAQ,OAAO;AAAA,IACxE;AACA,WAAO,EAAC,QAAQ,CAAC,EAAC;AAAA,EACnB;AAAA,EACA,qBAAqB,cAAY;AAChC,eAAW,WAAW,UAAU;AAC/B,YAAM,CAAC,QAAQ,SAAS,QAAQ,IAAI;AAEpC,YAAM,qBAAqB,WAAW,cAAc,IAAI,QAAQ,OAAO;AACvE,UAAI,CAAC,mBAAmB,QAAQ;AAC/B,cAAM,IAAI,eAAe,SAAS,gCAAgC,WAAW;AAAA,MAC9E;AAEA,iBAAW,oBAAoB,IAAI,UAAU,QAAQ,OAAO;AAAA,IAC7D;AACA,WAAO,EAAC,QAAQ,CAAC,EAAC;AAAA,EACnB;AAAA,EACA,iBAAiB,cAAY;AAC5B,eAAW,WAAW,UAAU;AAC/B,YAAM,CAAC,QAAQ,SAAS,WAAW,aAAa,mBAAmB,IAAI;AAEvE,YAAM,qBAAqB,WAAW,cAAc,IAAI,QAAQ,OAAO;AACvE,UAAI,CAAC,mBAAmB,QAAQ;AAC/B,cAAM,IAAI,eAAe,SAAS,gCAAgC,WAAW;AAAA,MAC9E;AAEA,YAAM,gBAAgB,WAAW,iBAAiB,IAAI,OAAO;AAC7D,YAAM,YAAY,cAAc,KAAK,CAAC,iBAAiB,aAAa,YAAY,WAAW;AAE3F,UAAI,CAAC,uBAAwB,mBAAmB,CAAC,EAAE,aAAa,eAAgB,CAAC,WAAW;AAC3F,cAAM,IAAI,eAAe,6BAA6B,WAAW;AAAA,MAClE;AAEA,iBAAW,gBAAgB,IAAI,WAAW,QAAQ,OAAO;AAAA,IAC1D;AACA,WAAO,EAAC,QAAQ,CAAC,EAAC;AAAA,EACnB;AAAA,EACA,uBAAuB,cAAY;AAClC,eAAW,WAAW,UAAU;AAC/B,YAAM,CAAC,QAAQ,SAAS,aAAa,mBAAmB,IAAI;AAE5D,YAAM,gBAAgB,WAAW,UAAU,IAAI,OAAO;AACtD,UAAI,CAAC,cAAc,QAAQ;AAC1B,cAAM,IAAI,eAAe,qBAAqB,kBAAkB;AAAA,MACjE;AAEA,UAAI,CAAC,uBAAwB,cAAc,CAAC,EAAE,aAAa,aAAc;AACxE,cAAM,IAAI,eAAe,mBAAmB,WAAW;AAAA,MACxD;AAEA,YAAM,uBAAuB,WAAW,qBAAqB,IAAI,QAAQ,OAAO;AAChF,UAAI,qBAAqB,QAAQ;AAChC,cAAM,IAAI,eAAe,SAAS,4BAA4B,WAAW;AAAA,MAC1E;AAEA,iBAAW,sBAAsB,IAAI,QAAQ,OAAO;AAAA,IACrD;AACA,WAAO,EAAC,QAAQ,CAAC,EAAC;AAAA,EACnB;AAAA,EACA,4BAA4B,cAAY;AACvC,eAAW,WAAW,UAAU;AAC/B,YAAM,CAAC,QAAQ,SAAS,aAAa,mBAAmB,IAAI;AAE5D,YAAM,gBAAgB,WAAW,UAAU,IAAI,OAAO;AACtD,UAAI,CAAC,cAAc,QAAQ;AAC1B,cAAM,IAAI,eAAe,qBAAqB,kBAAkB;AAAA,MACjE;AAEA,UAAI,CAAC,uBAAwB,cAAc,CAAC,EAAE,aAAa,aAAc;AACxE,cAAM,IAAI,eAAe,mBAAmB,WAAW;AAAA,MACxD;AAEA,YAAM,uBAAuB,WAAW,qBAAqB,IAAI,QAAQ,OAAO;AAChF,UAAI,CAAC,qBAAqB,QAAQ;AACjC,cAAM,IAAI,eAAe,SAAS,4BAA4B,WAAW;AAAA,MAC1E;AAEA,iBAAW,2BAA2B,IAAI,QAAQ,OAAO;AAAA,IAC1D;AACA,WAAO,EAAC,QAAQ,CAAC,EAAC;AAAA,EACnB;AACD;AAEO,MAAM,KAAK,IAAI,0BAAe,oBAAqD,QAAQ,WAAS;AAC1G,QAAM,EAAC,MAAM,WAAW,KAAI,IAAI;AAChC,QAAM,QAAQ,KAAK,IAAI;AACvB,QAAM,SAAyB,CAAC;AAChC,MAAI;AACH,YAAQ,MAAM;AAAA,MACd,KAAK;AACJ,eAAO,SAAS,WAAW,SAAS,EAAE,IAAI,IAAI;AAC9C;AAAA,MACD,KAAK;AACJ,eAAO,SAAS,WAAW,SAAS,EAAE,IAAI,IAAI;AAC9C;AAAA,MACD,KAAK;AACJ,eAAO,SAAS,aAAa,SAAS,EAAE,CAAC,IAAI,CAAC;AAC9C;AAAA,MACD,KAAK;AACJ,eAAO,SAAS,WAAW,SAAS,EAAE,IAAI,IAAI;AAC9C;AAAA,IACD;AAAA,EACD,SAAS,GAAP;AACD,QAAI,CAAC,EAAE,KAAK,SAAS,gBAAgB,GAAG;AACvC,aAAO,QAAQ;AACf,cAAQ,SAAS,GAAG,6BAA6B,KAAK;AAAA,IACvD,OAAO;AACN,aAAO,QAAQ,EAAE;AAAA,IAClB;AACA,WAAO;AAAA,EACR;AACA,QAAM,QAAQ,KAAK,IAAI,IAAI;AAC3B,MAAI,QAAQ,KAAM;AACjB,YAAQ,KAAK,uBAAuB,KAAK,UAAU,KAAK,GAAG;AAAA,EAC5D;AACA,SAAO;AACR,GAAG,YAAY,aAAW;AACzB,MAAI,QAAQ,WAAW,QAAQ,GAAG;AACjC,YAAQ,KAAK,QAAQ,MAAM,CAAC,CAAC;AAAA,EAC9B;AACD,CAAC;AAED,IAAI,QAAQ,SAAS,QAAQ;AAC5B,SAAO,SAAU,QAAgB,iBAAiB,EAAE;AACpD,MAAI,4BAAO,WAAW;AACrB,mBAAe,cAAc;AAAA,EAC9B;AACA,SAAO,UAAU;AAAA,IAChB,SAAS,OAAc,SAAS,6BAA6B,UAA4B,MAAM;AAC9F,YAAM,OAAO,KAAK,UAAU,CAAC,MAAM,MAAM,MAAM,SAAS,QAAQ,OAAO,CAAC;AACxE,cAAQ,KAAM;AAAA,MAAc;AAAA,EAAS,MAAM,OAAO;AAAA,IACnD;AAAA,IACA,KAAK,SAAiB;AACrB,cAAQ,KAAM;AAAA;AAAA,EAAmB,SAAS;AAAA,IAC3C;AAAA,EACD;AACA,UAAQ,GAAG,qBAAqB,SAAO;AACtC,QAAI,4BAAO,YAAY;AACtB,cAAQ,SAAS,KAAK,wBAAwB;AAAA,IAC/C;AAAA,EACD,CAAC;AAED,kBAAK,MAAM,UAAU,QAAQ,OAAO,SAAO,KAAK,GAAG,CAAC;AACrD,OAAO;AACN,KAAG,MAAM,4BAAO,mBAAmB,CAAC;AACrC;",
  "names": ["process"]
}
