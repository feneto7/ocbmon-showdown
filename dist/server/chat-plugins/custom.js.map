{
  "version": 3,
  "sources": ["../../../server/chat-plugins/custom.ts"],
  "sourcesContent": ["import parseColor from 'parse-color';\nimport {FS, Image, Net, Utils} from '../../lib';\nimport {getTourWins} from './data-badges';\nimport {checkEmojiLevel, createEmojiHtml} from './emojis';\nimport {createStickerHtml, downloadSticker, Sticker} from './stickers';\nimport {escapeHTML} from '../../lib/utils';\n\n/* Generic logic */\nconst CUSTOM_CSS_PATH = 'config/custom.css';\nconst CSS_HEADER = `.userlist li button:hover {\n\tbackground: rgba(220,230,240,0.7);\n}`;\n\nconst hasTourWins = (wins: number, user: User) => getTourWins(user.id) >= wins;\n\nconst createUserCss = (\n\tuserId: string,\n\tflair: Flair | undefined,\n\tbackground: Background | undefined,\n) => {\n\tconst backgroundCss: string[] = [];\n\n\tif (flair) {\n\t\tbackgroundCss.push(`url(\"${getFlairUrl(flair.pokemonId, flair.pokemonMod)}\") no-repeat right -7px top ${flair.heightOffset}px`);\n\t}\n\n\tif (background) {\n\t\tbackgroundCss.push(`rgba(${background.r},${background.g},${background.b}, 0.25)`);\n\t}\n\n\tif (!backgroundCss.length) return '';\n\n\treturn `[id$=\"-userlist-user-${userId}\"]{background: ${backgroundCss.join(', ')};}`;\n};\n\nconst createUserChatCss = (\n\tuserId: string,\n\tchatBackground: Background | undefined,\n) => {\n\tconst backgroundCss: string[] = [];\n\n\tif (chatBackground) {\n\t\tbackgroundCss.push(`rgba(${chatBackground.r},${chatBackground.g},${chatBackground.b}, 0.05)`);\n\t}\n\n\tif (!backgroundCss.length) return '';\n\n\treturn `.chatmessage-${userId}{background: ${backgroundCss.join(', ')};}`;\n};\n\nconst writeCss = (content: string) => FS(CUSTOM_CSS_PATH).writeSync(content);\n\nconst updateCss = () => {\n\tconst userConfigs: Record<string, { flair?: Flair, background?: Background, chatBackground?: Background }> = {};\n\n\tObject.entries(flairs).forEach(([userId, flair]) => {\n\t\tif (!userConfigs[userId]) userConfigs[userId] = {};\n\t\tuserConfigs[userId].flair = flair;\n\t});\n\n\tObject.entries(backgrounds).forEach(([userId, background]) => {\n\t\tif (!userConfigs[userId]) userConfigs[userId] = {};\n\t\tuserConfigs[userId].background = background;\n\t});\n\n\tObject.entries(chatBackgrounds).forEach(([userId, background]) => {\n\t\tif (!userConfigs[userId]) userConfigs[userId] = {};\n\t\tuserConfigs[userId].chatBackground = background;\n\t});\n\n\twriteCss([\n\t\tCSS_HEADER,\n\t\t...Object.entries(userConfigs)\n\t\t\t.map(([userId, userConfig]) => createUserCss(userId, userConfig.flair, userConfig.background)),\n\t\t...Object.entries(userConfigs)\n\t\t\t.map(([userId, userConfig]) => createUserChatCss(userId, userConfig.chatBackground)),\n\t].join('\\n'));\n};\n\n/* Avatar Logic */\nconst AVATAR_MINIMUM_TOUR_WINS = 1;\nconst AVATAR_USER_INELIGIBLE = 'You are not eligible for a custom avatar.';\nconst AVATAR_ERROR_WRITING_IMAGE = 'Unable to write image. Please try again or contact an administrator.';\nconst AVATAR_UNKNOWN_ERROR = 'An unknown error occurred. Please try again or contact an administrator.';\n\ninterface AvatarStatus {\n\tenabled: boolean;\n\trequestedAvatar?: string;\n\tavatar?: string;\n}\n\ntype AvatarConfig = Record<string, AvatarStatus>;\n\nexport const avatars: AvatarConfig = JSON.parse(\n\tFS('config/chat-plugins/custom-avatars.json').readIfExistsSync() || \"{}\"\n);\n\nconst saveAvatars = () => {\n\tFS('config/chat-plugins/custom-avatars.json').writeUpdate(() => JSON.stringify(avatars));\n};\n\nconst updateAvatarStatus = (id: string, statusUpdate: Partial<AvatarStatus>) => {\n\tconst avatarStatus = avatars[id];\n\n\tconst newStatus: AvatarStatus = {\n\t\tenabled: false,\n\t};\n\n\tavatars[id] = {\n\t\t...newStatus,\n\t\t...avatarStatus,\n\t\t...statusUpdate,\n\t};\n\n\tsaveAvatars();\n};\n\nconst createAvatarHtml = (\n\tavatarName: string,\n\tisCustom = false,\n) => `<img src=\"//${Config.routes.client}/sprites/trainers${isCustom ? '-custom' : ''}/${avatarName}.png\" title=\"${avatarName}\" alt=\"${avatarName}\" width=\"80\" height=\"80\" class=\"pixelated\" />`; // eslint-disable-line max-len\n\nconst createRawAvatarHtml = (\n\tavatarFileName: string,\n\tisRequest = false,\n) => `<avatar avatarfilename=\"${Utils.escapeHTML(avatarFileName)}\"${isRequest ? ' \"request\" ' : \" \"} />`;\n\nconst getUsername = (userId: string) => Users.get(userId)?.name || userId;\n\nconst createPendingAvatarRequestHtml = (userId: string, avatarFileName: string, isBroadcast = false) => {\n\tconst username = getUsername(userId);\n\tlet pendingAvatarRequestHtml = '<details>';\n\tpendingAvatarRequestHtml += `<summary><b>${username}${isBroadcast ? ' Custom Avatar Request' : ''}</b></summary>`;\n\tpendingAvatarRequestHtml += createRawAvatarHtml(avatarFileName, true) + '<br />';\n\tpendingAvatarRequestHtml += `<button class=\"button\" name=\"send\" value=\"/custom avatar approve ${userId}\">Approve</button>`;\n\tpendingAvatarRequestHtml += `<button class=\"button\" name=\"send\" value=\"/custom avatar deny ${userId}\">Deny</button>`;\n\treturn pendingAvatarRequestHtml + '</details>';\n};\n\nconst sendPM = (message: string, userId: ID) => {\n\tconst user = Users.get(userId);\n\n\tif (user) {\n\t\tuser.send(`|pm|&|${user.getIdentity()}|${message}`);\n\t}\n};\n\nconst notifyAvatarStaff = (requesterId: string, fileName: string) => {\n\tconst staffRoom = Rooms.get('staff');\n\n\tif (staffRoom) {\n\t\tstaffRoom.sendMods(`|uhtml|avatar-request-${requesterId}|${createPendingAvatarRequestHtml(requesterId, fileName, true)}`);\n\t}\n};\n\nconst removeAvatarStaffNotificiation = (requesterId: string) => {\n\tconst staffRoom = Rooms.get('staff');\n\n\tif (staffRoom) {\n\t\tstaffRoom.sendMods(\n\t\t\tUtils.html`|uhtml|avatar-request-${requesterId}|`,\n\t\t);\n\t}\n};\n\n/* Emoji Logic */\nconst EMOJI_MINIMUM_TOUR_WINS = 3;\nconst EMOJI_USER_INELIGIBLE = `You are not eligible for a custom emoji. You must have at least ${EMOJI_MINIMUM_TOUR_WINS} tour wins.`;\nconst EMOJI_ERROR_WRITING_IMAGE = 'Unable to write image. Please try again or contact an administrator.';\nconst EMOJI_UNKNOWN_ERROR = 'An unknown error occurred. Please try again or contact an administrator.';\n\ninterface EmojiStatus {\n\tenabled: boolean;\n\trequestedEmoji?: string;\n\temoji?: string;\n}\n\ntype EmojiConfig = Record<string, EmojiStatus>;\n\nexport const emojis: EmojiConfig = JSON.parse(\n\tFS('config/chat-plugins/custom-emojis.json').readIfExistsSync() || \"{}\"\n);\n\nconst saveEmojis = () => {\n\tFS('config/chat-plugins/custom-emojis.json').writeUpdate(() => JSON.stringify(emojis));\n};\n\nconst updateEmojiStatus = (id: string, statusUpdate: Partial<EmojiStatus>) => {\n\tconst emojiStatus = emojis[id];\n\n\tconst newStatus: EmojiStatus = {\n\t\tenabled: false,\n\t};\n\n\temojis[id] = {\n\t\t...newStatus,\n\t\t...emojiStatus,\n\t\t...statusUpdate,\n\t};\n\n\tsaveEmojis();\n};\n\nconst createRawEmojiHtml = (\n\tuserId: string,\n\temojiFileName: string,\n\tisRequest = false,\n) => createEmojiHtml(\n\t`custom-${userId}`,\n\t(isRequest ? 'requests/' : '') + emojiFileName\n);\n\nconst createPendingEmojiRequestHtml = (userId: string, emojiFileName: string, isBroadcast = false) => {\n\tconst username = getUsername(userId);\n\tlet pendingEmojiRequestHtml = '<details>';\n\tpendingEmojiRequestHtml += `<summary><b>${username}${isBroadcast ? ' Custom Emoji Request' : ''}</b></summary>`;\n\tpendingEmojiRequestHtml += createRawEmojiHtml(userId, emojiFileName, true) + '<br />';\n\tpendingEmojiRequestHtml += `<button class=\"button\" name=\"send\" value=\"/custom emoji approve ${userId}\">Approve</button>`;\n\tpendingEmojiRequestHtml += `<button class=\"button\" name=\"send\" value=\"/custom emoji deny ${userId}\">Deny</button>`;\n\treturn pendingEmojiRequestHtml + '</details>';\n};\n\nconst notifyEmojiStaff = (requesterId: string, fileName: string) => {\n\tconst staffRoom = Rooms.get('staff');\n\n\tif (staffRoom) {\n\t\tstaffRoom.sendMods(`|uhtml|emoji-request-${requesterId}|${createPendingEmojiRequestHtml(requesterId, fileName, true)}`);\n\t}\n};\n\nconst removeEmojiStaffNotificiation = (requesterId: string) => {\n\tconst staffRoom = Rooms.get('staff');\n\n\tif (staffRoom) {\n\t\tstaffRoom.sendMods(\n\t\t\tUtils.html`|uhtml|emoji-request-${requesterId}|`,\n\t\t);\n\t}\n};\n\n/* Sticker Logic */\nconst STICKER_MINIMUM_TOUR_WINS = 4;\nconst STICKER_USER_INELIGIBLE = `You are not eligible for a custom sticker. You must have at least ${STICKER_MINIMUM_TOUR_WINS} tour wins.`;\nconst STICKER_ERROR_WRITING_IMAGE = 'Unable to write image. Please try again or contact an administrator.';\nconst STICKER_UNKNOWN_ERROR = 'An unknown error occurred. Please try again or contact an administrator.';\nconst COOLDOWN = 10 * 1000;\n\ninterface StickerStatus {\n\tenabled: boolean;\n\trequestedSticker?: Sticker;\n\tsticker?: Sticker;\n}\n\ntype StickerConfig = Record<string, StickerStatus>;\n\nexport const stickers: StickerConfig = JSON.parse(\n\tFS('config/chat-plugins/custom-stickers.json').readIfExistsSync() || \"{}\"\n);\n\nconst saveStickers = () => {\n\tFS('config/chat-plugins/custom-stickers.json').writeUpdate(() => JSON.stringify(stickers));\n};\n\nconst updateStickerStatus = (id: string, statusUpdate: Partial<StickerStatus>) => {\n\tconst stickerStatus = stickers[id];\n\n\tconst newStatus: StickerStatus = {\n\t\tenabled: false,\n\t};\n\n\tstickers[id] = {\n\t\t...newStatus,\n\t\t...stickerStatus,\n\t\t...statusUpdate,\n\t};\n\n\tsaveStickers();\n};\n\nconst createRawStickerHtml = (\n\tuserId: string,\n\tsticker: Sticker,\n\tisRequest = false,\n) => createStickerHtml(\n\t`custom-${userId}`,\n\tsticker,\n\tisRequest ? 'requests/' : ''\n);\n\nconst createPendingStickerRequestHtml = (userId: string, sticker: Sticker, isBroadcast = false) => {\n\tconst username = getUsername(userId);\n\tlet pendingStickerRequestHtml = '<details>';\n\tpendingStickerRequestHtml += `<summary><b>${username}${isBroadcast ? ' Custom Sticker Request' : ''}</b></summary>`;\n\tpendingStickerRequestHtml += createRawStickerHtml(userId, sticker, true) + '<br />';\n\tpendingStickerRequestHtml += `<button class=\"button\" name=\"send\" value=\"/custom sticker approve ${userId}\">Approve</button>`;\n\tpendingStickerRequestHtml += `<button class=\"button\" name=\"send\" value=\"/custom sticker deny ${userId}\">Deny</button>`;\n\treturn pendingStickerRequestHtml + '</details>';\n};\n\nconst notifyStickerStaff = (requesterId: string, sticker: Sticker) => {\n\tconst staffRoom = Rooms.get('staff');\n\n\tif (staffRoom) {\n\t\tstaffRoom.sendMods(`|uhtml|sticker-request-${requesterId}|${createPendingStickerRequestHtml(requesterId, sticker, true)}`);\n\t}\n};\n\nconst removeStickerStaffNotificiation = (requesterId: string) => {\n\tconst staffRoom = Rooms.get('staff');\n\n\tif (staffRoom) {\n\t\tstaffRoom.sendMods(\n\t\t\tUtils.html`|uhtml|sticker-request-${requesterId}|`,\n\t\t);\n\t}\n};\n\nconst cooldowns: Record<string, number> = {};\n\nconst checkCooldown = (userID: ID) => {\n\tconst now = Date.now();\n\tconst activeCooldown = cooldowns[userID];\n\n\tif (activeCooldown && ((now - activeCooldown) < COOLDOWN)) {\n\t\treturn false;\n\t}\n\n\tcooldowns[userID] = now;\n\treturn true;\n};\n\n/* Title Logic */\nconst TITLE_MINIMUM_TOUR_WINS = 2;\nconst TITLE_USER_INELIGIBLE = `You are not eligible for a custom title. You must have at least ${TITLE_MINIMUM_TOUR_WINS} tour wins.`;\nconst TITLE_USER_UNSET = 'You do not have a custom title set.';\nconst TITLE_INVALID = 'Your custom title must be between 1 and 18 characters long.';\n\ninterface Title { title: string }\ntype TitleConfig = Record<string, Title>;\n\nexport const titles: TitleConfig = JSON.parse(\n\tFS('config/chat-plugins/custom-titles.json').readIfExistsSync() || \"{}\"\n);\n\nconst saveTitles = () => {\n\tFS('config/chat-plugins/custom-titles.json').writeUpdate(() => JSON.stringify(titles));\n};\n\nconst formatTitle = (string: string) => string\n\t.replace(/[^A-Za-z0-9 ]*/, '')\n\t.replace(/( )+/, ' ');\n\n/* Flair Logic */\nconst FLAIR_MINIMUM_TOUR_WINS = 3;\nconst FLAIR_USER_INELIGIBLE = `You are not eligible for a custom flair. You must have at least ${FLAIR_MINIMUM_TOUR_WINS} tour wins.`;\nconst FLAIR_USER_UNSET = 'You do not have a custom flair set.';\nconst getInvalidFlairErrorMessage = (mod: string, name: string) => `Invalid flair ${mod}/${name} selected.`;\n\nconst defaultHeight = -6;\nconst maxHeightChange = 10;\n\nconst baseUrls: Record<string, string> = {\n\tpokemon: 'https://raw.githubusercontent.com/Jackinev/pokeicons/master/40x30',\n\tclover: 'https://raw.githubusercontent.com/MrSableye/ocbmon-showdown-assets/master/clover/sprites/pokemon-icons',\n};\n\nconst getBaseUrl = (pokemonMod: string) => baseUrls[pokemonMod] || baseUrls.clover;\n\nconst getFlairUrl = (pokemonId: string, pokemonMod: string) => `${getBaseUrl(pokemonMod)}/${pokemonId}.png`;\n\ninterface Flair { pokemonId: string; pokemonMod: string; heightOffset: number }\ntype FlairConfig = Record<string, Flair>;\n\nconst flairs: FlairConfig = JSON.parse(\n\tFS('config/chat-plugins/custom-flair.json').readIfExistsSync() || \"{}\"\n);\n\nconst saveFlairs = () => {\n\tFS('config/chat-plugins/custom-flair.json').writeUpdate(() => JSON.stringify(flairs));\n\tupdateCss();\n};\n\n/* Name color logic */\nconst NAME_COLOR_MINIMUM_TOUR_WINS = 1;\nconst NAME_COLOR_USER_INELIGIBLE = `You are not eligible for a custom name color. You must have at least ${NAME_COLOR_MINIMUM_TOUR_WINS} tour wins.`;\nconst NAME_COLOR_INVALID = 'The username to use as your custom color must be at least 1 character and less than 19 characters long.';\n\n/* Background color logic */\nconst BACKGROUND_MINIMUM_TOUR_WINS = 5;\nconst BACKGROUND_USER_INELIGIBLE = `You are not eligible for a custom background. You must have at least ${BACKGROUND_MINIMUM_TOUR_WINS} tour wins.`;\nconst BACKGROUND_USER_UNSET = 'You do not have a custom background set.';\nconst BACKGROUND_INVALID = 'Your custom background must be a color. Try a hex value.';\n\ninterface Background { r: number; g: number; b: number }\ntype BackgroundConfig = Record<string, Background>;\n\nconst backgrounds: BackgroundConfig = JSON.parse(\n\tFS('config/chat-plugins/custom-background.json').readIfExistsSync() || \"{}\"\n);\n\nconst saveBackgrounds = () => {\n\tFS('config/chat-plugins/custom-background.json').writeUpdate(() => JSON.stringify(backgrounds));\n\tupdateCss();\n};\n\n/* Chat background color logic */\nconst CHAT_BACKGROUND_MINIMUM_TOUR_WINS = 6;\nconst CHAT_BACKGROUND_USER_INELIGIBLE = `You are not eligible for a custom chat background. You must have at least ${CHAT_BACKGROUND_MINIMUM_TOUR_WINS} tour wins.`;\nconst CHAT_BACKGROUND_USER_UNSET = 'You do not have a custom chat background set.';\nconst CHAT_BACKGROUND_INVALID = 'Your custom chat background must be a color. Try a hex value.';\n\nconst chatBackgrounds: BackgroundConfig = JSON.parse(\n\tFS('config/chat-plugins/custom-chat-background.json').readIfExistsSync() || \"{}\"\n);\n\nconst saveChatBackgrounds = () => {\n\tFS('config/chat-plugins/custom-chat-background.json').writeUpdate(() => JSON.stringify(chatBackgrounds));\n\tupdateCss();\n};\n\nexport const commands: Chat.ChatCommands = {\n\tcgif: 'mysticker',\n\tcsticker: 'mysticker',\n\tmygif: 'mysticker',\n\tmysticker(target, room, user) {\n\t\tif (Punishments.hasPunishType(user.id, 'EMOJIBAN')) {\n\t\t\treturn this.errorReply('You are banned from using stickers.');\n\t\t}\n\n\t\tif (room && !checkEmojiLevel(user, room)) {\n\t\t\tthrow new Chat.ErrorMessage('You cannot use stickers in this room.');\n\t\t}\n\n\t\tthis.checkChat();\n\n\t\tconst sticker = stickers[user.id];\n\n\t\tif (!sticker || !sticker.sticker) return this.errorReply(`You have no custom sticker.`);\n\n\t\tif (!checkCooldown(user.id)) {\n\t\t\treturn this.errorReply('You are using stickers too quickly.');\n\t\t}\n\n\t\treturn `/html ${createStickerHtml(`custom-${user.id}`, sticker.sticker)}`;\n\t},\n\tcustom: {\n\t\tavatars: 'avatar',\n\t\tavatar: {\n\t\t\tasync request(target, room, user) {\n\t\t\t\ttry {\n\t\t\t\t\tconst canHaveAvatar = (Config.customavatars?.[user.id] !== undefined) || hasTourWins(AVATAR_MINIMUM_TOUR_WINS, user);\n\n\t\t\t\t\tif (!canHaveAvatar) {\n\t\t\t\t\t\treturn this.errorReply(AVATAR_USER_INELIGIBLE);\n\t\t\t\t\t}\n\n\t\t\t\t\tconst imageUrl = target.trim();\n\t\t\t\t\tconst imageResult = await Image.downloadImageWithVerification(imageUrl, {\n\t\t\t\t\t\tvalidTypes: ['png', 'gif'],\n\t\t\t\t\t\tmaxDimensions: {width: 80, height: 80},\n\t\t\t\t\t\tminDimensions: {width: 80, height: 80},\n\t\t\t\t\t\tfileSize: 200000,\n\t\t\t\t\t});\n\n\t\t\t\t\tif ('error' in imageResult) {\n\t\t\t\t\t\treturn this.errorReply(imageResult.error);\n\t\t\t\t\t}\n\n\t\t\t\t\tconst {image, type} = imageResult;\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconst fileName = `${user.id}.${type}`;\n\t\t\t\t\t\tawait FS(`./config/avatars/requests/${fileName}`).write(image);\n\n\t\t\t\t\t\tupdateAvatarStatus(user.id, {requestedAvatar: fileName});\n\n\t\t\t\t\t\tnotifyAvatarStaff(user.id, fileName);\n\n\t\t\t\t\t\treturn this.sendReplyBox(`Requested: ${createRawAvatarHtml(fileName, true)}`);\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\treturn this.errorReply(AVATAR_ERROR_WRITING_IMAGE);\n\t\t\t\t\t}\n\t\t\t\t} catch (error) {\n\t\t\t\t\treturn this.errorReply(AVATAR_UNKNOWN_ERROR);\n\t\t\t\t}\n\t\t\t},\n\t\t\tshowall: 'showapproved',\n\t\t\tshowapproved() {\n\t\t\t\tthis.runBroadcast();\n\t\t\t\tthis.checkCan('avatar');\n\n\t\t\t\tconst avatarList = Object.entries(avatars).filter(([userId, avatarStatus]) => avatarStatus.avatar !== undefined);\n\n\t\t\t\tif (!avatarList.length) {\n\t\t\t\t\treturn this.sendReplyBox('<b><u>Approved Avatars</u></b><br /><div>No approved avatars.</div>');\n\t\t\t\t}\n\n\t\t\t\t/* eslint-disable max-len */\n\t\t\t\tconst avatarListHtml = avatarList.map(\n\t\t\t\t\t([\n\t\t\t\t\t\tuserId,\n\t\t\t\t\t\tavatarStatus,\n\t\t\t\t\t]) => `<span style=\"display: inline-block;\"><div>${getUsername(userId)}</div><div>${createRawAvatarHtml(avatarStatus.avatar || '')}</div></span>`\n\t\t\t\t).join(' ');\n\t\t\t\t/* eslint-enable max-len */\n\n\t\t\t\treturn this.sendReplyBox('<b><u>Approved Avatars</u></b><br />' + avatarListHtml);\n\t\t\t},\n\t\t\tshowrequests: 'requests',\n\t\t\trequests() {\n\t\t\t\tthis.checkCan('avatar');\n\n\t\t\t\tconst requestList = Object.entries(avatars)\n\t\t\t\t\t.filter(([userId, avatarStatus]) => avatarStatus.requestedAvatar !== undefined);\n\n\t\t\t\tif (!requestList.length) {\n\t\t\t\t\treturn this.sendReplyBox('<b><u>Avatar Requests</u></b><br />' + `<div>No requests available.</div>`);\n\t\t\t\t}\n\n\t\t\t\tconst requestListHtml = requestList.map(\n\t\t\t\t\t([userId, avatarStatus]) => createPendingAvatarRequestHtml(userId, avatarStatus.requestedAvatar || ''),\n\t\t\t\t).join('<br />');\n\n\t\t\t\treturn this.sendReplyBox('<b><u>Avatar Requests</u></b><br />' + requestListHtml);\n\t\t\t},\n\t\t\tapprove(target) {\n\t\t\t\tthis.checkCan('avatar');\n\n\t\t\t\tconst targetId = toID(target);\n\t\t\t\tconst avatarStatus = avatars[targetId];\n\n\t\t\t\tif (!avatarStatus || !avatarStatus.requestedAvatar) {\n\t\t\t\t\treturn this.errorReply(`No avatar request for ${targetId}`);\n\t\t\t\t}\n\n\t\t\t\tupdateAvatarStatus(targetId, {\n\t\t\t\t\tavatar: avatarStatus.requestedAvatar,\n\t\t\t\t\trequestedAvatar: undefined,\n\t\t\t\t});\n\n\t\t\t\tFS(`./config/avatars/requests/${avatarStatus.requestedAvatar}`)\n\t\t\t\t\t.renameSync(`./config/avatars/${avatarStatus.requestedAvatar}`);\n\n\t\t\t\tsendPM(`/html <div class=\"infobox\"><div>Avatar approved</div><div>${createRawAvatarHtml(avatarStatus.requestedAvatar)}</div></div>`, targetId);\n\t\t\t\tremoveAvatarStaffNotificiation(targetId);\n\n\t\t\t\treturn this.sendReplyBox(`<div><div>Approved avatar request of ${targetId}</div><div>${createRawAvatarHtml(avatarStatus.requestedAvatar)}</div></div>`);\n\t\t\t},\n\t\t\tdeny(target) {\n\t\t\t\tthis.checkCan('avatar');\n\n\t\t\t\tconst targetId = toID(target);\n\t\t\t\tconst avatarStatus = avatars[targetId];\n\n\t\t\t\tif (!avatarStatus || !avatarStatus.requestedAvatar) {\n\t\t\t\t\treturn this.errorReply(`No avatar request for ${targetId}`);\n\t\t\t\t}\n\n\t\t\t\tupdateAvatarStatus(targetId, {\n\t\t\t\t\trequestedAvatar: undefined,\n\t\t\t\t});\n\n\t\t\t\tFS(`./config/avatars/requests/${avatarStatus.requestedAvatar}`).unlinkIfExistsSync();\n\n\t\t\t\tsendPM('Your avatar request was denied.', targetId);\n\t\t\t\tremoveAvatarStaffNotificiation(targetId);\n\n\t\t\t\treturn this.sendReply(`Denied avatar request of ${targetId}`);\n\t\t\t},\n\t\t\tdelete(target, room, user) {\n\t\t\t\tthis.checkCan('avatar');\n\n\t\t\t\tconst targetId = toID(target);\n\t\t\t\tconst avatarStatus = avatars[targetId];\n\n\t\t\t\tif (!avatarStatus || !avatarStatus.avatar) {\n\t\t\t\t\treturn this.errorReply(`No avatar for ${targetId}`);\n\t\t\t\t}\n\n\t\t\t\tupdateAvatarStatus(targetId, {\n\t\t\t\t\tavatar: undefined,\n\t\t\t\t});\n\n\t\t\t\tFS(`./config/avatars/${avatarStatus.avatar}`).unlinkIfExistsSync();\n\n\t\t\t\tsendPM('Your avatar was deleted.', targetId);\n\t\t\t\tthis.addGlobalModAction(`${user.name} deleted avatar of ${targetId}`);\n\n\t\t\t\treturn this.sendReply(`Deleted avatar of ${targetId}`);\n\t\t\t},\n\t\t\ton(target, room, user) {\n\t\t\t\tupdateAvatarStatus(user.id, {enabled: true});\n\n\t\t\t\treturn this.sendReplyBox('Enabled custom avatar.');\n\t\t\t},\n\t\t\toff(target, room, user) {\n\t\t\t\tupdateAvatarStatus(user.id, {enabled: false});\n\n\t\t\t\treturn this.sendReplyBox('Disabled custom avatar.');\n\t\t\t},\n\t\t\tblobbos(target, room, user) {\n\t\t\t\tconst isInBlobbosConfig = Config.blobbosTournamentWinners && Config.blobbosTournamentWinners.includes(user.id);\n\t\t\t\tconst hasBlobbosBadge = Config.usesqlitebadges && user.badges?.some((badge) => badge.badge_id === 'blobboswinner');\n\n\t\t\t\tif (isInBlobbosConfig || hasBlobbosBadge) {\n\t\t\t\t\tthis.user.avatar = '#blobbos';\n\t\t\t\t\tthis.sendReply(`${this.tr`Avatar changed to:`}\\n|raw|${createAvatarHtml('blobbos', true)}`);\n\t\t\t\t}\n\t\t\t},\n\t\t\t'': 'help',\n\t\t\thelp() {\n\t\t\t\treturn this.parse('/help custom avatar');\n\t\t\t},\n\t\t},\n\t\tavatarhelp() {\n\t\t\tthis.sendReplyBox(\n\t\t\t\t`<code>/custom avatar request [image url]</code>: requests a custom avatar. Requires: custom avatar access<br />` +\n\t\t\t\t`<code>/custom avatar showall</code>: shows all approved avatars. Requires: @ or above<br />` +\n\t\t\t\t`<code>/custom avatar showrequests</code>: shows all un-approved avatars. Requires: @ or above<br />` +\n\t\t\t\t`<code>/custom avatar approve [user]</code>: approves the user's avatar request. Requires: @ or above<br />` +\n\t\t\t\t`<code>/custom avatar deny [user]</code>: denies the user's avatar request. Requires: @ or above<br />` +\n\t\t\t\t`<code>/custom avatar on</code>: enables your own custom avatar.<br />` +\n\t\t\t\t`<code>/custom avatar off</code>: disables your own custom avatar.<br />` +\n\t\t\t\t`<code>/custom avatar blobbos</code>: enables the covetted Blobbos avatar.<br />`\n\t\t\t);\n\t\t},\n\t\temoji: {\n\t\t\tasync request(target, room, user) {\n\t\t\t\ttry {\n\t\t\t\t\tconst canHaveEmoji = (Config.customemoji?.[user.id] !== undefined) || hasTourWins(EMOJI_MINIMUM_TOUR_WINS, user);\n\n\t\t\t\t\tif (!canHaveEmoji) {\n\t\t\t\t\t\treturn this.errorReply(EMOJI_USER_INELIGIBLE);\n\t\t\t\t\t}\n\n\t\t\t\t\tconst imageUrl = target.trim();\n\t\t\t\t\tconst imageResult = await Image.downloadImageWithVerification(imageUrl, {\n\t\t\t\t\t\tvalidTypes: ['png', 'gif'],\n\t\t\t\t\t\tenforceRatio: {min: {width: 1, height: 1}, max: {width: 1, height: 1}},\n\t\t\t\t\t\tmaxDimensions: {width: 64, height: 64},\n\t\t\t\t\t\tminDimensions: {width: 32, height: 32},\n\t\t\t\t\t\tfileSize: 200000,\n\t\t\t\t\t});\n\n\t\t\t\t\tif ('error' in imageResult) {\n\t\t\t\t\t\treturn this.errorReply(imageResult.error);\n\t\t\t\t\t}\n\n\t\t\t\t\tconst {image, type} = imageResult;\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconst fileName = `custom-${user.id}.${type}`;\n\t\t\t\t\t\tawait FS(`./config/emojis/requests/${fileName}`).write(image);\n\n\t\t\t\t\t\tupdateEmojiStatus(user.id, {requestedEmoji: fileName});\n\n\t\t\t\t\t\tnotifyEmojiStaff(user.id, fileName);\n\n\t\t\t\t\t\treturn this.sendReplyBox(`Requested: ${createRawEmojiHtml(user.id, fileName, true)}`);\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\treturn this.errorReply(EMOJI_ERROR_WRITING_IMAGE);\n\t\t\t\t\t}\n\t\t\t\t} catch (error) {\n\t\t\t\t\treturn this.errorReply(EMOJI_UNKNOWN_ERROR);\n\t\t\t\t}\n\t\t\t},\n\t\t\tshowall: 'showapproved',\n\t\t\tshowapproved() {\n\t\t\t\tthis.runBroadcast();\n\t\t\t\tthis.checkCan('avatar');\n\n\t\t\t\tconst emojiList = Object.entries(emojis).filter(([userId, emojiStatus]) => emojiStatus.emoji !== undefined);\n\n\t\t\t\tif (!emojiList.length) {\n\t\t\t\t\treturn this.sendReplyBox('<b><u>Approved Emojis</u></b><br /><div>No approved emojis.</div>');\n\t\t\t\t}\n\n\t\t\t\t/* eslint-disable max-len */\n\t\t\t\tconst emojiListHtml = emojiList.map(\n\t\t\t\t\t([\n\t\t\t\t\t\tuserId,\n\t\t\t\t\t\temojiStatus,\n\t\t\t\t\t]) => `<span style=\"display: inline-block;\"><div>${getUsername(userId)}</div><div>${createRawEmojiHtml(userId, emojiStatus.emoji || '')}</div></span>`\n\t\t\t\t).join(' ');\n\t\t\t\t/* eslint-enable max-len */\n\n\t\t\t\treturn this.sendReplyBox('<b><u>Approved Emojis</u></b><br />' + emojiListHtml);\n\t\t\t},\n\t\t\tshowrequests: 'requests',\n\t\t\trequests() {\n\t\t\t\tthis.checkCan('avatar');\n\n\t\t\t\tconst emojiList = Object.entries(emojis)\n\t\t\t\t\t.filter(([userId, emojiStatus]) => emojiStatus.requestedEmoji !== undefined);\n\n\t\t\t\tif (!emojiList.length) {\n\t\t\t\t\treturn this.sendReplyBox('<b><u>Emoji Requests</u></b><br />' + `<div>No requests available.</div>`);\n\t\t\t\t}\n\n\t\t\t\tconst requestListHtml = emojiList.map(\n\t\t\t\t\t([userId, emojiStatus]) => createPendingEmojiRequestHtml(userId, emojiStatus.requestedEmoji || ''),\n\t\t\t\t).join('<br />');\n\n\t\t\t\treturn this.sendReplyBox('<b><u>Emoji Requests</u></b><br />' + requestListHtml);\n\t\t\t},\n\t\t\tapprove(target) {\n\t\t\t\tthis.checkCan('avatar');\n\n\t\t\t\tconst targetId = toID(target);\n\t\t\t\tconst emojiStatus = emojis[targetId];\n\n\t\t\t\tif (!emojiStatus || !emojiStatus.requestedEmoji) {\n\t\t\t\t\treturn this.errorReply(`No emoji request for ${targetId}`);\n\t\t\t\t}\n\n\t\t\t\tupdateEmojiStatus(targetId, {\n\t\t\t\t\temoji: emojiStatus.requestedEmoji,\n\t\t\t\t\trequestedEmoji: undefined,\n\t\t\t\t});\n\n\t\t\t\tFS(`./config/emojis/requests/${emojiStatus.requestedEmoji}`)\n\t\t\t\t\t.renameSync(`./config/emojis/${emojiStatus.requestedEmoji}`);\n\n\t\t\t\tsendPM(`/html <div class=\"infobox\"><div>Emoji approved</div><div>${createRawEmojiHtml(targetId, emojiStatus.requestedEmoji)}</div></div>`, targetId);\n\t\t\t\tremoveEmojiStaffNotificiation(targetId);\n\n\t\t\t\treturn this.sendReplyBox(`<div><div>Approved emoji request of ${targetId}</div><div>${createRawEmojiHtml(targetId, emojiStatus.requestedEmoji)}</div></div>`);\n\t\t\t},\n\t\t\tdeny(target) {\n\t\t\t\tthis.checkCan('avatar');\n\n\t\t\t\tconst targetId = toID(target);\n\t\t\t\tconst emojiStatus = emojis[targetId];\n\n\t\t\t\tif (!emojiStatus || !emojiStatus.requestedEmoji) {\n\t\t\t\t\treturn this.errorReply(`No emoji request for ${targetId}`);\n\t\t\t\t}\n\n\t\t\t\tupdateEmojiStatus(targetId, {\n\t\t\t\t\trequestedEmoji: undefined,\n\t\t\t\t});\n\n\t\t\t\tFS(`./config/emojis/requests/${emojiStatus.requestedEmoji}`).unlinkIfExistsSync();\n\n\t\t\t\tsendPM('Your emoji request was denied.', targetId);\n\t\t\t\tremoveEmojiStaffNotificiation(targetId);\n\n\t\t\t\treturn this.sendReply(`Denied emoji request of ${targetId}`);\n\t\t\t},\n\t\t\tdelete(target, room, user) {\n\t\t\t\tthis.checkCan('avatar');\n\n\t\t\t\tconst targetId = toID(target);\n\t\t\t\tconst emojiStatus = emojis[targetId];\n\n\t\t\t\tif (!emojiStatus || !emojiStatus.emoji) {\n\t\t\t\t\treturn this.errorReply(`No emoji for ${targetId}`);\n\t\t\t\t}\n\n\t\t\t\tupdateEmojiStatus(targetId, {\n\t\t\t\t\temoji: undefined,\n\t\t\t\t});\n\n\t\t\t\tFS(`./config/emojis/${emojiStatus.emoji}`).unlinkIfExistsSync();\n\n\t\t\t\tsendPM('Your emoji was deleted.', targetId);\n\t\t\t\tthis.addGlobalModAction(`${user.name} deleted emoji of ${targetId}`);\n\n\t\t\t\treturn this.sendReply(`Deleted emoji of ${targetId}`);\n\t\t\t},\n\t\t\t'': 'help',\n\t\t\thelp() {\n\t\t\t\treturn this.parse('/help custom emoji');\n\t\t\t},\n\t\t},\n\t\temojihelp() {\n\t\t\tthis.sendReplyBox(\n\t\t\t\t`<code>/custom emoji request [image url]</code>: requests a custom emoji. Requires: custom emoji access<br />` +\n\t\t\t\t`<code>/custom emoji showall</code>: shows all approved emojis. Requires: @ or above<br />` +\n\t\t\t\t`<code>/custom emoji showrequests</code>: shows all un-approved emojis. Requires: @ or above<br />` +\n\t\t\t\t`<code>/custom emoji approve [user]</code>: approves the user's emoji request. Requires: @ or above<br />` +\n\t\t\t\t`<code>/custom emoji deny [user]</code>: denies the user's emoji request. Requires: @ or above<br />`\n\t\t\t);\n\t\t},\n\t\tsticker: {\n\t\t\tasync request(target, room, user) {\n\t\t\t\ttry {\n\t\t\t\t\tconst canHaveSticker = (Config.customsticker?.[user.id] !== undefined) || hasTourWins(STICKER_MINIMUM_TOUR_WINS, user);\n\n\t\t\t\t\tif (!canHaveSticker) {\n\t\t\t\t\t\treturn this.errorReply(STICKER_USER_INELIGIBLE);\n\t\t\t\t\t}\n\n\t\t\t\t\tconst imageUrl = target.trim();\n\t\t\t\t\tconst sticker = await downloadSticker(`custom-${user.id}`, imageUrl, './config/stickers/requests');\n\n\t\t\t\t\tupdateStickerStatus(user.id, {requestedSticker: sticker});\n\t\t\t\t\tnotifyStickerStaff(user.id, sticker);\n\t\t\t\t\treturn this.sendReplyBox(`Requested: ${createRawStickerHtml(user.id, sticker, true)}`);\n\t\t\t\t} catch (error) {\n\t\t\t\t\treturn this.errorReply(STICKER_UNKNOWN_ERROR);\n\t\t\t\t}\n\t\t\t},\n\t\t\tshowall: 'showapproved',\n\t\t\tshowapproved() {\n\t\t\t\tthis.runBroadcast();\n\t\t\t\tthis.checkCan('avatar');\n\n\t\t\t\tconst stickerList = Object.entries(stickers).filter(([userId, stickerStatus]) => stickerStatus.sticker !== undefined);\n\n\t\t\t\tif (!stickerList.length) {\n\t\t\t\t\treturn this.sendReplyBox('<b><u>Approved Stickers</u></b><br /><div>No approved stickers.</div>');\n\t\t\t\t}\n\n\t\t\t\t/* eslint-disable max-len */\n\t\t\t\tconst stickerListHtml = stickerList.map(\n\t\t\t\t\t([\n\t\t\t\t\t\tuserId,\n\t\t\t\t\t\tstickerStatus,\n\t\t\t\t\t]) => `<span style=\"display: inline-block;\"><div>${getUsername(userId)}</div><div>${createRawStickerHtml(userId, stickerStatus.sticker!)}</div></span>`\n\t\t\t\t).join(' ');\n\t\t\t\t/* eslint-enable max-len */\n\n\t\t\t\treturn this.sendReplyBox('<b><u>Approved Stickers</u></b><br />' + stickerListHtml);\n\t\t\t},\n\t\t\tshowrequests: 'requests',\n\t\t\trequests() {\n\t\t\t\tthis.checkCan('avatar');\n\n\t\t\t\tconst stickerList = Object.entries(stickers)\n\t\t\t\t\t.filter(([userId, stickerStatus]) => stickerStatus.requestedSticker !== undefined);\n\n\t\t\t\tif (!stickerList.length) {\n\t\t\t\t\treturn this.sendReplyBox('<b><u>Sticker Requests</u></b><br />' + `<div>No requests available.</div>`);\n\t\t\t\t}\n\n\t\t\t\tconst requestListHtml = stickerList.map(\n\t\t\t\t\t([userId, stickerStatus]) => createPendingStickerRequestHtml(userId, stickerStatus.requestedSticker!),\n\t\t\t\t).join('<br />');\n\n\t\t\t\treturn this.sendReplyBox('<b><u>Sticker Requests</u></b><br />' + requestListHtml);\n\t\t\t},\n\t\t\tapprove(target) {\n\t\t\t\tthis.checkCan('avatar');\n\n\t\t\t\tconst targetId = toID(target);\n\t\t\t\tconst stickerStatus = stickers[targetId];\n\n\t\t\t\tif (!stickerStatus || !stickerStatus.requestedSticker) {\n\t\t\t\t\treturn this.errorReply(`No sticker request for ${targetId}`);\n\t\t\t\t}\n\n\t\t\t\tupdateStickerStatus(targetId, {\n\t\t\t\t\tsticker: stickerStatus.requestedSticker,\n\t\t\t\t\trequestedSticker: undefined,\n\t\t\t\t});\n\n\t\t\t\tFS(`./config/stickers/requests/${stickerStatus.requestedSticker}`)\n\t\t\t\t\t.renameSync(`./config/stickers/${stickerStatus.requestedSticker}`);\n\n\t\t\t\tsendPM(`/html <div class=\"infobox\"><div>Sticker approved</div><div>${createRawStickerHtml(targetId, stickerStatus.requestedSticker)}</div></div>`, targetId);\n\t\t\t\tremoveStickerStaffNotificiation(targetId);\n\n\t\t\t\treturn this.sendReplyBox(`<div><div>Approved sticker request of ${targetId}</div><div>${createRawStickerHtml(targetId, stickerStatus.requestedSticker)}</div></div>`);\n\t\t\t},\n\t\t\tdeny(target) {\n\t\t\t\tthis.checkCan('avatar');\n\n\t\t\t\tconst targetId = toID(target);\n\t\t\t\tconst stickerStatus = stickers[targetId];\n\n\t\t\t\tif (!stickerStatus || !stickerStatus.requestedSticker) {\n\t\t\t\t\treturn this.errorReply(`No sticker request for ${targetId}`);\n\t\t\t\t}\n\n\t\t\t\tupdateStickerStatus(targetId, {\n\t\t\t\t\trequestedSticker: undefined,\n\t\t\t\t});\n\n\t\t\t\tFS(`./config/stickers/requests/${stickerStatus.requestedSticker}`).unlinkIfExistsSync();\n\n\t\t\t\tsendPM('Your sticker request was denied.', targetId);\n\t\t\t\tremoveStickerStaffNotificiation(targetId);\n\n\t\t\t\treturn this.sendReply(`Denied sticker request of ${targetId}`);\n\t\t\t},\n\t\t\tdelete(target, room, user) {\n\t\t\t\tthis.checkCan('avatar');\n\n\t\t\t\tconst targetId = toID(target);\n\t\t\t\tconst stickerStatus = stickers[targetId];\n\n\t\t\t\tif (!stickerStatus || !stickerStatus.sticker) {\n\t\t\t\t\treturn this.errorReply(`No sticker for ${targetId}`);\n\t\t\t\t}\n\n\t\t\t\tupdateStickerStatus(targetId, {\n\t\t\t\t\tsticker: undefined,\n\t\t\t\t});\n\n\t\t\t\tFS(`./config/stickers/${stickerStatus.sticker}`).unlinkIfExistsSync();\n\n\t\t\t\tsendPM('Your sticker was deleted.', targetId);\n\t\t\t\tthis.addGlobalModAction(`${user.name} deleted sticker of ${targetId}`);\n\n\t\t\t\treturn this.sendReply(`Deleted sticker of ${targetId}`);\n\t\t\t},\n\t\t\t'': 'help',\n\t\t\thelp() {\n\t\t\t\treturn this.parse('/help custom sticker');\n\t\t\t},\n\t\t},\n\t\tstickerhelp() {\n\t\t\tthis.sendReplyBox(\n\t\t\t\t`<code>/custom sticker request [image url]</code>: requests a custom sticker. Requires: custom sticker access<br />` +\n\t\t\t\t`<code>/custom sticker showall</code>: shows all approved stickers. Requires: @ or above<br />` +\n\t\t\t\t`<code>/custom sticker showrequests</code>: shows all un-approved stickers. Requires: @ or above<br />` +\n\t\t\t\t`<code>/custom sticker approve [user]</code>: approves the user's sticker request. Requires: @ or above<br />` +\n\t\t\t\t`<code>/custom sticker deny [user]</code>: denies the user's sticker request. Requires: @ or above<br />` +\n\t\t\t\t`<code>/cgif</code>: Use your sticker if you have one. Requires: custom sticker access`\n\t\t\t);\n\t\t},\n\t\ttitle: {\n\t\t\tset(target, room, user) {\n\t\t\t\tconst canHaveTitle = (Config.customtitle?.[user.id] !== undefined) || hasTourWins(TITLE_MINIMUM_TOUR_WINS, user);\n\n\t\t\t\tif (!canHaveTitle) {\n\t\t\t\t\treturn this.errorReply(TITLE_USER_INELIGIBLE);\n\t\t\t\t}\n\n\t\t\t\tconst title = formatTitle(target);\n\t\t\t\tif (title.length < 1 || title.length > 18) return this.errorReply(TITLE_INVALID);\n\n\t\t\t\ttitles[user.id] = {title};\n\t\t\t\tsaveTitles();\n\n\t\t\t\tthis.sendReply(`|raw| Your title was successfully set. Log in again for it to appear. Title: ${title}`);\n\t\t\t},\n\t\t\tunset(target, room, user) {\n\t\t\t\tif (!titles[user.id]) return this.errorReply(TITLE_USER_UNSET);\n\n\t\t\t\tdelete titles[user.id];\n\t\t\t\tsaveTitles();\n\n\t\t\t\tthis.sendReply('|raw| Your title was successfully unset. Log in again for it to disappear.');\n\t\t\t},\n\t\t\t'': 'help',\n\t\t\thelp() {\n\t\t\t\treturn this.parse('/help custom title');\n\t\t\t},\n\t\t},\n\t\ttitlehelp() {\n\t\t\tthis.sendReplyBox(\n\t\t\t\t`<code>/custom title set [title]</code>: sets your title to the desired text.<br />` +\n\t\t\t\t`<code>/custom title unset</code>: removes your title.`\n\t\t\t);\n\t\t},\n\t\tflair: {\n\t\t\tasync set(target, room, user) {\n\t\t\t\tconst canHaveFlair = (Config.customflair?.[user.id] !== undefined) || hasTourWins(FLAIR_MINIMUM_TOUR_WINS, user);\n\n\t\t\t\tif (!canHaveFlair) {\n\t\t\t\t\treturn this.errorReply(FLAIR_USER_INELIGIBLE);\n\t\t\t\t}\n\n\t\t\t\tconst [pokemon, pokemonMod, heightInput] = target.split(',').map((s) => s.trim());\n\t\t\t\tconst flairUrl = getFlairUrl(pokemon, toID(pokemonMod));\n\n\t\t\t\tlet heightOffset = parseInt(heightInput);\n\n\t\t\t\tif (Number.isNaN(heightOffset)) {\n\t\t\t\t\theightOffset = defaultHeight;\n\t\t\t\t} else if (Math.abs(heightOffset) > maxHeightChange) {\n\t\t\t\t\theightOffset = defaultHeight;\n\t\t\t\t} else {\n\t\t\t\t\theightOffset = defaultHeight + Math.trunc(heightOffset);\n\t\t\t\t}\n\n\t\t\t\ttry {\n\t\t\t\t\tawait Net(flairUrl).get();\n\t\t\t\t} catch (e) {\n\t\t\t\t\treturn this.errorReply(getInvalidFlairErrorMessage(pokemonMod, pokemon));\n\t\t\t\t}\n\n\t\t\t\tflairs[user.id] = {pokemonId: pokemon, pokemonMod: toID(pokemonMod), heightOffset};\n\t\t\t\tsaveFlairs();\n\n\t\t\t\tthis.sendReply(\"|raw| Your flair was successfully set. It may take a while for it to show up. Flair:<br /><img src='\" + flairUrl + \"' width='40' height='30'>\");\n\t\t\t},\n\t\t\tunset(target, room, user) {\n\t\t\t\tif (!flairs[user.id]) return this.errorReply(FLAIR_USER_UNSET);\n\n\t\t\t\tdelete flairs[user.id];\n\t\t\t\tsaveFlairs();\n\n\t\t\t\tthis.sendReply('|raw| Your flair was successfully unset. It may take a while for it to dissapear.');\n\t\t\t},\n\t\t\t'': 'help',\n\t\t\thelp() {\n\t\t\t\treturn this.parse('/help custom flair');\n\t\t\t},\n\t\t},\n\t\tflairhelp() {\n\t\t\tthis.sendReplyBox(\n\t\t\t\t`<code>/custom flair set [pokemon], [mod], [heightOffset]</code>: sets your flair to the desired pokemon from the specified mod (pokemon or clover) with an optional height adjustment.<br />` +\n\t\t\t\t`<code>/custom flair unset</code>: removes your flair.`\n\t\t\t);\n\t\t},\n\t\tcolor: {\n\t\t\tasync set(target, room, user) {\n\t\t\t\tconst canHaveFlair = (Config.customnamecolor?.[user.id] !== undefined) || hasTourWins(NAME_COLOR_MINIMUM_TOUR_WINS, user);\n\n\t\t\t\tif (!canHaveFlair) return this.errorReply(NAME_COLOR_USER_INELIGIBLE);\n\n\t\t\t\tconst targetId = toID(target);\n\t\t\t\tif (!targetId || targetId.length > 18) {\n\t\t\t\t\treturn this.errorReply(NAME_COLOR_INVALID);\n\t\t\t\t}\n\n\t\t\t\tconst [res, error] = await LoginServer.request('updatenamecolor', {\n\t\t\t\t\tuserid: user.id,\n\t\t\t\t\tsource: targetId,\n\t\t\t\t\tby: user.id,\n\t\t\t\t});\n\n\t\t\t\tif (error || !res || res.actionerror) {\n\t\t\t\t\treturn this.errorReply('Unknown error setting custom name color. Please contact an administrator if this persists.');\n\t\t\t\t}\n\n\t\t\t\treturn this.sendReply(`|raw| <username>${user.id}</username> was set to match <username>${targetId}</username>. It may take a while for it to show up.`);\n\t\t\t},\n\t\t\tasync unset(target, room, user) {\n\t\t\t\tconst [res, error] = await LoginServer.request('updatenamecolor', {\n\t\t\t\t\tuserid: user.id,\n\t\t\t\t\tsource: '',\n\t\t\t\t\tby: user.id,\n\t\t\t\t});\n\n\t\t\t\tif (error || !res || res.actionerror) {\n\t\t\t\t\treturn this.errorReply('Unknown error unsetting custom name color. Please contact an administrator if this persists.');\n\t\t\t\t}\n\n\t\t\t\treturn this.sendReply('|raw| Your custon name color was successfully unset. It may take a while for it to dissapear.');\n\t\t\t},\n\t\t\t'': 'help',\n\t\t\thelp() {\n\t\t\t\treturn this.parse('/help custom color');\n\t\t\t},\n\t\t},\n\t\tcolorhelp() {\n\t\t\tthis.sendReplyBox(\n\t\t\t\t`<code>/custom color set [username]</code>: sets your user color to match the specified user's color.<br />` +\n\t\t\t\t`<code>/custom color unset</code>: removes your user color.`\n\t\t\t);\n\t\t},\n\t\tbg: 'background',\n\t\tbackgrounds: 'background',\n\t\tbackground: {\n\t\t\tset(target, room, user) {\n\t\t\t\tconst canHaveBackground = (Config.custombackground?.[user.id] !== undefined) || hasTourWins(BACKGROUND_MINIMUM_TOUR_WINS, user);\n\n\t\t\t\tif (!canHaveBackground) {\n\t\t\t\t\treturn this.errorReply(BACKGROUND_USER_INELIGIBLE);\n\t\t\t\t}\n\n\t\t\t\tconst color = parseColor(target.trim());\n\n\t\t\t\tif (!color.rgb) return this.errorReply(BACKGROUND_INVALID);\n\n\t\t\t\tbackgrounds[user.id] = {\n\t\t\t\t\tr: color.rgb[0],\n\t\t\t\t\tg: color.rgb[1],\n\t\t\t\t\tb: color.rgb[2],\n\t\t\t\t};\n\t\t\t\tsaveBackgrounds();\n\n\t\t\t\tthis.sendReply(\"|raw| Your background was successfully set. It may take a while for it to show up.\");\n\t\t\t},\n\t\t\tunset(target, room, user) {\n\t\t\t\tif (!backgrounds[user.id]) return this.errorReply(BACKGROUND_USER_UNSET);\n\n\t\t\t\tdelete backgrounds[user.id];\n\t\t\t\tsaveBackgrounds();\n\n\t\t\t\tthis.sendReply('|raw| Your background was successfully unset. It may take a while for it to dissapear.');\n\t\t\t},\n\t\t\t'': 'help',\n\t\t\thelp() {\n\t\t\t\treturn this.parse('/help custom background');\n\t\t\t},\n\t\t},\n\t\tbackgroundhelp() {\n\t\t\tthis.sendReplyBox(\n\t\t\t\t`<code>/custom background set [hex color]</code>: sets your user background color to the specified color.<br />` +\n\t\t\t\t`<code>/custom background unset</code>: removes your user background color.`\n\t\t\t);\n\t\t},\n\t\t'': 'help',\n\t\thelp() {\n\t\t\treturn this.parse('/help custom');\n\t\t},\n\t\tchatbg: 'background',\n\t\tchatbackgrounds: 'chatbackground',\n\t\tchatbackground: {\n\t\t\tset(target, room, user) {\n\t\t\t\tconst canHaveBackground = (Config.custombackground?.[user.id] !== undefined) || hasTourWins(CHAT_BACKGROUND_MINIMUM_TOUR_WINS, user);\n\n\t\t\t\tif (!canHaveBackground) {\n\t\t\t\t\treturn this.errorReply(CHAT_BACKGROUND_USER_INELIGIBLE);\n\t\t\t\t}\n\n\t\t\t\tconst color = parseColor(target.trim());\n\n\t\t\t\tif (!color.rgb) return this.errorReply(CHAT_BACKGROUND_INVALID);\n\n\t\t\t\tchatBackgrounds[user.id] = {\n\t\t\t\t\tr: color.rgb[0],\n\t\t\t\t\tg: color.rgb[1],\n\t\t\t\t\tb: color.rgb[2],\n\t\t\t\t};\n\t\t\t\tsaveChatBackgrounds();\n\n\t\t\t\tthis.sendReply(\"|raw| Your chat background was successfully set. It may take a while for it to show up.\");\n\t\t\t},\n\t\t\tunset(target, room, user) {\n\t\t\t\tif (!chatBackgrounds[user.id]) return this.errorReply(CHAT_BACKGROUND_USER_UNSET);\n\n\t\t\t\tdelete chatBackgrounds[user.id];\n\t\t\t\tsaveChatBackgrounds();\n\n\t\t\t\tthis.sendReply('|raw| Your chat background was successfully unset. It may take a while for it to dissapear.');\n\t\t\t},\n\t\t\t'': 'help',\n\t\t\thelp() {\n\t\t\t\treturn this.parse('/help custom chatbackground');\n\t\t\t},\n\t\t},\n\t\tchatbackgroundhelp() {\n\t\t\tthis.sendReplyBox(\n\t\t\t\t`<code>/custom chatbackground set [hex color]</code>: sets your user chat background color to the specified color.<br />` +\n\t\t\t\t`<code>/custom chatbackground unset</code>: removes your user chat background color.`\n\t\t\t);\n\t\t},\n\t},\n\tcustomhelp() {\n\t\tthis.sendReplyBox(\n\t\t\t`<code>/custom avatar</code>: commands related to custom avatars. Try <code>/help custom avatar</code> for details. ${AVATAR_MINIMUM_TOUR_WINS} or more tour wins required to use.<br />` +\n\t\t\t`<code>/custom title</code>: commands related to custom titles. Try <code>/help custom title</code> for details. ${TITLE_MINIMUM_TOUR_WINS} or more tour wins required to use.<br />` +\n\t\t\t`<code>/custom flair</code>: commands related to custom flairs. Try <code>/help custom flair</code> for details. ${FLAIR_MINIMUM_TOUR_WINS} or more tour wins required to use.<br />` +\n\t\t\t`<code>/custom color</code>: commands related to custom user colors. Try <code>/help custom color</code> for details. ${NAME_COLOR_MINIMUM_TOUR_WINS}C or more tour wins required to use.<br />` +\n\t\t\t`<code>/custom background</code>: commands related to custom background colors. Try <code>/help custom background</code> for details. ${BACKGROUND_MINIMUM_TOUR_WINS} or more tour wins required to use.<br />` +\n\t\t\t`<code>/custom chatbackground</code>: commands related to custom chat background colors. Try <code>/help custom chatbackground</code> for details. ${CHAT_BACKGROUND_MINIMUM_TOUR_WINS} or more tour wins required to use.<br />` +\n\t\t\t`<code>/custom emoji</code>: commands related to custom emojis. Try <code>/help custom emoji</code> for details. ${EMOJI_MINIMUM_TOUR_WINS} or more tour wins required to use.<br />` +\n\t\t\t`<code>/custom sticker</code>: commands related to custom stickers. Try <code>/help custom sticker</code> for details. ${STICKER_MINIMUM_TOUR_WINS} or more tour wins required to use.`\n\t\t);\n\t},\n};\n\nexport const loginfilter: Chat.LoginFilter = user => {\n\tconst title = titles[user.id];\n\tif (title) {\n\t\tuser.customgroup = title.title;\n\t}\n\n\tconst avatar = avatars[user.id];\n\tif (avatar && avatar.enabled && avatar.avatar) {\n\t\tuser.avatar = avatar.avatar;\n\t}\n};\n\nconst customEmojiRegex = /:!:/g;\n\nexport const chatfilter: Chat.ChatFilter = (message, user, room) => {\n\tif (room && !checkEmojiLevel(user, room)) return message;\n\tconst emojiStatus = emojis[user.id];\n\tif (!Punishments.hasPunishType(user.id, 'EMOJIBAN') && emojiStatus && emojiStatus.emoji && customEmojiRegex.test(message)) {\n\t\tconst prefix = message.startsWith('/html') ? '' : '/html ';\n\t\treturn prefix + escapeHTML(message).replace(customEmojiRegex, createEmojiHtml(`custom-${user.id}`, emojiStatus.emoji || ''));\n\t}\n\treturn message;\n};\n"],
  "mappings": "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",
  "names": ["parseColor"]
}
