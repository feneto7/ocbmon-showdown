{
  "version": 3,
  "sources": ["../../../server/chat-plugins/data-badges.ts"],
  "sourcesContent": ["import {REST, Routes} from 'discord.js';\r\nimport {FS} from '../../lib';\r\nimport {Badges} from './badges';\r\n\r\nconst DISCORD_BOT_ID = \"mrsablebot\"; // TODO: Make this configurable\r\nconst DISCORD_BADGE_ID = \"discord\";\r\nconst MINIMUM_TOURS_REQUIRED = 4;\r\nconst TOUR_BADGE_ID = \"tourfarmer\";\r\nconst OTHER_BADGES: [number, string][] = [\r\n\t[1, \"tournamentwinner\"],\r\n\t[2, \"2tournamentwinner\"],\r\n\t[3, \"3tournamentwinner\"],\r\n];\r\n\r\ninterface Data {\r\n\ttours: Record<string, number>;\r\n\tdiscord: Record<string, string>;\r\n}\r\n\r\nconst defaultData: Data = {\r\n\ttours: {},\r\n\tdiscord: {},\r\n};\r\n\r\nconst data: Data = JSON.parse(\r\n\tFS('config/chat-plugins/data-badges.json').readIfExistsSync() || JSON.stringify(defaultData),\r\n);\r\n\r\nconst saveData = () => {\r\n\tFS('config/chat-plugins/data-badges.json').writeUpdate(() => JSON.stringify(data));\r\n};\r\n\r\nconst checkBadgesEnabled = () => {\r\n\tif (!Config.usesqlitebadges) {\r\n\t\tthrow new Chat.ErrorMessage(`The badges feature is currently disabled.`);\r\n\t}\r\n};\r\n\r\nconst checkCanUpdateTours = (user: User) => Badges.canManageBadge(user.id, TOUR_BADGE_ID);\r\n\r\nexport const getTourWins = (userID: string) => data.tours[userID] || 0;\r\n\r\nconst changeTourWins = (userID: string, func: (previousWins: number) => number) => {\r\n\tif (!data.tours[userID]) data.tours[userID] = 0;\r\n\r\n\tdata.tours[userID] = func(data.tours[userID]);\r\n\tsaveData();\r\n\r\n\treturn data.tours[userID];\r\n};\r\n\r\nconst checkTourThreshold = async (userID: string, user: User) => {\r\n\tconst userTourWins = getTourWins(userID);\r\n\r\n\ttry {\r\n\t\tawait Promise.all(OTHER_BADGES.map(async ([threshold, badgeId]) => {\r\n\t\t\tif (userTourWins >= threshold) {\r\n\t\t\t\tawait Badges.addBadgeToUser(userID, badgeId, user, true);\r\n\t\t\t}\r\n\t\t}));\r\n\t} catch (e) { }\r\n\r\n\tif (userTourWins >= MINIMUM_TOURS_REQUIRED) {\r\n\t\ttry {\r\n\t\t\ttry {\r\n\t\t\t\tawait Badges.addBadgeToUser(userID, TOUR_BADGE_ID, user, true);\r\n\t\t\t} catch (e) { }\r\n\r\n\t\t\tawait Badges.updateBadgeData(userID, TOUR_BADGE_ID, {wins: userTourWins}, user, true);\r\n\t\t} catch (e) { return false; }\r\n\r\n\t\treturn true;\r\n\t}\r\n\r\n\treturn false;\r\n};\r\n\r\nconst addDiscordBadge = async (user: User, username: string) => {\r\n\ttry {\r\n\t\ttry {\r\n\t\t\tawait Badges.addBadgeToUser(user.id, DISCORD_BADGE_ID, user, true);\r\n\t\t} catch (e) { }\r\n\r\n\t\tawait Badges.updateBadgeData(user.id, DISCORD_BADGE_ID, {username}, user, true);\r\n\t} catch (e) { return false; }\r\n\r\n\treturn true;\r\n};\r\n\r\nexport const transferTourWins = async (oldUser: string, newUser: string, user: User) => {\r\n\tconst oldTourWins = getTourWins(toID(oldUser));\r\n\tchangeTourWins(toID(newUser), () => oldTourWins);\r\n\tchangeTourWins(toID(oldUser), () => 0);\r\n\tawait checkTourThreshold(toID(newUser), user);\r\n\tawait checkTourThreshold(toID(oldUser), user);\r\n};\r\n\r\nconst createLeaderboardHtml = (data: Data) => {\r\n\tlet leaderboardHtml = '<table>';\r\n\tlet entries = Object.entries(data.tours);\r\n\tentries.sort((a, b) => b[1] - a[1]);\r\n\tentries = entries.slice(0, 50);\r\n\tentries.forEach(([userId, wins], index) => {\r\n\t\tleaderboardHtml += '<tr>';\r\n\t\tleaderboardHtml += `<td>#${index + 1} ${userId}: ${wins} wins</td>`;\r\n\t\tleaderboardHtml += '</tr>';\r\n\t});\r\n\tleaderboardHtml += '</table>';\r\n\r\n\treturn leaderboardHtml;\r\n};\r\n\r\nexport const commands: Chat.ChatCommands = {\r\n\tdbadge: 'databadge',\r\n\tdatabadge: {\r\n\t\ttour: 'tournament',\r\n\t\ttours: 'tournament',\r\n\t\ttournament: {\r\n\t\t\tleaderboard(target) {\r\n\t\t\t\tthis.runBroadcast();\r\n\t\t\t\tcheckBadgesEnabled();\r\n\r\n\t\t\t\treturn this.sendReplyBox('<b><u>Tour Win Leaderboard</u></b><br />' + createLeaderboardHtml(data));\r\n\t\t\t},\r\n\t\t\tget(target, room, user) {\r\n\t\t\t\tcheckBadgesEnabled();\r\n\r\n\t\t\t\tconst userID = toID(target);\r\n\t\t\t\tconst tourWins = getTourWins(userID);\r\n\r\n\t\t\t\treturn this.sendReplyBox(`User ${userID} has ${tourWins} wins.`);\r\n\t\t\t},\r\n\t\t\tasync set(target, room, user) {\r\n\t\t\t\tcheckBadgesEnabled();\r\n\t\t\t\tawait checkCanUpdateTours(user);\r\n\r\n\t\t\t\tconst [rawUserID, rawValue] = target.split(',');\r\n\t\t\t\tconst userID = toID(rawUserID);\r\n\t\t\t\tconst value = parseInt(toID(rawValue));\r\n\r\n\t\t\t\tif (Number.isNaN(value)) {\r\n\t\t\t\t\tthrow new Chat.ErrorMessage(`Invalid tour amount ${value} specified.`);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconst newTourWins = changeTourWins(userID, () => value);\r\n\t\t\t\tconst receivedBadge = await checkTourThreshold(userID, user);\r\n\r\n\t\t\t\tthis.addGlobalModAction(`${user.name} added set ${userID} to ${newTourWins} tour wins.`);\r\n\t\t\t\treturn this.sendReplyBox(`User ${userID} has ${newTourWins} wins.${receivedBadge ? ` They have been granted the ${TOUR_BADGE_ID} badge.` : ''}`);\r\n\t\t\t},\r\n\t\t\tadd: 'increment',\r\n\t\t\tasync increment(target, room, user) {\r\n\t\t\t\tcheckBadgesEnabled();\r\n\t\t\t\tawait checkCanUpdateTours(user);\r\n\r\n\t\t\t\tconst userID = toID(target);\r\n\r\n\t\t\t\tconst newTourWins = changeTourWins(userID, (previousValue) => previousValue + 1);\r\n\t\t\t\tconst receivedBadge = await checkTourThreshold(userID, user);\r\n\r\n\t\t\t\tthis.addGlobalModAction(`${user.name} has added 1 tour win to ${userID} (${newTourWins} total wins)`);\r\n\t\t\t\treturn this.sendReplyBox(`User ${userID} has ${newTourWins} wins.${receivedBadge ? ` They have been granted the ${TOUR_BADGE_ID} badge.` : ''}`);\r\n\t\t\t},\r\n\t\t\tremove: 'decrement',\r\n\t\t\tasync decrement(target, room, user) {\r\n\t\t\t\tcheckBadgesEnabled();\r\n\t\t\t\tawait checkCanUpdateTours(user);\r\n\r\n\t\t\t\tconst userID = toID(target);\r\n\r\n\t\t\t\tconst newTourWins = changeTourWins(userID, (previousValue) => previousValue - 1);\r\n\t\t\t\tconst receivedBadge = await checkTourThreshold(userID, user);\r\n\r\n\t\t\t\tthis.addGlobalModAction(`${user.name} has removed 1 tour win from ${userID} (${newTourWins} total wins)`);\r\n\t\t\t\treturn this.sendReplyBox(`User ${userID} has ${newTourWins} wins.${receivedBadge ? ` They have been granted the ${TOUR_BADGE_ID} badge.` : ''}`);\r\n\t\t\t},\r\n\t\t},\r\n\t\ttourhelp: 'tournamenthelp',\r\n\t\ttourshelp: 'tournamenthelp',\r\n\t\ttournamenthelp() {\r\n\t\t\tthis.sendReplyBox(\r\n\t\t\t\t`<code>/databadge tours get [user id]</code>: checks how many tour wins a user has.<br />` +\r\n\t\t\t\t`<code>/databadge tours set [user id]</code>: sets how many tour wins a user has. Requires: ${TOUR_BADGE_ID} badge ownership<br />` +\r\n\t\t\t\t`<code>/databadge tours add [user id]</code>: adds a tour win to a user. Requires: ${TOUR_BADGE_ID} badge ownership<br />` +\r\n\t\t\t\t`<code>/databadge tours remove [user id]</code>: checks how many tour wins a user has. Requires: ${TOUR_BADGE_ID} badge ownership<br />`\r\n\t\t\t);\r\n\t\t},\r\n\t\tdiscord: {\r\n\t\t\tasync activate(target, room, user) {\r\n\t\t\t\tif (!Config.discord) throw new Chat.ErrorMessage('Discord functionality is not enabled.');\r\n\r\n\t\t\t\tconst discordId = data.discord[user.id];\r\n\r\n\t\t\t\tif (!discordId) throw new Chat.ErrorMessage('You have no linked Discord id.');\r\n\r\n\t\t\t\tconst rest = new REST().setToken(Config.discord);\r\n\t\t\t\tconst discordUser = await rest.get(Routes.user(discordId)) as any;\r\n\t\t\t\tconst username = discordUser.discriminator === '0' ?\r\n\t\t\t\t\tdiscordUser.username : `${discordUser.username}#${discordUser.discriminator}`;\r\n\r\n\t\t\t\tconst success = await addDiscordBadge(user, username);\r\n\t\t\t\tif (!success) throw new Chat.ErrorMessage('An error has occurred.');\r\n\r\n\t\t\t\treturn this.sendReplyBox('Your Discord badge has been activated and updated.');\r\n\t\t\t},\r\n\t\t\tget(target, room, user) {\r\n\t\t\t\tconst discordId = data.discord[user.id];\r\n\t\t\t\tif (!discordId) throw new Chat.ErrorMessage('You have no linked Discord id.');\r\n\r\n\t\t\t\treturn this.sendReplyBox(`Your linked Discord id is ${discordId}`);\r\n\t\t\t},\r\n\t\t\tset(target, room, user) {\r\n\t\t\t\tif (user.id !== DISCORD_BOT_ID) throw new Chat.ErrorMessage('You do not have permission to manage this.');\r\n\r\n\t\t\t\tconst [userId, discordId] = target.split(',').map(toID);\r\n\t\t\t\tdata.discord[userId] = discordId;\r\n\t\t\t\tsaveData();\r\n\r\n\t\t\t\treturn this.sendReplyBox(`User ${userId} has newly associated Discord id ${discordId}`);\r\n\t\t\t},\r\n\t\t},\r\n\t},\r\n};\r\n"],
  "mappings": "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",
  "names": ["data"]
}
