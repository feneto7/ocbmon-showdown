{
  "version": 3,
  "sources": ["../../../server/chat-plugins/draft.ts"],
  "sourcesContent": ["/**\r\n * Draft plugin.\r\n * Allows for creating drafts.\r\n * @author MrSableye\r\n */\r\nimport {Badge, UpdateableBadgeAttribute, UserBadge, UserManagedBadge} from '../badges';\r\nimport {FS, Utils} from '../../lib';\r\nimport Axios from 'axios';\r\nimport probe from 'probe-image-size';\r\nimport {URL} from 'url';\r\n\r\ninterface DraftPick {\r\n\tid: string;\r\n\tcost: number;\r\n}\r\n\r\ninterface DraftOption extends DraftPick {\r\n\tquantityRemaining: number;\r\n}\r\n\r\ninterface DraftPlayer {\r\n\tuserId: string;\r\n\tpicks: DraftPick[];\r\n}\r\n\r\ninterface DraftHistory {\r\n\r\n}\r\n\r\ntype DraftStatus = 'STOPPED' | 'STARTED';\r\n\r\ninterface Draft {\r\n\tname: string;\r\n\tformatId: string;\r\n\tbudget: number;\r\n\tadminId: string;\r\n\tinviteOnly: boolean;\r\n\tdraftChannelId?: string;\r\n\tplayers: Record<string, DraftPlayer>;\r\n\tplayerOrder: string[];\r\n\tpool: DraftOption[];\r\n\thistory: DraftHistory[];\r\n\tstatus: DraftStatus;\r\n}\r\n\r\nconst DRAFT_PATH = 'config/chat-plugins/drafts.json';\r\n\r\nexport const drafts: Record<string, Draft> = JSON.parse(\r\n\tFS(DRAFT_PATH).readIfExistsSync() || \"{}\"\r\n);\r\n\r\nconst saveDrafts = () => {\r\n\tFS(DRAFT_PATH).writeUpdate(() => JSON.stringify(drafts));\r\n};\r\n\r\nconst nameRegex = /^[A-Za-z0-9 \"'()]+$/;\r\nconst nameTemplateRegex = /^[A-Za-z0-9 \"'(){}]+$/;\r\n\r\nconst ERROR_BADGE_FEATURE_DISABLED = 'The badges feature is currently disabled.';\r\nconst ERROR_USER_LOCKED = 'You are locked, and so cannot use the badges feature.';\r\nconst ERROR_USER_NOT_REGISTERED = 'You must be registered to use the badges feature.';\r\n\r\nconst ERROR_INVALID_IMAGE = 'Invalid image. Please provide a URL linking to a 16x16 GIF or PNG.';\r\nconst ERROR_WRITING_IMAGE = 'Unable to write image. Please try again or contact an administrator.';\r\n\r\nconst ERROR_NO_BADGE_ID = 'Specify a badge ID.';\r\nconst ERROR_NO_BADGE_DESCRIPTION = 'Specify a badge description.';\r\nconst ERROR_INVALID_BADGE_DESCRIPTION = `A badge description can only contain a-z, A-Z, 0-9, ', \", (, ), and spaces.`;\r\nconst ERROR_INVALID_BADGE_NAME_TEMPLATE = `A badge description can only contain a-z, A-Z, 0-9, ', \", (, ), {, }, and spaces.`;\r\nconst ERROR_NO_BADGE_MANAGER = 'Specify a manager.';\r\nconst ERROR_NO_BADGE_IMAGE_URL = 'Specify an image URL.';\r\nconst ERROR_NO_USER_ID = 'Specify a user.';\r\nconst ERROR_NO_BADGE_PRIORITY = 'Specify a priority.';\r\nconst ERROR_NON_NUMERIC_BADGE_PRIORITY = 'Specify a numeric priority.';\r\nconst ERROR_NON_INTEGER_BADGE_PRIORITY = 'Specify an integer priority.';\r\nconst ERROR_INVALID_JSON = 'Specify valid JSON.';\r\n\r\nfunction toLink(buf: string) {\r\n\treturn buf.replace(/<a roomid=\"/g, `<a target=\"replace\" href=\"/`);\r\n}\r\n\r\nexport const Drafts = new class {\r\n\tcanCreateDraft(context: Chat.CommandContext | Chat.PageContext) {\r\n\t\tcontext.checkCan('draft');\r\n\t}\r\n\r\n\tvalidateName(draftName: string) {\r\n\t\tconst id = toID(draftName);\r\n\r\n\t\tif (drafts[id]) {\r\n\t\t\tthrow new Chat.ErrorMessage(`Draft \"${draftName}\" already exists.`);\r\n\t\t}\r\n\r\n\t\treturn draftName;\r\n\t}\r\n\r\n\tvalidateFormat(formatName: string) {\r\n\t\tconst format = Dex.formats.get(formatName);\r\n\r\n\t\tif (!format.exists) {\r\n\t\t\tthrow new Chat.ErrorMessage(`Format \"${formatName}\" does not exist. Please select a valid format.`);\r\n\t\t}\r\n\r\n\t\tif (format.team) {\r\n\t\t\tthrow new Chat.ErrorMessage(`Format \"${format.id}\" is not a teambuilder format.`);\r\n\t\t}\r\n\r\n\t\treturn format.id;\r\n\t}\r\n\r\n\tvalidateBudget(value: string) {\r\n\t\tconst numericValue = parseInt(value, 10);\r\n\r\n\t\tif (Number.isNaN(numericValue)) {\r\n\t\t\tthrow new Chat.ErrorMessage(`Budget \"${value}\" is not a valid number.`);\r\n\t\t}\r\n\r\n\t\tif (!Number.isFinite(numericValue)) {\r\n\t\t\tthrow new Chat.ErrorMessage(`Budget \"${value}\" must be a finite number.`);\r\n\t\t}\r\n\r\n\t\tif (numericValue <= 0) {\r\n\t\t\tthrow new Chat.ErrorMessage(`Budget \"${value}\" must be a positive number.`);\r\n\t\t}\r\n\r\n\t\treturn numericValue;\r\n\t}\r\n\r\n\tcreateDraft(\r\n\t\tcontext: Chat.CommandContext | Chat.PageContext,\r\n\t\tuser: User,\r\n\t\tnameInput: string,\r\n\t\tformatInput: string,\r\n\t\tbudgetInput: string,\r\n\t\tinviteOnlyInput: string,\r\n\t) {\r\n\t\tthis.canCreateDraft(context);\r\n\r\n\t\tconst name = this.validateName(nameInput);\r\n\t\tconst formatId = this.validateFormat(formatInput);\r\n\t\tconst budget = this.validateBudget(budgetInput);\r\n\t\tconst inviteOnly = context.meansYes(inviteOnlyInput);\r\n\r\n\t\tconst draft: Draft = {\r\n\t\t\tname,\r\n\t\t\tformatId,\r\n\t\t\tbudget,\r\n\t\t\tadminId: user.id,\r\n\t\t\tinviteOnly,\r\n\t\t\tplayers: {},\r\n\t\t\tplayerOrder: [],\r\n\t\t\tpool: [],\r\n\t\t\thistory: [],\r\n\t\t\tstatus: 'STOPPED',\r\n\t\t};\r\n\r\n\t\tdrafts[toID(name)] = draft;\r\n\t\tsaveDrafts();\r\n\t}\r\n\r\n\tgetDraft(draftName: string, throwError = false) {\r\n\t\tconst draftId = toID(draftName);\r\n\t\tconst draft = drafts[draftId];\r\n\r\n\t\tif (throwError && !draft) {\r\n\t\t\tthrow new Chat.ErrorMessage(`Draft \"${draftName}\" does not exist.`);\r\n\t\t}\r\n\r\n\t\treturn drafts[draftId];\r\n\t}\r\n\r\n\tcanManageDraft(draft: Draft, user: User) {\r\n\t\treturn draft.adminId === user.id;\r\n\t}\r\n\r\n\taddPlayer(\r\n\t\tuser: User,\r\n\t\tdraftName: string,\r\n\t\tuserName: string,\r\n\t\tposition = -1,\r\n\t) {\r\n\t\tconst draft = this.getDraft(draftName, true);\r\n\r\n\t\tif (draft.inviteOnly && !this.canManageDraft(draft, user)) {\r\n\t\t\tthrow new Chat.ErrorMessage(`You do not have permission to manage draft \"${draftName}\".`);\r\n\t\t}\r\n\r\n\t\tif (draft.status === 'STARTED') {\r\n\t\t\tthrow new Chat.ErrorMessage(`Draft \"${draftName}\" has already started. It must be stopped to add more players.`);\r\n\t\t}\r\n\r\n\t\tconst userId = toID(userName);\r\n\t\tif (draft.players[userId]) {\r\n\t\t\tthrow new Chat.ErrorMessage(`User \"${userName}\" is already in draft \"${draftName}\".`);\r\n\t\t}\r\n\r\n\t\tdraft.players[userId] = {\r\n\t\t\tuserId,\r\n\t\t\tpicks: [],\r\n\t\t};\r\n\t\tdraft.playerOrder.push(userId);\r\n\t\tsaveDrafts();\r\n\t}\r\n};\r\n\r\nconst sendPM = (message: string, userId: ID) => {\r\n\tconst user = Users.get(userId);\r\n\r\n\tif (user) {\r\n\t\tuser.send(`|pm|&|${user.getIdentity()}|${message}`);\r\n\t}\r\n};\r\n\r\nexport const Badges = new class {\r\n\t// Permissions\r\n\tcheckBadgesEnabled() {\r\n\t\tif (!Config.usesqlitebadges) {\r\n\t\t\tthrow new Chat.ErrorMessage(ERROR_BADGE_FEATURE_DISABLED);\r\n\t\t}\r\n\t}\r\n\tcheckHasBadgePermission(context: Chat.CommandContext | Chat.PageContext) {\r\n\t\tBadges.checkBadgesEnabled();\r\n\t\tcontext.checkCan('badge');\r\n\t}\r\n\tcanOverrideBadgeOwnership(user: User) {\r\n\t\treturn Users.Auth.hasPermission(user, 'badge', null);\r\n\t}\r\n\tcheckCanUse(context: Chat.CommandContext | Chat.PageContext) {\r\n\t\tBadges.checkBadgesEnabled();\r\n\r\n\t\tconst user = context.user;\r\n\t\tif (user.locked || user.namelocked || user.semilocked || user.permalocked) {\r\n\t\t\tthrow new Chat.ErrorMessage(ERROR_USER_LOCKED);\r\n\t\t}\r\n\t\tif (!user.registered) {\r\n\t\t\tthrow new Chat.ErrorMessage(context.tr(ERROR_USER_NOT_REGISTERED));\r\n\t\t}\r\n\t}\r\n\r\n\t// User Updates\r\n\tsortUserBadges(userBadges: UserBadge[]) {\r\n\t\treturn userBadges.sort((badgeA, badgeB) => {\r\n\t\t\tconst priorityComparison = badgeA.priority - badgeB.priority;\r\n\t\t\tif (priorityComparison !== 0) return priorityComparison;\r\n\t\t\treturn badgeA.create_date - badgeB.create_date;\r\n\t\t});\r\n\t}\r\n\tasync updateUser(userID: string) {\r\n\t\tconst user = Users.get(userID);\r\n\t\tif (user) {\r\n\t\t\tconst badges = Badges.sortUserBadges(await Badges.getVisibleUserBadges(user.id));\r\n\r\n\t\t\tuser.badges = badges;\r\n\t\t\treturn user.badges;\r\n\t\t}\r\n\t}\r\n\tasync updateBadgeForUsers(badgeID: string, requester: User) {\r\n\t\tconst badgeOwners = await Badges.getBadgeOwners(badgeID, requester, true);\r\n\r\n\t\tawait Promise.all(badgeOwners.map(async ({user_id}) => {\r\n\t\t\tawait Badges.updateUser(user_id);\r\n\t\t}));\r\n\t}\r\n\t// Retrieval\r\n\tgetBadge(badgeID: string): Promise<Badge | undefined> {\r\n\t\treturn Chat.Badges.getBadge(badgeID);\r\n\t}\r\n\tgetBadges() {\r\n\t\treturn Chat.Badges.getBadges();\r\n\t}\r\n\tgetOwnedBadges(ownerID: string) {\r\n\t\treturn Chat.Badges.getOwnedBadges(ownerID);\r\n\t}\r\n\tgetUserBadges(userID: string) {\r\n\t\treturn Chat.Badges.getUserBadges(userID);\r\n\t}\r\n\tgetVisibleUserBadges(userID: string) {\r\n\t\treturn Chat.Badges.getVisibleUserBadges(userID);\r\n\t}\r\n\tgetBadgeOwners(badgeID: string, requester: User, override = false): Promise<UserBadge[]> {\r\n\t\treturn Chat.Badges.getBadgeOwners(badgeID, requester.id, override || Badges.canOverrideBadgeOwnership(requester));\r\n\t}\r\n\tgetUserManagedBadges(userID: string): Promise<UserManagedBadge[]> {\r\n\t\treturn Chat.Badges.getUserManagedBadges(userID);\r\n\t}\r\n\tasync hasBadge(userID: string, badgeIDs: string[]) {\r\n\t\tconst badges = await Badges.getUserBadges(userID);\r\n\t\treturn badges.some((badge) => badgeIDs.includes(badge.badge_id));\r\n\t}\r\n\tgetBadgeManagers(badgeID: string): Promise<UserManagedBadge[]> {\r\n\t\treturn Chat.Badges.getBadgeManagers(badgeID);\r\n\t}\r\n\tasync canManageBadge(userID: string, badgeID: string) {\r\n\t\tconst badge = await Badges.getBadge(badgeID);\r\n\t\tif (!badge) return false;\r\n\t\tconst badgeManagers = await Badges.getBadgeManagers(badgeID);\r\n\t\treturn [badge.owner_id, ...badgeManagers.map((badgeManager) => badgeManager.user_id)].includes(userID);\r\n\t}\r\n\t// Modification\r\n\tcreateBadge(badgeID: string, badgeName: string, managerID: string, filePath: string, badgeNameTemplate?: string) {\r\n\t\treturn Chat.Badges.createBadge(badgeID, badgeName, managerID, filePath, badgeNameTemplate);\r\n\t}\r\n\tasync deleteBadge(badgeID: string, requester: User, override = false) {\r\n\t\tconst overridePermissions = override || Badges.canOverrideBadgeOwnership(requester);\r\n\t\tawait Badges.deleteUserBadges(badgeID, requester);\r\n\t\tawait Chat.Badges.deleteBadge(badgeID, requester.id, overridePermissions);\r\n\t}\r\n\tasync updateBadgeAttribute(\r\n\t\tbadgeID: string,\r\n\t\tattributeName: UpdateableBadgeAttribute,\r\n\t\tattributeValue: any,\r\n\t\trequester: User,\r\n\t\toverride = false,\r\n\t) {\r\n\t\tconst overridePermissions = override || Badges.canOverrideBadgeOwnership(requester);\r\n\t\tawait Chat.Badges.updateBadgeAttribute(badgeID, attributeName, attributeValue, requester.id, overridePermissions);\r\n\t\tawait Badges.updateBadgeForUsers(badgeID, requester);\r\n\t}\r\n\tasync addBadgeToUser(userID: string, badgeID: string, requester: User, override = false) {\r\n\t\tconst overridePermissions = override || Badges.canOverrideBadgeOwnership(requester);\r\n\t\tawait Chat.Badges.addBadgeToUser(userID, badgeID, requester.id, overridePermissions);\r\n\t\tawait Badges.updateUser(userID);\r\n\r\n\t\tconst badge = await Chat.Badges.getBadge(badgeID);\r\n\t\tif (badge) {\r\n\t\t\tsendPM(`/html <div class=\"infobox\">You received a badge: ${this.createRawBadgeHtml(badge.badge_name, badge.file_name)}</div>`, toID(userID));\r\n\t\t}\r\n\t}\r\n\tasync removeBadgeFromUser(userID: string, badgeID: string, requester: User, override = false) {\r\n\t\tconst overridePermissions = override || Badges.canOverrideBadgeOwnership(requester);\r\n\t\tawait Chat.Badges.removeBadgeFromUser(userID, badgeID, requester.id, overridePermissions);\r\n\t\tawait Badges.updateUser(userID);\r\n\t}\r\n\tasync deleteUserBadges(badgeID: string, requester: User) {\r\n\t\tawait Chat.Badges.deleteUserBadges(badgeID);\r\n\t\tawait Badges.updateBadgeForUsers(badgeID, requester);\r\n\t}\r\n\tasync toggleBadgeVisibility(userID: string, badgeID: string, isVisible: boolean) {\r\n\t\tawait Chat.Badges.toggleBadgeVisibility(userID, badgeID, isVisible);\r\n\t\tawait Badges.updateUser(userID);\r\n\t}\r\n\tasync updateBadgePriority(userID: string, badgeID: string, priority: number) {\r\n\t\tawait Chat.Badges.updateBadgePriority(userID, badgeID, priority);\r\n\t\tawait Badges.updateUser(userID);\r\n\t}\r\n\tasync updateBadgeData(userID: string, badgeID: string, data: any, requester: User, override = false) {\r\n\t\tconst overridePermissions = override || Badges.canOverrideBadgeOwnership(requester);\r\n\t\tawait Chat.Badges.updateBadgeData(userID, badgeID, data, requester.id, overridePermissions);\r\n\t\tawait Badges.updateUser(userID);\r\n\t}\r\n\tasync addManagedBadgeToUser(userID: string, badgeID: string, requester: User, override = false) {\r\n\t\tconst overridePermissions = override || Badges.canOverrideBadgeOwnership(requester);\r\n\t\tawait Chat.Badges.addManagedBadgeToUser(userID, badgeID, requester.id, overridePermissions);\r\n\r\n\t\tconst badge = await Chat.Badges.getBadge(badgeID);\r\n\t\tif (badge) {\r\n\t\t\tsendPM(`/html <div class=\"infobox\">You now manage badge: ${this.createRawBadgeHtml(badge.badge_name, badge.file_name)}</div>`, toID(userID));\r\n\t\t}\r\n\t}\r\n\tasync removeManagedBadgeFromUser(userID: string, badgeID: string, requester: User, override = false) {\r\n\t\tconst overridePermissions = override || Badges.canOverrideBadgeOwnership(requester);\r\n\t\tawait Chat.Badges.removeManagedBadgeFromUser(userID, badgeID, requester.id, overridePermissions);\r\n\t}\r\n\tasync downloadBadgeImage(badgeID: string, imageUrl: string) {\r\n\t\ttry {\r\n\t\t\tconst imagebuffer = (await Axios.get(imageUrl, {responseType: 'arraybuffer'})).data;\r\n\t\t\tconst probeResult = probe.sync(imagebuffer);\r\n\r\n\t\t\tif (!probeResult) {\r\n\t\t\t\tthrow new Chat.ErrorMessage(ERROR_INVALID_IMAGE);\r\n\t\t\t}\r\n\r\n\t\t\tconst {width, height, type} = probeResult;\r\n\r\n\t\t\tif (width !== 16 || height !== 16 || !['png', 'gif'].includes(toID(type))) {\r\n\t\t\t\tthrow new Chat.ErrorMessage(ERROR_INVALID_IMAGE);\r\n\t\t\t}\r\n\r\n\t\t\tconst fileName = `${badgeID}.${type}`;\r\n\t\t\tawait FS(`./config/badges/${fileName}`).write(imagebuffer);\r\n\r\n\t\t\treturn fileName;\r\n\t\t} catch (error) {\r\n\t\t\tthrow new Chat.ErrorMessage(ERROR_WRITING_IMAGE);\r\n\t\t}\r\n\t}\r\n\t// HTML\r\n\tcreateRawBadgeHtml(badgeName: string, badgeFileName: string) {\r\n\t\treturn `<badge badgename=\"${Utils.escapeHTML(badgeName)}\" badgefilename=\"${Utils.escapeHTML(badgeFileName)}\" />`;\r\n\t}\r\n\tcreateUserBadgeHtml(userBadge: UserBadge) {\r\n\t\treturn Badges.createRawBadgeHtml(userBadge.badge_name, userBadge.file_name) +\r\n\t\t\t`(${userBadge.badge_id})`;\r\n\t}\r\n\tcreateUserBadgeListHtml(title: string, userBadges: UserBadge[]) {\r\n\t\tlet badgeListString = title === '' ? title : `<span style=\"color:#999999;\">${Utils.escapeHTML(title)}:</span><br />`;\r\n\r\n\t\tif (userBadges.length) {\r\n\t\t\tconst badgeList = userBadges.map(Badges.createUserBadgeHtml);\r\n\r\n\t\t\tbadgeListString += badgeList.join(', ');\r\n\t\t} else {\r\n\t\t\tbadgeListString += 'No badges found.';\r\n\t\t}\r\n\r\n\t\treturn badgeListString;\r\n\t}\r\n\tcreateBadgeHtml(badge: Badge, showOwner: boolean) {\r\n\t\treturn Badges.createRawBadgeHtml(badge.badge_name, badge.file_name) +\r\n\t\t\t`(${badge.badge_id})` + (showOwner ? `[Owned by: ${badge.owner_id}]` : '');\r\n\t}\r\n\tcreateBadgeListHtml(title: string, badges: Badge[], showOwner = false) {\r\n\t\tlet badgeListString = title === '' ? title : `<span style=\"color:#999999;\">${Utils.escapeHTML(title)}:</span><br />`;\r\n\r\n\t\tif (badges.length) {\r\n\t\t\tconst badgeList = badges.map((badge) => Badges.createBadgeHtml(badge, showOwner));\r\n\r\n\t\t\tbadgeListString += badgeList.join(', ');\r\n\t\t} else {\r\n\t\t\tbadgeListString += 'No badges found.';\r\n\t\t}\r\n\r\n\t\treturn badgeListString;\r\n\t}\r\n\tcreateBadgeOwnerListHtml(title: string, userBadges: UserBadge[]) {\r\n\t\tlet badgeListString = title === '' ? title : `<span style=\"color:#999999;\">${Utils.escapeHTML(title)}:</span><br />`;\r\n\r\n\t\tif (userBadges.length) {\r\n\t\t\tconst badgeList = userBadges.map((userBadge) => userBadge.user_id);\r\n\r\n\t\t\tbadgeListString += badgeList.join(', ');\r\n\t\t} else {\r\n\t\t\tbadgeListString += 'No badges found.';\r\n\t\t}\r\n\r\n\t\treturn badgeListString;\r\n\t}\r\n\tcreateBadgeHeaderButtons(currentPage: string) {\r\n\t\tconst buf = [];\r\n\t\tconst icons: {[k: string]: string} = {\r\n\t\t\towned: '<i class=\"fa fa-user\"></i>',\r\n\t\t\tmanaged: '<i class=\"fa fa-get-pocket\"></i>',\r\n\t\t};\r\n\t\tconst titles: {[k: string]: string} = {\r\n\t\t\towned: 'Owned Badges',\r\n\t\t\tmanaged: 'Managed Badges',\r\n\t\t};\r\n\t\tfor (const page in titles) {\r\n\t\t\tconst title = titles[page];\r\n\t\t\tconst icon = icons[page];\r\n\t\t\tif (page === currentPage) {\r\n\t\t\t\tbuf.push(`${icon} <strong>${title}</strong>`); // TODO: user.tr(title)\r\n\t\t\t} else {\r\n\t\t\t\tbuf.push(`${icon} <a roomid=\"view-badge-${page}\">${title}</a>`); // TODO: user.tr(title)\r\n\t\t\t}\r\n\t\t}\r\n\t\tconst refresh = (\r\n\t\t\t`<button class=\"button\" name=\"send\" value=\"/j view-badge-${currentPage}\" style=\"float: right\">` +\r\n\t\t\t` <i class=\"fa fa-refresh\"></i> Refresh</button>` // TODO: user.tr('Refresh')\r\n\t\t);\r\n\t\treturn toLink(`<div style=\"line-height:25px\">${buf.join(' / ')}${refresh}</div><hr />`);\r\n\t}\r\n\tcreateUserBadgePageElementHtml(userBadge: UserBadge) {\r\n\t\tconst isHidden = userBadge.is_hidden === 1;\r\n\t\tlet userBadgePageElementHtml = '<p>';\r\n\t\tuserBadgePageElementHtml += Badges.createRawBadgeHtml(userBadge.badge_name, userBadge.file_name);\r\n\t\tuserBadgePageElementHtml += `<strong>${userBadge.badge_name}</strong> <small>[id: ${userBadge.badge_id}, order: ${userBadge.priority}]</small><br />`;\r\n\t\tuserBadgePageElementHtml += `<button class=\"button${userBadge.is_hidden === 0 ? ' disabled' : ''}\" name=\"send\" `;\r\n\t\tuserBadgePageElementHtml += `value=\"/badge on ${userBadge.badge_id}\">Show</button> `;\r\n\t\tuserBadgePageElementHtml += `<button class=\"button${userBadge.is_hidden === 1 ? ' disabled' : ''}\" name=\"send\" `;\r\n\t\tuserBadgePageElementHtml += `value=\"/badge off ${userBadge.badge_id}\">Hide</button> `;\r\n\t\tif (!isHidden) {\r\n\t\t\tuserBadgePageElementHtml += `<button class=\"button\" name=\"send\" `;\r\n\t\t\tuserBadgePageElementHtml += `value=\"/badge priority ${userBadge.badge_id}, ${userBadge.priority - 1}\">&lt;</button> `;\r\n\t\t\tuserBadgePageElementHtml += ` <button class=\"button\" name=\"send\" `;\r\n\t\t\tuserBadgePageElementHtml += `value=\"/badge priority ${userBadge.badge_id}, ${userBadge.priority + 1}\">&gt;</button> `;\r\n\t\t}\r\n\t\treturn userBadgePageElementHtml + '</p>';\r\n\t}\r\n\tcreateUserBadgePageHtml(userBadges: UserBadge[]) {\r\n\t\tlet userBadgePageHtml = '<div class=\"pad\">';\r\n\t\tuserBadgePageHtml += Badges.createBadgeHeaderButtons('owned');\r\n\r\n\t\tconst visibleBadges = userBadges.filter((userBadge) => userBadge.is_hidden === 0);\r\n\t\tuserBadgePageHtml += '<h3>Your Visible Badges</h3>';\r\n\t\tuserBadgePageHtml += visibleBadges.map(\r\n\t\t\t(visibleBadge) => Badges.createRawBadgeHtml(visibleBadge.badge_name, visibleBadge.file_name),\r\n\t\t).join('');\r\n\t\tuserBadgePageHtml += '<br />';\r\n\r\n\t\tuserBadgePageHtml += '<h3>Your Badges</h3>';\r\n\r\n\t\tif (userBadges.length) {\r\n\t\t\tuserBadgePageHtml += userBadges.map(Badges.createUserBadgePageElementHtml).join('');\r\n\t\t} else {\r\n\t\t\tuserBadgePageHtml += '<em>you have no badges on Showdown lol</em>';\r\n\t\t}\r\n\r\n\t\tuserBadgePageHtml += '</div>';\r\n\t\treturn userBadgePageHtml;\r\n\t}\r\n\tcreateManagedBadgePageElementHtml(badge: Badge) {\r\n\t\tlet managedBadgePageElementHtml = Badges.createRawBadgeHtml(badge.badge_name, badge.file_name);\r\n\t\tmanagedBadgePageElementHtml += `<strong>${badge.badge_name}</strong> <small>[id: ${badge.badge_id}]</small><br />`;\r\n\t\treturn managedBadgePageElementHtml;\r\n\t}\r\n\tcreateManagedBadgePageHtml(ownedBadges: Badge[], managedBadges: Badge[]) {\r\n\t\tlet managedBadgePageHtml = '<div class=\"pad\">';\r\n\t\tmanagedBadgePageHtml += Badges.createBadgeHeaderButtons('managed');\r\n\t\tmanagedBadgePageHtml += '<h3>Your Managed Badges</h3>';\r\n\r\n\t\tmanagedBadgePageHtml += '<h4>Directly Owned Badges</h4>';\r\n\r\n\t\tif (ownedBadges.length) {\r\n\t\t\tmanagedBadgePageHtml += ownedBadges.map(Badges.createManagedBadgePageElementHtml).join('');\r\n\t\t} else {\r\n\t\t\tmanagedBadgePageHtml += '<em>you directly manage no badges on Showdown lol</em>';\r\n\t\t}\r\n\r\n\t\tmanagedBadgePageHtml += '<h4>Delegated Badges</h4>';\r\n\r\n\t\tif (managedBadges.length) {\r\n\t\t\tmanagedBadgePageHtml += managedBadges.map(Badges.createManagedBadgePageElementHtml).join('');\r\n\t\t} else {\r\n\t\t\tmanagedBadgePageHtml += '<em>you have been delegated no badges on Showdown lol</em>';\r\n\t\t}\r\n\r\n\t\tmanagedBadgePageHtml += '</div>';\r\n\t\treturn managedBadgePageHtml;\r\n\t}\r\n};\r\n\r\nexport const pages: Chat.PageTable = {\r\n\tdraft(query, user, connection) {\r\n\t\treturn ((pages.drafts as Chat.PageTable).view as Chat.PageHandler).call(this, query, user, connection);\r\n\t},\r\n\tdrafts: {\r\n\t\tasync all(query, user, connection) {\r\n\t\t\tTeamsHandler.validateAccess(connection);\r\n\t\t\tconst targetUserid = toID(query.shift()) || user.id;\r\n\t\t\tlet count = Number(query.shift()) || 10;\r\n\t\t\tif (count > MAX_TEAMS) count = MAX_TEAMS;\r\n\t\t\tthis.title = `[Teams] ${targetUserid}`;\r\n\t\t\tconst teams = await TeamsHandler.list(targetUserid, count, user.id !== targetUserid);\r\n\t\t\tlet buf = `<div class=\"ladder pad\"><h2>${targetUserid}'s last ${Chat.count(count, \"teams\")}</h2>`;\r\n\t\t\tbuf += refresh(this);\r\n\t\t\tbuf += `<br /><a class=\"button\" href=\"/view-teams-searchpersonal\">Search your teams</a> `;\r\n\t\t\tbuf += `<a class=\"button\" href=\"/view-teams-searchpublic\">Browse public teams</a><br />`;\r\n\t\t\tif (targetUserid === user.id) {\r\n\t\t\t\tbuf += `<a class=\"button\" href=\"/view-teams-upload\">Upload new</a>`;\r\n\t\t\t}\r\n\t\t\tbuf += `<hr />`;\r\n\t\t\tfor (const team of teams) {\r\n\t\t\t\tbuf += TeamsHandler.preview(team, user);\r\n\t\t\t\tbuf += `<hr />`;\r\n\t\t\t}\r\n\t\t\tconst total = await TeamsHandler.count(user.id);\r\n\t\t\tif (total > count) {\r\n\t\t\t\tbuf += `<button class=\"button\" name=\"send\" value=\"/j view-teams-all-${targetUserid}-${count + 20}\">View more</button>`;\r\n\t\t\t}\r\n\t\t\treturn buf;\r\n\t\t},\r\n\t\tasync view(query, user, connection) {\r\n\t\t\tTeamsHandler.validateAccess(connection);\r\n\t\t\tconst teamid = toID(query.shift() || \"\");\r\n\t\t\tconst password = toID(query.shift());\r\n\t\t\tthis.title = `[View Team]`;\r\n\t\t\tif (!teamid.length) {\r\n\t\t\t\tthrow new Chat.ErrorMessage(`Invalid team ID.`);\r\n\t\t\t}\r\n\t\t\tconst team = await TeamsHandler.get(teamid);\r\n\t\t\tif (!team) {\r\n\t\t\t\tthis.title = `[Invalid Team]`;\r\n\t\t\t\treturn this.errorReply(`No team with the ID ${teamid} was found.`);\r\n\t\t\t}\r\n\t\t\tif (team?.private && user.id !== team.ownerid && password !== team.private) {\r\n\t\t\t\tthis.title = `[Private Team]`;\r\n\t\t\t\treturn this.errorReply(`That team is private.`);\r\n\t\t\t}\r\n\t\t\tthis.title = `[Team] ${team.teamid}`;\r\n\t\t\tif (user.id !== team.ownerid) {\r\n\t\t\t\tvoid TeamsHandler.updateViews(team.teamid);\r\n\t\t\t}\r\n\t\t\treturn `<div class=\"ladder pad\">` + TeamsHandler.renderTeam(team, user) + \"</div>\";\r\n\t\t},\r\n\t},\r\n};\r\n\r\ninterface ChainablePredicate<T, R> {\r\n\tpredicate: (value: T) => boolean;\r\n\ttransform: (value: T) => R;\r\n\terrorMessage: string;\r\n}\r\n\r\nconst applyPredicate = <T, R>(\r\n\tpredicate: ChainablePredicate<T, R>,\r\n\tvalue: T,\r\n): R => {\r\n\tif (!predicate.predicate(value)) {\r\n\t\tthrow new Chat.ErrorMessage(predicate.errorMessage);\r\n\t}\r\n\r\n\treturn predicate.transform(value);\r\n};\r\n\r\nconst isNotNullOrUndefined = (arg: any) => (arg !== null) && (arg !== undefined);\r\nconst identity = <T>(value: T) => value;\r\n\r\nconst getBadgeID = (arg: string) => applyPredicate(\r\n\t{predicate: isNotNullOrUndefined, transform: toID, errorMessage: ERROR_NO_BADGE_ID},\r\n\targ,\r\n);\r\n\r\nconst getBadgeDescription = (arg: string) => applyPredicate(\r\n\t{\r\n\t\tpredicate: (predicateArg) => nameRegex.test(predicateArg),\r\n\t\ttransform: Utils.escapeHTML,\r\n\t\terrorMessage: ERROR_INVALID_BADGE_DESCRIPTION,\r\n\t},\r\n\tapplyPredicate(\r\n\t\t{\r\n\t\t\tpredicate: isNotNullOrUndefined,\r\n\t\t\ttransform: (transformArg) => transformArg.trim(),\r\n\t\t\terrorMessage: ERROR_NO_BADGE_DESCRIPTION,\r\n\t\t},\r\n\t\targ,\r\n\t),\r\n);\r\n\r\nconst getBadgeManagerID = (arg: string) => applyPredicate(\r\n\t{predicate: isNotNullOrUndefined, transform: toID, errorMessage: ERROR_NO_BADGE_MANAGER},\r\n\targ,\r\n);\r\n\r\nconst validateUrl = (maybeUrl: string) => {\r\n\ttry {\r\n\t\tconst url = new URL(maybeUrl);\r\n\r\n\t\treturn ['http:', 'https:'].includes(url.protocol);\r\n\t} catch (err) {\r\n\t\treturn false;\r\n\t}\r\n};\r\nconst getBadgeImageUrl = (arg: string) => applyPredicate(\r\n\t{predicate: validateUrl, transform: identity, errorMessage: ERROR_INVALID_IMAGE},\r\n\tapplyPredicate(\r\n\t\t{\r\n\t\t\tpredicate: isNotNullOrUndefined,\r\n\t\t\ttransform: (transformArg) => transformArg.trim(),\r\n\t\t\terrorMessage: ERROR_NO_BADGE_IMAGE_URL,\r\n\t\t},\r\n\t\targ,\r\n\t),\r\n);\r\n\r\nconst getUserID = (arg: string) => applyPredicate(\r\n\t{predicate: isNotNullOrUndefined, transform: toID, errorMessage: ERROR_NO_USER_ID},\r\n\targ,\r\n);\r\n\r\nconst getBadgePriority = (arg: string) => applyPredicate(\r\n\t{\r\n\t\tpredicate: (predicateArg) => Number.isInteger(predicateArg),\r\n\t\ttransform: identity,\r\n\t\terrorMessage: ERROR_NON_INTEGER_BADGE_PRIORITY,\r\n\t},\r\n\tapplyPredicate(\r\n\t\t{\r\n\t\t\tpredicate: (predicateArg) => !Number.isNaN(parseInt(predicateArg)),\r\n\t\t\ttransform: parseInt,\r\n\t\t\terrorMessage: ERROR_NON_NUMERIC_BADGE_PRIORITY,\r\n\t\t},\r\n\t\tapplyPredicate(\r\n\t\t\t{\r\n\t\t\t\tpredicate: isNotNullOrUndefined,\r\n\t\t\t\ttransform: (transformArg) => transformArg.trim(),\r\n\t\t\t\terrorMessage: ERROR_NO_BADGE_PRIORITY,\r\n\t\t\t},\r\n\t\t\targ,\r\n\t\t),\r\n\t),\r\n);\r\n\r\nconst getBadgeNameTemplate = (arg: string) => applyPredicate(\r\n\t{\r\n\t\tpredicate: (predicateArg) => nameTemplateRegex.test(predicateArg),\r\n\t\ttransform: Utils.escapeHTML,\r\n\t\terrorMessage: ERROR_INVALID_BADGE_NAME_TEMPLATE,\r\n\t},\r\n\tapplyPredicate(\r\n\t\t{\r\n\t\t\tpredicate: isNotNullOrUndefined,\r\n\t\t\ttransform: (transformArg) => transformArg.trim(),\r\n\t\t\terrorMessage: ERROR_NO_BADGE_DESCRIPTION,\r\n\t\t},\r\n\t\targ,\r\n\t),\r\n);\r\n\r\nexport const commands: Chat.ChatCommands = {\r\n\tbadges: 'badge',\r\n\tbadge: {\r\n\t\tasync showall(target, room, user, connection, cmd, message) {\r\n\t\t\tBadges.checkHasBadgePermission(this);\r\n\t\t\tthis.runBroadcast();\r\n\r\n\t\t\tconst badges = await Badges.getBadges();\r\n\r\n\t\t\treturn this.sendReplyBox(Badges.createBadgeListHtml(message, badges, true));\r\n\t\t},\r\n\t\tasync showmanaged(target, room, user, connection, cmd, message) {\r\n\t\t\tBadges.checkCanUse(this);\r\n\t\t\tthis.runBroadcast();\r\n\r\n\t\t\tconst userID = getUserID(target);\r\n\t\t\tif (userID) {\r\n\t\t\t\tBadges.checkHasBadgePermission(this);\r\n\r\n\t\t\t\tconst ownedBadges = await Badges.getOwnedBadges(userID);\r\n\t\t\t\tconst managedBadges = await Badges.getUserManagedBadges(userID);\r\n\r\n\t\t\t\treturn this.sendReplyBox(Badges.createBadgeListHtml(message, [...ownedBadges, ...managedBadges]));\r\n\t\t\t} else {\r\n\t\t\t\tconst ownedBadges = await Badges.getOwnedBadges(user.id);\r\n\t\t\t\tconst managedBadges = await Badges.getUserManagedBadges(userID);\r\n\r\n\t\t\t\treturn this.sendReplyBox(Badges.createBadgeListHtml(message, [...ownedBadges, ...managedBadges]));\r\n\t\t\t}\r\n\t\t},\r\n\t\tasync show(target, room, user, connection, cmd, message) {\r\n\t\t\tBadges.checkCanUse(this);\r\n\t\t\tthis.runBroadcast();\r\n\r\n\t\t\tconst targetUser = Users.get(getUserID(target));\r\n\t\t\tif (targetUser) {\r\n\t\t\t\tconst badges = await Badges.getVisibleUserBadges(targetUser.id);\r\n\r\n\t\t\t\treturn this.sendReplyBox(Badges.createUserBadgeListHtml(message, badges));\r\n\t\t\t} else {\r\n\t\t\t\tconst badges = this.broadcasting ? await Badges.getVisibleUserBadges(user.id) : await Badges.getUserBadges(user.id);\r\n\r\n\t\t\t\treturn this.sendReplyBox(Badges.createUserBadgeListHtml(message, badges));\r\n\t\t\t}\r\n\t\t},\r\n\t\tasync showowners(target, room, user, connection, cmd, message) {\r\n\t\t\tBadges.checkCanUse(this);\r\n\t\t\tthis.runBroadcast();\r\n\r\n\t\t\tconst id = getBadgeID(target);\r\n\r\n\t\t\tconst badges = await Badges.getBadgeOwners(id, user);\r\n\r\n\t\t\treturn this.sendReplyBox(Badges.createBadgeOwnerListHtml(message, badges));\r\n\t\t},\r\n\t\tnew: 'create',\r\n\t\tasync create(target, room, user) {\r\n\t\t\tBadges.checkHasBadgePermission(this);\r\n\r\n\t\t\tconst [rawID, rawDescription, rawManagerID, rawImageUrl, rawBadgeNameTemplate] = target.split(',');\r\n\r\n\t\t\tconst id = getBadgeID(rawID);\r\n\t\t\tconst description = getBadgeDescription(rawDescription);\r\n\t\t\tconst managerID = getBadgeManagerID(rawManagerID);\r\n\t\t\tconst imageUrl = getBadgeImageUrl(rawImageUrl);\r\n\t\t\tconst imageFileName = await Badges.downloadBadgeImage(id, imageUrl);\r\n\t\t\tlet badgeNameTemplate: string | undefined = undefined;\r\n\r\n\t\t\tif (rawBadgeNameTemplate) {\r\n\t\t\t\tbadgeNameTemplate = getBadgeNameTemplate(rawBadgeNameTemplate);\r\n\t\t\t}\r\n\r\n\t\t\tawait Badges.createBadge(id, description, managerID, imageFileName, badgeNameTemplate);\r\n\r\n\t\t\tthis.refreshPage('badge-managed');\r\n\t\t\treturn this.sendReply(`Added Badge '${id}'.`);\r\n\t\t},\r\n\t\tasync delete(target, room, user) {\r\n\t\t\tBadges.checkHasBadgePermission(this);\r\n\r\n\t\t\tconst id = getBadgeID(target);\r\n\r\n\t\t\tawait Badges.deleteBadge(id, user);\r\n\r\n\t\t\tthis.refreshPage('badge-managed');\r\n\t\t\treturn this.sendReply(`Deleted Badge '${id}'.`);\r\n\t\t},\r\n\t\tset: {\r\n\t\t\tasync owner(target, room, user) {\r\n\t\t\t\tconst [rawID, rawManagerID] = target.split(',').map(toID);\r\n\r\n\t\t\t\tconst id = getBadgeID(rawID);\r\n\t\t\t\tconst managerID = getBadgeManagerID(rawManagerID);\r\n\r\n\t\t\t\tawait Badges.updateBadgeAttribute(id, 'owner_id', managerID, user);\r\n\r\n\t\t\t\tthis.refreshPage('badge-managed');\r\n\t\t\t\treturn this.sendReply(`Updated manager of Badge '${id}' to User '${managerID}'.`);\r\n\t\t\t},\r\n\t\t\tdesc: 'name',\r\n\t\t\tdescription: 'name',\r\n\t\t\tasync name(target, room, user) {\r\n\t\t\t\tconst [rawID, rawDescription] = target.split(',');\r\n\r\n\t\t\t\tconst id = getBadgeID(rawID);\r\n\t\t\t\tconst description = getBadgeDescription(rawDescription);\r\n\r\n\t\t\t\tawait Badges.updateBadgeAttribute(id, 'badge_name', description, user);\r\n\r\n\t\t\t\tthis.refreshPage('badge-managed');\r\n\t\t\t\treturn this.sendReply(`Updated description of Badge '${id}' to '${description}'.`);\r\n\t\t\t},\r\n\t\t\tasync image(target, room, user) {\r\n\t\t\t\tconst [rawID, rawImageUrl] = target.split(',');\r\n\r\n\t\t\t\tconst id = getBadgeID(rawID);\r\n\t\t\t\tconst imageUrl = getBadgeImageUrl(rawImageUrl);\r\n\t\t\t\tconst imageFileName = await Badges.downloadBadgeImage(id, imageUrl);\r\n\r\n\t\t\t\tawait Badges.updateBadgeAttribute(id, 'file_name', imageFileName, user);\r\n\r\n\t\t\t\tthis.refreshPage('badge-managed');\r\n\t\t\t\treturn this.sendReply(`Updated image of Badge '${id}' to '${imageUrl}'.`);\r\n\t\t\t},\r\n\t\t\tasync template(target, room, user) {\r\n\t\t\t\tconst [rawID, rawBadgeNameTemplate] = target.split(',');\r\n\r\n\t\t\t\tconst id = getBadgeID(rawID);\r\n\t\t\t\tconst badgeNameTemplate = getBadgeNameTemplate(rawBadgeNameTemplate);\r\n\r\n\t\t\t\tawait Badges.updateBadgeAttribute(id, 'badge_name_template', badgeNameTemplate, user);\r\n\r\n\t\t\t\tthis.refreshPage('badge-managed');\r\n\t\t\t\treturn this.sendReply(`Updated template of Badge '${id}' to '${badgeNameTemplate}'.`);\r\n\t\t\t},\r\n\t\t},\r\n\t\tgrant: 'add',\r\n\t\tasync add(target, room, user) {\r\n\t\t\tBadges.checkCanUse(this);\r\n\t\t\tconst [rawUserID, rawBadgeID] = target.split(',').map(toID);\r\n\r\n\t\t\tconst userID = getUserID(rawUserID);\r\n\t\t\tconst badgeID = getBadgeID(rawBadgeID);\r\n\r\n\t\t\tawait Badges.addBadgeToUser(userID, badgeID, user);\r\n\r\n\t\t\treturn this.sendReply(`Granted Badge '${badgeID}' to User '${userID}'.`);\r\n\t\t},\r\n\t\trevoke: 'remove',\r\n\t\tasync remove(target, room, user) {\r\n\t\t\tBadges.checkCanUse(this);\r\n\t\t\tconst [rawUserID, rawBadgeID] = target.split(',');\r\n\r\n\t\t\tconst userID = getUserID(rawUserID);\r\n\t\t\tconst badgeID = getBadgeID(rawBadgeID);\r\n\r\n\t\t\tawait Badges.removeBadgeFromUser(userID, badgeID, user);\r\n\r\n\t\t\treturn this.sendReply(`Removed Badge '${badgeID}' from User '${userID}'.`);\r\n\t\t},\r\n\t\tasync data(target, room, user) {\r\n\t\t\tBadges.checkCanUse(this);\r\n\r\n\t\t\tconst [rawUserID, rawBadgeID, ...rawData] = target.split(',');\r\n\t\t\tconst userID = getUserID(rawUserID);\r\n\t\t\tconst badgeID = getBadgeID(rawBadgeID);\r\n\r\n\t\t\ttry {\r\n\t\t\t\tconst data = JSON.parse(rawData.join(','));\r\n\r\n\t\t\t\tawait Badges.updateBadgeData(userID, badgeID, data, user);\r\n\r\n\t\t\t\treturn this.sendReply(`Updated Badge '${badgeID}' data fom User '${userID}'.`);\r\n\t\t\t} catch (e) {\r\n\t\t\t\tthrow new Chat.ErrorMessage(ERROR_INVALID_JSON);\r\n\t\t\t}\r\n\t\t},\r\n\t\tenable: 'on',\r\n\t\tasync on(target, room, user) {\r\n\t\t\tBadges.checkCanUse(this);\r\n\r\n\t\t\tconst id = getBadgeID(target);\r\n\r\n\t\t\tawait Badges.toggleBadgeVisibility(user.id, id, true);\r\n\r\n\t\t\tthis.refreshPage('badge-owned');\r\n\t\t\treturn this.sendReply(`Showing Badge '${id}'.`);\r\n\t\t},\r\n\t\tdisable: 'off',\r\n\t\tasync off(target, room, user) {\r\n\t\t\tBadges.checkCanUse(this);\r\n\r\n\t\t\tconst id = getBadgeID(target);\r\n\r\n\t\t\tawait Badges.toggleBadgeVisibility(user.id, id, false);\r\n\r\n\t\t\tthis.refreshPage('badge-owned');\r\n\t\t\treturn this.sendReply(`Hiding Badge '${id}'.`);\r\n\t\t},\r\n\t\tpriority: 'order',\r\n\t\tasync order(target, room, user) {\r\n\t\t\tBadges.checkCanUse(this);\r\n\r\n\t\t\tconst [rawID, rawPriority] = target.split(',');\r\n\t\t\tconst id = getBadgeID(rawID);\r\n\t\t\tconst priority = getBadgePriority(rawPriority);\r\n\r\n\t\t\tawait Badges.updateBadgePriority(user.id, id, priority);\r\n\r\n\t\t\tthis.refreshPage('badge-owned');\r\n\t\t\treturn this.sendReply(`Set Badge '${id}' priority to '${priority}'.`);\r\n\t\t},\r\n\t\tmanage: 'manager',\r\n\t\tmanager: {\r\n\t\t\tasync list(target) {\r\n\t\t\t\tBadges.checkCanUse(this);\r\n\t\t\t\tconst badgeID = getBadgeID(target);\r\n\t\t\t\tconst badgeManagers = await Badges.getBadgeManagers(badgeID);\r\n\r\n\t\t\t\treturn this.sendReply(`Managers: ${badgeManagers.map((badgeManager) => badgeManager.user_id).join(', ')}`);\r\n\t\t\t},\r\n\t\t\tgrant: 'add',\r\n\t\t\tasync add(target, room, user) {\r\n\t\t\t\tBadges.checkCanUse(this);\r\n\t\t\t\tconst [rawUserID, rawBadgeID] = target.split(',').map(toID);\r\n\r\n\t\t\t\tconst userID = getUserID(rawUserID);\r\n\t\t\t\tconst badgeID = getBadgeID(rawBadgeID);\r\n\r\n\t\t\t\tawait Badges.addManagedBadgeToUser(userID, badgeID, user);\r\n\r\n\t\t\t\treturn this.sendReply(`Granted Management of Badge '${badgeID}' to User '${userID}'.`);\r\n\t\t\t},\r\n\t\t\trevoke: 'remove',\r\n\t\t\tasync remove(target, room, user) {\r\n\t\t\t\tBadges.checkCanUse(this);\r\n\t\t\t\tconst [rawUserID, rawBadgeID] = target.split(',');\r\n\r\n\t\t\t\tconst userID = getUserID(rawUserID);\r\n\t\t\t\tconst badgeID = getBadgeID(rawBadgeID);\r\n\r\n\t\t\t\tawait Badges.removeManagedBadgeFromUser(userID, badgeID, user);\r\n\r\n\t\t\t\treturn this.sendReply(`Removed Management of Badge '${badgeID}' from User '${userID}'.`);\r\n\t\t\t},\r\n\t\t},\r\n\t\t'': 'view',\r\n\t\tview() {\r\n\t\t\tBadges.checkCanUse(this);\r\n\r\n\t\t\treturn this.parse(`/j view-badge-owned`);\r\n\t\t},\r\n\t},\r\n\tbadgehelp() {\r\n\t\tthis.sendReplyBox(\r\n\t\t\t`<code>/badge view</code>: opens the badge page<br />` +\r\n\t\t\t`<code>/badge showall</code>: shows all badges. Requires: &<br />` +\r\n\t\t\t`<code>/badge showmanaged</code>: shows all badges you manage<br />` +\r\n\t\t\t`<code>/badge showmanaged</code>: shows all badges a given user manages. Requires: &<br />` +\r\n\t\t\t`<code>/badge showowned [user]</code>: shows all badges the given user owns. Requires: &<br />` +\r\n\t\t\t`<code>/badge showowners [badge id]</code>: shows all owners of a badges. Requires: & or ownership<br />` +\r\n\t\t\t`<code>/badge show</code>: shows all badges you've been granted<br />` +\r\n\t\t\t`<code>/badge show [user]</code>: shows all badges the given user has been granted<br />` +\r\n\t\t\t`<code>/badge create [badge id], [badge name], [owner], [image url]</code>: creates a new badge with the given parameters. Requires: &<br />` +\r\n\t\t\t`<code>/badge set name [badge id], [badge name]</code>: updates a badge with the given name. Requires: & or ownership<br />` +\r\n\t\t\t`<code>/badge set owner [badge id], [owner],</code>: updates a badge with the given owner. Requires: & or ownership<br />` +\r\n\t\t\t`<code>/badge set image [badge id], [image url]</code>: updates a badge with the given image. Requires: & or ownership<br />` +\r\n\t\t\t`<code>/badge set template [badge id], [image url]</code>: updates a badge with the given image. Requires: & or ownership<br />` +\r\n\t\t\t`<code>/badge delete [badge id]</code>: deletes a badge. Requires: & or ownership<br />` +\r\n\t\t\t`<code>/badge add [user], [badge id]</code>: grants a user a badge. Requires: & or ownership<br />` +\r\n\t\t\t`<code>/badge remove [user], [badge id]</code>: revokes a badge from a user. Requires: & or ownership<br />` +\r\n\t\t\t`<code>/badge data [user], [badge id], [data]</code>: sets badge data for a user. Requires: & or ownership<br />` +\r\n\t\t\t`<code>/badge on [badge id]</code>: displays a badge you own<br />` +\r\n\t\t\t`<code>/badge off [badge id]</code>: hides a badge you own<br />` +\r\n\t\t\t`<code>/badge order [badge id], [priority]</code>: sets the order of a badge you own<br />`\r\n\t\t);\r\n\t},\r\n};\r\n\r\nexport const loginfilter: Chat.LoginFilter = user => {\r\n\tif (!Config.usesqlitebadges) {\r\n\t\treturn;\r\n\t}\r\n\r\n\tvoid Badges.updateUser(user.id);\r\n};\r\n"],
  "mappings": "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",
  "names": ["Axios", "probe", "refresh"]
}
