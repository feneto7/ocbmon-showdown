{
  "version": 3,
  "sources": ["../../../server/chat-plugins/emojis.ts"],
  "sourcesContent": ["/* eslint max-len: [\"error\", 240] */\r\n\r\nimport Axios from 'axios';\r\nimport probe from 'probe-image-size';\r\nimport {FS} from '../../lib';\r\nimport {Punishments} from '../punishments';\r\nimport {escapeHTML} from '../../lib/utils';\r\n\r\nconst EMOJI_BAN_DURATION = 7 * 24 * 60 * 60 * 1000; // 1 week\r\nconst MAX_REASON_LENGTH = 300;\r\nconst MAX_EMOJI_SIZE = 64;\r\nconst EMOJI_SIZE = 32;\r\nconst ERROR_NO_EMOJI_NAME = 'Specify an emoji name.';\r\nconst ERROR_NO_EMOJI_URL = 'Specify an emoji URL.';\r\nconst ERROR_NO_VALID_EMOJI_IMAGE = 'Specify a PNG or GIF image.';\r\nconst POKEMON_ICON_REGEX = /:mon-([a-z0-9\\s]+):/gi;\r\nconst ITEM_ICON_REGEX = /:item-([a-z0-9\\s]+):/gi;\r\nconst TYPE_ICON_REGEX = /:type-([a-z0-9\\s]+):/gi;\r\n\r\ntype Emojis = Record<string, string>;\r\n\r\nexport const emojis: Emojis = JSON.parse(\r\n\tFS('config/chat-plugins/emojis.json').readIfExistsSync() || \"{}\"\r\n);\r\n\r\nconst createEmojiRegex = (\r\n\temojiNames: string[],\r\n) => new RegExp(`(${emojiNames.map((emojiName) => `:${emojiName}:`).join('|')})`, 'g');\r\n\r\nlet emojiRegex: RegExp = createEmojiRegex(Object.keys(emojis));\r\n\r\nconst saveEmojis = () => {\r\n\tFS('config/chat-plugins/emojis.json').writeUpdate(() => JSON.stringify(emojis));\r\n};\r\n\r\nconst addOrUpdateEmoji = (name: string, filename: string) => {\r\n\temojis[name] = filename;\r\n\temojiRegex = createEmojiRegex(Object.keys(emojis));\r\n\tsaveEmojis();\r\n};\r\n\r\nconst deleteEmoji = (name: string) => {\r\n\tdelete emojis[name];\r\n\temojiRegex = createEmojiRegex(Object.keys(emojis));\r\n\tsaveEmojis();\r\n};\r\n\r\nconst toAlphaNumeric = (text: string) => ('' + text).replace(/[^A-Za-z0-9]+/g, '');\r\n\r\nexport const createEmojiHtml = (\r\n\tname: string,\r\n\tfilename: string,\r\n) => `<img src=\"https://clover.weedl.es:8443/emojis/${filename}\" title=\":${name}:\" height=\"${EMOJI_SIZE}\" width=\"${EMOJI_SIZE}\">`;\r\n\r\nconst downloadEmoji = async (emojiName: string, imageUrl: string) => {\r\n\tconst imagebuffer = (await Axios.get(imageUrl, {responseType: 'arraybuffer'})).data;\r\n\tconst probeResult = probe.sync(imagebuffer);\r\n\r\n\tif (!probeResult) {\r\n\t\tthrow new Chat.ErrorMessage(ERROR_NO_VALID_EMOJI_IMAGE);\r\n\t}\r\n\r\n\tconst {width, height, type} = probeResult;\r\n\r\n\tif (!['png', 'gif'].includes(type)) {\r\n\t\tthrow new Chat.ErrorMessage(ERROR_NO_VALID_EMOJI_IMAGE);\r\n\t}\r\n\r\n\tconst maxSize = Math.max(width, height);\r\n\tconst minSize = Math.min(width, height);\r\n\r\n\tif (maxSize > MAX_EMOJI_SIZE || minSize < EMOJI_SIZE || (width !== height)) {\r\n\t\tthrow new Chat.ErrorMessage(`Specify a square image between 32x32 and 64x64. Your image is ${probeResult.width}x${probeResult.height}`);\r\n\t}\r\n\r\n\tconst fileName = `${emojiName}.${type}`;\r\n\tawait FS(`./config/emojis/${fileName}`).write(imagebuffer);\r\n\r\n\treturn fileName;\r\n};\r\n\r\nexport const commands: Chat.ChatCommands = {\r\n\temojis: 'emoji',\r\n\temoji: {\r\n\t\tlist() {\r\n\t\t\tthis.runBroadcast();\r\n\t\t\treturn this.sendReplyBox(`<b><u>Emojis</u> <i>(hover for name, try <code>:EMOJINAME:</code>)</i></b><br />${Object.entries(emojis).map(([emojiName, emojiUrl]) => createEmojiHtml(emojiName, emojiUrl)).join(' ')}`);\r\n\t\t},\r\n\t\tupdate: 'add',\r\n\t\tasync add(target, room, user) {\r\n\t\t\tthis.checkCan('emoji');\r\n\t\t\tconst [rawEmojiName, emojiUrl] = target.split(',').map((part) => part.trim());\r\n\r\n\t\t\tif (!rawEmojiName) {\r\n\t\t\t\treturn this.errorReply(ERROR_NO_EMOJI_NAME);\r\n\t\t\t}\r\n\t\t\tconst emojiName = toAlphaNumeric(rawEmojiName);\r\n\r\n\t\t\tif (!emojiUrl) {\r\n\t\t\t\treturn this.errorReply(ERROR_NO_EMOJI_URL);\r\n\t\t\t}\r\n\r\n\t\t\tconst filename = await downloadEmoji(emojiName, emojiUrl);\r\n\r\n\t\t\taddOrUpdateEmoji(emojiName, filename);\r\n\r\n\t\t\tthis.addGlobalModAction(`${user.name} added emoji :${emojiName}:`);\r\n\t\t\treturn this.sendReplyBox(`Added: ${createEmojiHtml(emojiName, filename)}`);\r\n\t\t},\r\n\t\tremove(target, room, user) {\r\n\t\t\tthis.checkCan('emoji');\r\n\t\t\tconst emojiName = toAlphaNumeric(target);\r\n\r\n\t\t\tif (!emojis[emojiName]) {\r\n\t\t\t\treturn this.sendReplyBox(`No such emoji :${emojiName}: exists.`);\r\n\t\t\t}\r\n\r\n\t\t\tdeleteEmoji(emojiName);\r\n\r\n\t\t\tthis.addGlobalModAction(`${user.name} deleted emoji :${emojiName}:`);\r\n\t\t\treturn this.sendReply(`Deleted :${emojiName}:`);\r\n\t\t},\r\n\t\tasync ban(target, room, user) {\r\n\t\t\tconst {targetUser, targetUsername, rest: reason} = this.splitUser(target);\r\n\r\n\t\t\tif (!targetUser) return this.errorReply(`User '${targetUsername}' not found.`);\r\n\t\t\tif (reason.length > MAX_REASON_LENGTH) {\r\n\t\t\t\treturn this.errorReply(`The reason is too long. It cannot exceed ${MAX_REASON_LENGTH} characters.`);\r\n\t\t\t}\r\n\r\n\t\t\tthis.checkCan('lock', targetUser);\r\n\r\n\t\t\tawait Punishments.punish(targetUser, {\r\n\t\t\t\ttype: 'EMOJIBAN',\r\n\t\t\t\texpireTime: Date.now() + EMOJI_BAN_DURATION,\r\n\t\t\t\tid: targetUser.id,\r\n\t\t\t\treason,\r\n\t\t\t}, false);\r\n\t\t\ttargetUser.popup(`|modal|${user.name} has emoji banned you for ${Chat.toDurationString(EMOJI_BAN_DURATION)}. ${reason}`);\r\n\t\t\tthis.addGlobalModAction(`${targetUser.name} was emoji banned by ${user.name} for ${Chat.toDurationString(EMOJI_BAN_DURATION)}.${(reason ? ` (${reason})` : ``)}`);\r\n\t\t\tthis.modlog(`EMOJI`, targetUser, reason);\r\n\t\t},\r\n\t\tunban(target, room, user) {\r\n\t\t\tconst {targetUser, targetUsername} = this.splitUser(target);\r\n\r\n\t\t\tthis.checkCan('lock', targetUser);\r\n\r\n\t\t\tconst success = Punishments.unpunish(targetUser?.id || toID(targetUsername), 'EMOJIBAN');\r\n\t\t\tif (success) {\r\n\t\t\t\tthis.addGlobalModAction(`${(targetUser ? targetUser.name : toID(targetUsername))}'s emoji ban was lifted by ${user.name}.`);\r\n\t\t\t\tthis.modlog('UNEMOJIBAN', (targetUser || toID(targetUsername)), null, {noip: 1, noalts: 1});\r\n\t\t\t} else {\r\n\t\t\t\tthis.errorReply(`${(targetUser ? targetUser.name : targetUsername)} is not emoji banned.`);\r\n\t\t\t}\r\n\t\t},\r\n\t},\r\n\temojihelp() {\r\n\t\tthis.runBroadcast();\r\n\t\treturn this.sendReplyBox([\r\n\t\t\t`<code>/emoji list</code> - Lists all available emojis.`,\r\n\t\t\t`<code>/emoji add [name], [image url]</code> - Adds or updates an emoji. Requires: &`,\r\n\t\t\t`<code>/emoji remove [name]</code> - Removes an emoji. Requires: &`,\r\n\t\t\t`<code>/emoji ban [user], [reason]</code> - Bans a user from using emojis. Requires: &, @, %`,\r\n\t\t\t`<code>/emoji unban [user]</code> - Removes an emoji ban from a user. Requires: &, @, %`,\r\n\t\t].join('<br />'));\r\n\t},\r\n};\r\n\r\nexport const checkEmojiLevel = (user: User, room: Room): boolean => {\r\n\tif (user.can('bypassall')) return true;\r\n\tif (room.settings.emojiLevel && !room.auth.atLeast(user, room.settings.emojiLevel)) return false;\r\n\treturn true;\r\n};\r\n\r\nexport const chatfilter: Chat.ChatFilter = (message, user, room) => {\r\n\tif (room && !checkEmojiLevel(user, room)) return message;\r\n\tconst prefix = message.startsWith('/html') ? '' : '/html ';\r\n\tlet newMessage = escapeHTML(message);\r\n\tlet anyEmoji = false;\r\n\tif (!Punishments.hasPunishType(user.id, 'EMOJIBAN')) {\r\n\t\tnewMessage = newMessage.replace(emojiRegex, (match) => {\r\n\t\t\tanyEmoji = true;\r\n\t\t\tconst emojiName = match.slice(1, -1);\r\n\t\t\treturn createEmojiHtml(emojiName, emojis[emojiName]);\r\n\t\t});\r\n\t\tnewMessage = newMessage.replace(POKEMON_ICON_REGEX, (match) => {\r\n\t\t\tconst monName = match.slice(5, -1);\r\n\t\t\tconst mon = Dex.species.get(monName);\r\n\t\t\tif (mon.exists) {\r\n\t\t\t\tanyEmoji = true;\r\n\t\t\t\treturn `<psicon pokemon=\"${mon.id}\" />`;\r\n\t\t\t}\r\n\t\t\treturn match;\r\n\t\t});\r\n\t\tnewMessage = newMessage.replace(ITEM_ICON_REGEX, (match) => {\r\n\t\t\tconst itemName = match.slice(6, -1);\r\n\t\t\tconst item = Dex.items.get(itemName);\r\n\t\t\tif (item.exists) {\r\n\t\t\t\tanyEmoji = true;\r\n\t\t\t\treturn `<psicon item=\"${item.id}\" />`;\r\n\t\t\t}\r\n\t\t\treturn match;\r\n\t\t});\r\n\t\tnewMessage = newMessage.replace(TYPE_ICON_REGEX, (match) => {\r\n\t\t\tconst typeName = match.slice(6, -1);\r\n\t\t\tconst type = Dex.types.get(typeName);\r\n\t\t\tif (type.exists) {\r\n\t\t\t\tanyEmoji = true;\r\n\t\t\t\treturn `<psicon type=\"${type.id}\" />`;\r\n\t\t\t}\r\n\t\t\treturn match;\r\n\t\t});\r\n\t}\r\n\tif (anyEmoji) {\r\n\t\treturn prefix + newMessage;\r\n\t}\r\n\treturn message;\r\n};\r\n"],
  "mappings": "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",
  "names": ["Axios", "probe"]
}
