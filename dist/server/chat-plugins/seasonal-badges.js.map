{
  "version": 3,
  "sources": ["../../../server/chat-plugins/seasonal-badges.ts"],
  "sourcesContent": ["import {Badge} from '../badges';\nimport {Badges} from './badges';\n\ninterface SeasonalBadge {\n\tbadgeId: string;\n\tmessage: string;\n\tseasonStart: string;\n\tseasonEnd: string;\n}\n\ninterface InitializedSeasonalBadge extends SeasonalBadge {\n\tbadge: Badge;\n}\n\nlet seasonalBadges: InitializedSeasonalBadge[] = [];\nlet isInitialized = false;\n\nconst initializeSeasonalBadges = async () => {\n\tif (isInitialized || !Config.usesqlitebadges) return;\n\tconst badgesToInitialize = [\n\t\t{\n\t\t\tbadgeId: 'christmas',\n\t\t\tmessage: 'Happy Holidays! Unwrap a nifty badge!',\n\t\t\tseasonStart: '12-25',\n\t\t\tseasonEnd: '12-31',\n\t\t},\n\t\t{\n\t\t\tbadgeId: 'anniversary',\n\t\t\tmessage: 'Happy anniversay, Ocbmon Showdown!',\n\t\t\tseasonStart: '01-16',\n\t\t\tseasonEnd: '01-20',\n\t\t},\n\t];\n\tconst initializedSeasonalBadges: InitializedSeasonalBadge[] = [];\n\n\tawait Promise.all(badgesToInitialize.map(async (badgeToInitialize) => {\n\t\tconst badge = await Badges.getBadge(badgeToInitialize.badgeId);\n\n\t\tif (badge) {\n\t\t\tinitializedSeasonalBadges.push({\n\t\t\t\t...badgeToInitialize,\n\t\t\t\tbadge,\n\t\t\t});\n\t\t}\n\t}));\n\n\tseasonalBadges = initializedSeasonalBadges;\n\tisInitialized = true;\n};\n\nconst createDateString = (date: Date): string => {\n\tlet month = `${date.getMonth() + 1}`;\n\tif (month.length < 2) month = '0' + month;\n\n\tlet day = `${date.getDate()}`;\n\tif (day.length < 2) day = '0' + day;\n\n\treturn `${month}-${day}`;\n};\n\nconst isInSeason = (date: Date, seasonalBadge: SeasonalBadge): boolean => {\n\tconst {seasonStart, seasonEnd} = seasonalBadge;\n\tconst dateString = createDateString(date);\n\n\tif (seasonalBadge.seasonStart.localeCompare(seasonalBadge.seasonEnd) <= 0) {\n\t\treturn (seasonStart.localeCompare(dateString) <= 0) && (dateString.localeCompare(seasonEnd) <= 0);\n\t} else {\n\t\treturn (('01-01'.localeCompare(dateString) <= 0) && dateString.localeCompare(seasonEnd) <= 0) &&\n\t\t((dateString.localeCompare('12-31') <= 0) && seasonStart.localeCompare(dateString) <= 0);\n\t}\n};\n\nexport const loginfilter: Chat.LoginFilter = user => {\n\tvoid initializeSeasonalBadges().then(() => {\n\t\tseasonalBadges.forEach((seasonalBadge) => {\n\t\t\tif (isInSeason(new Date(), seasonalBadge)) {\n\t\t\t\tvoid Badges.getUserBadges(user.id)\n\t\t\t\t\t.then((userBadges) => {\n\t\t\t\t\t\tconst hasBadge = userBadges.some((userBadge) => userBadge.badge_id === seasonalBadge.badgeId);\n\t\t\t\t\t\tif (!hasBadge) {\n\t\t\t\t\t\t\tvoid Badges.addBadgeToUser(user.id, seasonalBadge.badgeId, user, true)\n\t\t\t\t\t\t\t\t.then(() => {\n\t\t\t\t\t\t\t\t\tuser.send(`|pm|&|${user.tempGroup}${user.name}|/raw <div class=\"broadcast-blue\"><b>${seasonalBadge.message}</b></div>`);\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t}\n\t\t});\n\t});\n};\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,IAAAA,iBAAqB;AAarB,IAAI,iBAA6C,CAAC;AAClD,IAAI,gBAAgB;AAEpB,MAAM,2BAA2B,YAAY;AAC5C,MAAI,iBAAiB,CAAC,OAAO;AAAiB;AAC9C,QAAM,qBAAqB;AAAA,IAC1B;AAAA,MACC,SAAS;AAAA,MACT,SAAS;AAAA,MACT,aAAa;AAAA,MACb,WAAW;AAAA,IACZ;AAAA,IACA;AAAA,MACC,SAAS;AAAA,MACT,SAAS;AAAA,MACT,aAAa;AAAA,MACb,WAAW;AAAA,IACZ;AAAA,EACD;AACA,QAAM,4BAAwD,CAAC;AAE/D,QAAM,QAAQ,IAAI,mBAAmB,IAAI,OAAO,sBAAsB;AACrE,UAAM,QAAQ,MAAM,sBAAO,SAAS,kBAAkB,OAAO;AAE7D,QAAI,OAAO;AACV,gCAA0B,KAAK;AAAA,QAC9B,GAAG;AAAA,QACH;AAAA,MACD,CAAC;AAAA,IACF;AAAA,EACD,CAAC,CAAC;AAEF,mBAAiB;AACjB,kBAAgB;AACjB;AAEA,MAAM,mBAAmB,CAAC,SAAuB;AAChD,MAAI,QAAQ,GAAG,KAAK,SAAS,IAAI;AACjC,MAAI,MAAM,SAAS;AAAG,YAAQ,MAAM;AAEpC,MAAI,MAAM,GAAG,KAAK,QAAQ;AAC1B,MAAI,IAAI,SAAS;AAAG,UAAM,MAAM;AAEhC,SAAO,GAAG,SAAS;AACpB;AAEA,MAAM,aAAa,CAAC,MAAY,kBAA0C;AACzE,QAAM,EAAC,aAAa,UAAS,IAAI;AACjC,QAAM,aAAa,iBAAiB,IAAI;AAExC,MAAI,cAAc,YAAY,cAAc,cAAc,SAAS,KAAK,GAAG;AAC1E,WAAQ,YAAY,cAAc,UAAU,KAAK,KAAO,WAAW,cAAc,SAAS,KAAK;AAAA,EAChG,OAAO;AACN,WAAS,QAAQ,cAAc,UAAU,KAAK,KAAM,WAAW,cAAc,SAAS,KAAK,MACzF,WAAW,cAAc,OAAO,KAAK,KAAM,YAAY,cAAc,UAAU,KAAK;AAAA,EACvF;AACD;AAEO,MAAM,cAAgC,UAAQ;AACpD,OAAK,yBAAyB,EAAE,KAAK,MAAM;AAC1C,mBAAe,QAAQ,CAAC,kBAAkB;AACzC,UAAI,WAAW,IAAI,KAAK,GAAG,aAAa,GAAG;AAC1C,aAAK,sBAAO,cAAc,KAAK,EAAE,EAC/B,KAAK,CAAC,eAAe;AACrB,gBAAM,WAAW,WAAW,KAAK,CAAC,cAAc,UAAU,aAAa,cAAc,OAAO;AAC5F,cAAI,CAAC,UAAU;AACd,iBAAK,sBAAO,eAAe,KAAK,IAAI,cAAc,SAAS,MAAM,IAAI,EACnE,KAAK,MAAM;AACX,mBAAK,KAAK,SAAS,KAAK,YAAY,KAAK,4CAA4C,cAAc,mBAAmB;AAAA,YACvH,CAAC;AAAA,UACH;AAAA,QACD,CAAC;AAAA,MACH;AAAA,IACD,CAAC;AAAA,EACF,CAAC;AACF;",
  "names": ["import_badges"]
}
