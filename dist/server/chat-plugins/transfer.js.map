{
  "version": 3,
  "sources": ["../../../server/chat-plugins/transfer.ts"],
  "sourcesContent": ["import {FS} from \"../../lib\";\r\nimport {Badges} from \"./badges\";\r\nimport {LadderStore} from '../ladders-local';\r\nimport {transferTourWins} from \"./data-badges\";\r\n\r\nconst TRANSFER_COOLDOWN = 7 * 24 * 60 * 60 * 1000; // 1 week\r\n\r\ninterface UserTransfer {\r\n\tsourceId: string;\r\n\ttargetId: string;\r\n\tisComplete: boolean;\r\n\tcompleted?: number;\r\n}\r\n\r\ntype Transfers = Record<string, UserTransfer>;\r\n\r\nconst transfers: Transfers = JSON.parse(\r\n\tFS('config/chat-plugins/transfer.json').readIfExistsSync() || \"{}\"\r\n);\r\n\r\nconst saveTransfers = () => {\r\n\tFS('config/chat-plugins/transfer.json').writeUpdate(() => JSON.stringify(transfers));\r\n};\r\n\r\nconst checkCooldown = (userId: string) => Object.values(transfers).filter((transfer) => {\r\n\tif ((transfer.sourceId !== userId) && (transfer.targetId !== userId)) return false;\r\n\tif (!transfer.isComplete) return false;\r\n\tif (transfer.completed && ((transfer.completed + TRANSFER_COOLDOWN) < Date.now())) return false;\r\n\treturn true;\r\n});\r\n\r\nconst userInBattle = (user: User) => {\r\n\tconst curBattles: [User, string][] = [...user.inRooms]\r\n\t\t.filter(id => {\r\n\t\t\tconst battle = Rooms.get(id)?.battle;\r\n\t\t\treturn (\r\n\t\t\t\tbattle && battle.playerTable[user.id]\r\n\t\t\t);\r\n\t\t})\r\n\t\t.map(id => [user, id]);\r\n\r\n\treturn curBattles.length !== 0;\r\n};\r\n\r\nexport const commands: Chat.ChatCommands = {\r\n\ttransfer: {\r\n\t\tstart(target, room, user) {\r\n\t\t\tif (transfers[user.id]) throw new Chat.ErrorMessage('You have already started a transfer. Please use /transfer cancel to cancel it first.');\r\n\t\t\tconst targetId = toID(target);\r\n\t\t\tif (target.length < 0) {\r\n\t\t\t\tthrow new Chat.ErrorMessage('Please provide a valid user to transfer to.');\r\n\t\t\t}\r\n\t\t\tif (targetId === user.id) throw new Chat.ErrorMessage('You cannot transfer to yourself.');\r\n\t\t\tif (checkCooldown(user.id)) throw new Chat.ErrorMessage('You have already transferred to another user in the last week. Please wait 7 days between transfers.');\r\n\t\t\tif (checkCooldown(targetId)) throw new Chat.ErrorMessage('Target user has already transferred to another user in the last week. Please wait 7 days between transfers.');\r\n\t\t\ttransfers[user.id] = {\r\n\t\t\t\tsourceId: user.id,\r\n\t\t\t\ttargetId: targetId,\r\n\t\t\t\tisComplete: false,\r\n\t\t\t};\r\n\t\t\tsaveTransfers();\r\n\r\n\t\t\treturn this.sendReplyBox(`Transfer to ${targetId} successfully initiated.`);\r\n\t\t},\r\n\t\tcancel(target, room, user) {\r\n\t\t\tif (!transfers[user.id]) throw new Chat.ErrorMessage('You have not started a transfer.');\r\n\t\t\tdelete transfers[user.id];\r\n\t\t\tsaveTransfers();\r\n\r\n\t\t\treturn this.sendReplyBox('Transfer successfully canceled.');\r\n\t\t},\r\n\t\tasync accept(target, room, user) {\r\n\t\t\tconst targetId = toID(target);\r\n\t\t\tconst transfer = transfers[targetId];\r\n\t\t\tif (!transfer || transfer.targetId !== user.id) throw new Chat.ErrorMessage(`No transfer has been initiated between you and ${targetId}.`);\r\n\t\t\tif (transfer.isComplete) throw new Chat.ErrorMessage('Transfer has already been completed.');\r\n\t\t\tif (userInBattle(user)) throw new Chat.ErrorMessage('You cannot accept a transfer while in a battle.');\r\n\t\t\tif (checkCooldown(user.id)) throw new Chat.ErrorMessage('You have already transferred to another user in the last week. Please wait 7 days between transfers.');\r\n\t\t\tif (checkCooldown(targetId)) throw new Chat.ErrorMessage('Target user has already transferred to another user in the last week. Please wait 7 days between transfers.');\r\n\r\n\t\t\tconst sourceId = transfer.sourceId;\r\n\r\n\t\t\tconst updatedRows = await LadderStore.changeName(sourceId, user.name);\r\n\t\t\tconst allBadges = await Badges.getUserBadges(sourceId);\r\n\r\n\t\t\tif (allBadges.length) {\r\n\t\t\t\tfor (const badge of allBadges) {\r\n\t\t\t\t\tawait Badges.removeBadgeFromUser(sourceId, badge.badge_id, user, true);\r\n\t\t\t\t\tawait Badges.addBadgeToUser(user.id, badge.badge_id, user, true);\r\n\t\t\t\t\tif (badge.badge_data) {\r\n\t\t\t\t\t\tawait Badges.updateBadgeData(user.id, badge.badge_id, badge.badge_data, user, true);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tawait transferTourWins(targetId, user.id, user);\r\n\r\n\t\t\ttransfers[targetId].isComplete = true;\r\n\t\t\ttransfers[targetId].completed = Date.now();\r\n\t\t\tsaveTransfers();\r\n\r\n\t\t\treturn this.sendReplyBox(`Successfuly transfered ladder data and badges. Raw data: ${JSON.stringify({rating: updatedRows, badges: allBadges})}`);\r\n\t\t},\r\n\t},\r\n\ttransferhelp() {\r\n\t\tthis.sendReplyBox(\r\n\t\t\t`<code>/transfer start [new user]</code>: Begins a transfer of user data from your current user to a desired target user. Use this command on your old user.<br />` +\r\n\t\t\t`<code>/transfer cancel</code>: Cancels an in-progress transfer started from your current user.<br />` +\r\n\t\t\t`<code>/transfer accept [old user]</code>: Accepts a transfer from another user to your current user. Use this command on your new user.`\r\n\t\t);\r\n\t},\r\n};\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAiB;AACjB,oBAAqB;AACrB,2BAA0B;AAC1B,yBAA+B;AAE/B,MAAM,oBAAoB,IAAI,KAAK,KAAK,KAAK;AAW7C,MAAM,YAAuB,KAAK;AAAA,MACjC,eAAG,mCAAmC,EAAE,iBAAiB,KAAK;AAC/D;AAEA,MAAM,gBAAgB,MAAM;AAC3B,qBAAG,mCAAmC,EAAE,YAAY,MAAM,KAAK,UAAU,SAAS,CAAC;AACpF;AAEA,MAAM,gBAAgB,CAAC,WAAmB,OAAO,OAAO,SAAS,EAAE,OAAO,CAAC,aAAa;AACvF,MAAK,SAAS,aAAa,UAAY,SAAS,aAAa;AAAS,WAAO;AAC7E,MAAI,CAAC,SAAS;AAAY,WAAO;AACjC,MAAI,SAAS,aAAe,SAAS,YAAY,oBAAqB,KAAK,IAAI;AAAI,WAAO;AAC1F,SAAO;AACR,CAAC;AAED,MAAM,eAAe,CAAC,SAAe;AACpC,QAAM,aAA+B,CAAC,GAAG,KAAK,OAAO,EACnD,OAAO,QAAM;AACb,UAAM,SAAS,MAAM,IAAI,EAAE,GAAG;AAC9B,WACC,UAAU,OAAO,YAAY,KAAK,EAAE;AAAA,EAEtC,CAAC,EACA,IAAI,QAAM,CAAC,MAAM,EAAE,CAAC;AAEtB,SAAO,WAAW,WAAW;AAC9B;AAEO,MAAM,WAA8B;AAAA,EAC1C,UAAU;AAAA,IACT,MAAM,QAAQ,MAAM,MAAM;AACzB,UAAI,UAAU,KAAK,EAAE;AAAG,cAAM,IAAI,KAAK,aAAa,sFAAsF;AAC1I,YAAM,WAAW,KAAK,MAAM;AAC5B,UAAI,OAAO,SAAS,GAAG;AACtB,cAAM,IAAI,KAAK,aAAa,6CAA6C;AAAA,MAC1E;AACA,UAAI,aAAa,KAAK;AAAI,cAAM,IAAI,KAAK,aAAa,kCAAkC;AACxF,UAAI,cAAc,KAAK,EAAE;AAAG,cAAM,IAAI,KAAK,aAAa,sGAAsG;AAC9J,UAAI,cAAc,QAAQ;AAAG,cAAM,IAAI,KAAK,aAAa,6GAA6G;AACtK,gBAAU,KAAK,EAAE,IAAI;AAAA,QACpB,UAAU,KAAK;AAAA,QACf;AAAA,QACA,YAAY;AAAA,MACb;AACA,oBAAc;AAEd,aAAO,KAAK,aAAa,eAAe,kCAAkC;AAAA,IAC3E;AAAA,IACA,OAAO,QAAQ,MAAM,MAAM;AAC1B,UAAI,CAAC,UAAU,KAAK,EAAE;AAAG,cAAM,IAAI,KAAK,aAAa,kCAAkC;AACvF,aAAO,UAAU,KAAK,EAAE;AACxB,oBAAc;AAEd,aAAO,KAAK,aAAa,iCAAiC;AAAA,IAC3D;AAAA,IACA,MAAM,OAAO,QAAQ,MAAM,MAAM;AAChC,YAAM,WAAW,KAAK,MAAM;AAC5B,YAAM,WAAW,UAAU,QAAQ;AACnC,UAAI,CAAC,YAAY,SAAS,aAAa,KAAK;AAAI,cAAM,IAAI,KAAK,aAAa,kDAAkD,WAAW;AACzI,UAAI,SAAS;AAAY,cAAM,IAAI,KAAK,aAAa,sCAAsC;AAC3F,UAAI,aAAa,IAAI;AAAG,cAAM,IAAI,KAAK,aAAa,iDAAiD;AACrG,UAAI,cAAc,KAAK,EAAE;AAAG,cAAM,IAAI,KAAK,aAAa,sGAAsG;AAC9J,UAAI,cAAc,QAAQ;AAAG,cAAM,IAAI,KAAK,aAAa,6GAA6G;AAEtK,YAAM,WAAW,SAAS;AAE1B,YAAM,cAAc,MAAM,iCAAY,WAAW,UAAU,KAAK,IAAI;AACpE,YAAM,YAAY,MAAM,qBAAO,cAAc,QAAQ;AAErD,UAAI,UAAU,QAAQ;AACrB,mBAAW,SAAS,WAAW;AAC9B,gBAAM,qBAAO,oBAAoB,UAAU,MAAM,UAAU,MAAM,IAAI;AACrE,gBAAM,qBAAO,eAAe,KAAK,IAAI,MAAM,UAAU,MAAM,IAAI;AAC/D,cAAI,MAAM,YAAY;AACrB,kBAAM,qBAAO,gBAAgB,KAAK,IAAI,MAAM,UAAU,MAAM,YAAY,MAAM,IAAI;AAAA,UACnF;AAAA,QACD;AAAA,MACD;AAEA,gBAAM,qCAAiB,UAAU,KAAK,IAAI,IAAI;AAE9C,gBAAU,QAAQ,EAAE,aAAa;AACjC,gBAAU,QAAQ,EAAE,YAAY,KAAK,IAAI;AACzC,oBAAc;AAEd,aAAO,KAAK,aAAa,4DAA4D,KAAK,UAAU,EAAC,QAAQ,aAAa,QAAQ,UAAS,CAAC,GAAG;AAAA,IAChJ;AAAA,EACD;AAAA,EACA,eAAe;AACd,SAAK;AAAA,MACJ;AAAA,IAGD;AAAA,EACD;AACD;",
  "names": []
}
