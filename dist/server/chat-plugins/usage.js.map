{
  "version": 3,
  "sources": ["../../../server/chat-plugins/usage.ts"],
  "sourcesContent": ["import Axios from 'axios';\nimport {OFFICIAL_CLODOWN_AVATARS} from '../chat-commands/avatars';\n\ninterface WinUsage {\n\tusage: number;\n\twin: number;\n}\n\ntype PokemonStats = WinUsage & {\n\tpartner: Record<string, WinUsage>,\n\tagainst: Record<string, WinUsage>,\n\titem: Record<string, WinUsage>,\n\tability: Record<string, WinUsage>,\n\tnature: Record<string, WinUsage>,\n\tmove: Record<string, WinUsage>,\n};\n\ntype UsageStats = {\n\tsubsections: string[],\n} | {\n\tsubsections: string[],\n\ttotalTeams: number,\n\tpokemonStats: Record<string, PokemonStats>,\n};\n\n/* eslint-disable max-len */\nconst createAvatarHtml = (\n\tavatarName: string,\n\tisCustom = false,\n) => `<img src=\"//${Config.routes.client}/sprites/trainers${isCustom ? '-custom' : ''}/${avatarName}.png\" title=\"${avatarName}\" alt=\"${avatarName}\" width=\"80\" height=\"80\" class=\"pixelated\" />`;\n/* eslint-enable max-len */\n\nconst BASE_URL = 'https://usage.weedl.es';\n\nexport const getStats = async (\n\tformat?: string,\n\tyear?: string,\n\tmonth?: string,\n): Promise<UsageStats | undefined> => {\n\ttry {\n\t\tconst path = [format, year, month]\n\t\t\t.filter((value) => value !== undefined).join('/');\n\t\tconst url = `${BASE_URL}/data/${path}/index.json`;\n\n\t\tconst {data} = await Axios.get(url, {\n\t\t\tresponseType: 'json',\n\t\t});\n\n\t\tif (typeof data === 'string') {\n\t\t\treturn undefined;\n\t\t}\n\n\t\treturn data as UsageStats;\n\t} catch (error) { }\n\n\treturn undefined;\n};\n\nconst formatPercentage = (percentage: number) => Math.round((percentage * 100 + Number.EPSILON) * 100) / 100;\n/* eslint-disable max-len */\nconst resultString = (pokemon: string, usage: number, wins: number, totalTeams: number) => `<span><psicon pokemon=\"${pokemon}\" style=\"vertical-align:-7px;margin:-2px\" />${pokemon} (${formatPercentage(usage / totalTeams)}%, WR: ${formatPercentage(wins / usage)}%)</span>`;\n/* eslint-enable max-len */\nexport const commands: Chat.ChatCommands = {\n\tusage: {\n\t\ttier: 'format',\n\t\tasync format(target, room) {\n\t\t\tthis.runBroadcast();\n\n\t\t\tif (!target) {\n\t\t\t\treturn this.sendReplyBox(\n\t\t\t\t\t'<b><u>Usage Stats</u></b><br />' +\n\t\t\t\t\t'<p>Daily usage stats for most Ocbmon Showdown formats can be found here:</p>' +\n\t\t\t\t\t'<ul><li><a href=\"https://usage.weedl.es\">Usage Site</a></li></ul>'\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tlet [targetFormatId, targetYearText, targetMonthText] = target.split(',').map(toID);\n\n\t\t\tif (!targetFormatId) {\n\t\t\t\tconst format = room?.settings.defaultFormat || room?.battle?.format;\n\t\t\t\tif (!format) {\n\t\t\t\t\treturn this.sendReplyBox('Please specify a valid format.');\n\t\t\t\t}\n\t\t\t\ttargetFormatId = toID(format);\n\t\t\t}\n\n\t\t\tif (targetYearText) {\n\t\t\t\tconst targetYear = parseInt(targetYearText);\n\t\t\t\tif (Number.isNaN(targetYear) || targetYear > 3000) {\n\t\t\t\t\treturn this.sendReplyBox('Please specify a valid year.');\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (targetMonthText) {\n\t\t\t\tconst targetMonth = parseInt(targetMonthText);\n\t\t\t\tif (Number.isNaN(targetMonth) || targetMonth > 3000) {\n\t\t\t\t\treturn this.sendReplyBox('Please specify a valid month.');\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst stats = await getStats(targetFormatId, targetYearText, targetMonthText);\n\n\t\t\tif (!stats || !('pokemonStats' in stats)) {\n\t\t\t\treturn this.sendReplyBox('No stats available.');\n\t\t\t}\n\n\t\t\tconst allPokemonStats = Object.entries(stats.pokemonStats).sort((entryA, entryB) => {\n\t\t\t\tconst [, pokemonA] = entryA;\n\t\t\t\tconst [, pokemonB] = entryB;\n\n\t\t\t\treturn pokemonB.usage - pokemonA.usage;\n\t\t\t}).slice(0, 10); // TODO: Add \", all\" equivalent maybe\n\n\t\t\tconst messageParts = [targetFormatId, targetYearText, targetMonthText].filter((part) => part !== undefined);\n\t\t\tlet resultStr = `<span style=\"color:#999999;\">Usage for ${messageParts.join(',')}:</span><br />`;\n\n\t\t\tresultStr += allPokemonStats.map(([id, pokemonStats]) => {\n\t\t\t\tconst species = Dex.species.get(id);\n\t\t\t\tconst name = species.name || id;\n\n\t\t\t\treturn resultString(name, pokemonStats.usage, pokemonStats.win, stats.totalTeams);\n\t\t\t}).join(', ');\n\n\t\t\treturn this.sendReplyBox(resultStr);\n\t\t},\n\t\tmon: 'pokemon',\n\t\tasync pokemon(target, room) {\n\t\t\tthis.runBroadcast();\n\n\t\t\tlet [targetPokemon, targetFormatId, targetYearText, targetMonthText] = target.split(',').map(toID);\n\n\t\t\tif (!targetPokemon) {\n\t\t\t\treturn this.sendReplyBox('Please specify a Pokemon.');\n\t\t\t}\n\n\t\t\tif (!targetFormatId) {\n\t\t\t\tconst format = room?.settings.defaultFormat || room?.battle?.format;\n\t\t\t\tif (!format) {\n\t\t\t\t\treturn this.sendReplyBox('Please specify a valid format.');\n\t\t\t\t}\n\t\t\t\ttargetFormatId = toID(format);\n\t\t\t}\n\n\t\t\tif (targetYearText) {\n\t\t\t\tconst targetYear = parseInt(targetYearText);\n\t\t\t\tif (Number.isNaN(targetYear) || targetYear > 3000) {\n\t\t\t\t\treturn this.sendReplyBox('Please specify a valid year.');\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (targetMonthText) {\n\t\t\t\tconst targetMonth = parseInt(targetMonthText);\n\t\t\t\tif (Number.isNaN(targetMonth) || targetMonth > 3000) {\n\t\t\t\t\treturn this.sendReplyBox('Please specify a valid month.');\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst stats = await getStats(targetFormatId, targetYearText, targetMonthText);\n\n\t\t\tif (!stats || !('pokemonStats' in stats)) {\n\t\t\t\treturn this.sendReplyBox('No stats available.');\n\t\t\t}\n\n\t\t\tconst pokemonStats = stats.pokemonStats[targetPokemon];\n\n\t\t\tif (!pokemonStats) {\n\t\t\t\treturn this.sendReplyBox('No stats available.');\n\t\t\t}\n\n\t\t\tconst moves = Object.entries(pokemonStats.move).sort((entryA, entryB) => {\n\t\t\t\tconst [, moveA] = entryA;\n\t\t\t\tconst [, moveB] = entryB;\n\n\t\t\t\treturn moveB.usage - moveA.usage;\n\t\t\t}).slice(0, 10);\n\n\t\t\tconst abilities = Object.entries(pokemonStats.ability).sort((entryA, entryB) => {\n\t\t\t\tconst [, abilityA] = entryA;\n\t\t\t\tconst [, abilityB] = entryB;\n\n\t\t\t\treturn abilityB.usage - abilityA.usage;\n\t\t\t});\n\n\t\t\tconst items = Object.entries(pokemonStats.item).sort((entryA, entryB) => {\n\t\t\t\tconst [, itemA] = entryA;\n\t\t\t\tconst [, itemB] = entryB;\n\n\t\t\t\treturn itemB.usage - itemA.usage;\n\t\t\t}).slice(0, 5);\n\n\t\t\tconst pokemonName = Dex.species.get(targetPokemon)?.name || targetPokemon;\n\t\t\t/* eslint-disable max-len */\n\t\t\tconst messageParts = [pokemonName, targetFormatId, targetYearText, targetMonthText].filter((part) => part !== undefined);\n\t\t\t/* eslint-enable max-len */\n\t\t\tlet resultStr = `<span style=\"color:#999999;\">Usage for ${messageParts.join(',')}:</span><br />`;\n\n\t\t\tresultStr += `<psicon pokemon=\"${pokemonName}\" style=\"vertical-align:-7px;margin:-2px\" />${pokemonName}<br />`;\n\t\t\tresultStr += `<strong>Usage</strong>: ${formatPercentage(pokemonStats.usage / stats.totalTeams)}%<br />`;\n\t\t\tresultStr += `<strong>Win Rate</strong>: ${formatPercentage(pokemonStats.win / pokemonStats.usage)}%`;\n\n\t\t\tconst abilitiesStats = abilities.map(([abilityId, abilityStats]) => {\n\t\t\t\tconst ability = Dex.abilities.get(abilityId)?.name || abilityId;\n\t\t\t\treturn `${ability} (${formatPercentage(abilityStats.usage / pokemonStats.usage)}%, WR: ${formatPercentage(abilityStats.win / abilityStats.usage)}%)`;\n\t\t\t});\n\n\t\t\tif (abilitiesStats.length) {\n\t\t\t\tresultStr += '<br /><strong>Abilities</strong>: <br />';\n\t\t\t\tresultStr += abilitiesStats.join('<br />');\n\t\t\t}\n\n\t\t\tconst itemsStats = items.map(([itemId, itemStats]) => {\n\t\t\t\tconst item = Dex.items.get(itemId)?.name || itemId;\n\t\t\t\treturn `${item} (${formatPercentage(itemStats.usage / pokemonStats.usage)}%, WR: ${formatPercentage(itemStats.win / itemStats.usage)}%)`;\n\t\t\t});\n\n\t\t\tif (itemsStats.length) {\n\t\t\t\tresultStr += '<br /><strong>Items</strong>: <br />';\n\t\t\t\tresultStr += itemsStats.join('<br />');\n\t\t\t}\n\n\t\t\tconst movesStats = moves.map(([moveId, moveStats]) => {\n\t\t\t\tconst move = Dex.moves.get(moveId)?.name || moveId;\n\t\t\t\treturn `${move} (${formatPercentage(moveStats.usage / pokemonStats.usage)}%, WR: ${formatPercentage(moveStats.win / moveStats.usage)}%)`;\n\t\t\t});\n\n\t\t\tif (movesStats.length) {\n\t\t\t\tresultStr += '<br /><strong>Moves</strong>: <br />';\n\t\t\t\tresultStr += movesStats.join('<br />');\n\t\t\t}\n\n\t\t\treturn this.sendReplyBox(resultStr);\n\t\t},\n\t},\n\tclover: {\n\t\tavatars() {\n\t\t\tthis.runBroadcast();\n\t\t\tthis.sendReplyBox(\n\t\t\t\t'<b><u>Avatars</u> <i>(hover for name, try <code>/avatar NAME</code>)</i></b><br />' +\n\t\t\t\t`${[...OFFICIAL_CLODOWN_AVATARS].map((avatar) => createAvatarHtml(avatar)).join(' ')}`\n\t\t\t);\n\t\t},\n\t\tsprite(target) {\n\t\t\tthis.runBroadcast();\n\t\t\tconst targetMon = Dex.species.get(toID(target));\n\t\t\tif (!targetMon || !targetMon.exists) {\n\t\t\t\tthrow new Chat.ErrorMessage(`No such mon: ${target}`);\n\t\t\t}\n\n\t\t\tlet slug = toID(targetMon.baseSpecies);\n\n\t\t\tif (targetMon.forme) {\n\t\t\t\tslug += `-${toID(targetMon.forme)}`;\n\t\t\t}\n\n\t\t\tconst sprites = [\n\t\t\t\t`https://clover.weedl.es/sprites/gen5/${slug}.png`,\n\t\t\t\t`https://clover.weedl.es/sprites/gen5-back/${slug}.png`,\n\t\t\t\t`https://clover.weedl.es/sprites/gen5-shiny/${slug}.png`,\n\t\t\t\t`https://clover.weedl.es/sprites/gen5-back-shiny/${slug}.png`,\n\t\t\t];\n\n\t\t\tconst afdSprites = [\n\t\t\t\t`https://clover.weedl.es/sprites/afd/${slug}.png`,\n\t\t\t\t`https://clover.weedl.es/sprites/afd-back/${slug}.png`,\n\t\t\t\t`https://clover.weedl.es/sprites/afd-shiny/${slug}.png`,\n\t\t\t\t`https://clover.weedl.es/sprites/afd-back-shiny/${slug}.png`,\n\t\t\t];\n\n\t\t\tconst afd = `<details><summary><b>AFD Sprites</b></summary>${afdSprites.map((sprite) => `<img src=\"${sprite}\" width=\"96\" height=\"96\">`).join(' ')}</details>`;\n\n\t\t\tthis.sendReplyBox(`<b><u>${targetMon.name} Sprites</u></b><br />` +\n\t\t\t\tsprites.map((sprite) => `<img src=\"${sprite}\" width=\"96\" height=\"96\">`).join(' ') + afd);\n\t\t},\n\t},\n};\n"],
  "mappings": "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",
  "names": ["Axios"]
}
