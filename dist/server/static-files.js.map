{
  "version": 3,
  "sources": ["../../server/static-files.ts"],
  "sourcesContent": ["/**\n * Servidor de Arquivos Est\u00E1ticos\n * Serve o cliente Pokemon Showdown junto com o servidor\n */\n\nimport * as http from 'http';\nimport * as fs from 'fs';\nimport * as path from 'path';\nimport * as url from 'url';\n\nconst MIME_TYPES: {[key: string]: string} = {\n\t'.html': 'text/html',\n\t'.js': 'text/javascript',\n\t'.css': 'text/css',\n\t'.json': 'application/json',\n\t'.png': 'image/png',\n\t'.jpg': 'image/jpeg',\n\t'.gif': 'image/gif',\n\t'.ico': 'image/x-icon',\n\t'.svg': 'image/svg+xml',\n\t'.mp3': 'audio/mpeg',\n\t'.wav': 'audio/wav',\n\t'.ttf': 'font/ttf',\n\t'.woff': 'font/woff',\n\t'.woff2': 'font/woff2'\n};\n\n/**\n * Serve arquivos est\u00E1ticos do cliente\n */\nexport function serveStaticFile(req: http.IncomingMessage, res: http.ServerResponse): boolean {\n\tconst parsedUrl = url.parse(req.url || '');\n\tlet pathname = parsedUrl.pathname || '/';\n\t\n\t// Redireciona raiz para index.html da pasta public\n\tif (pathname === '/') {\n\t\treturn serveFile(req, res, '/public/index.html');\n\t}\n\t\n\t// Serve arquivos do cliente\n\tif (pathname.startsWith('/client/')) {\n\t\t// Remove /client/ e adiciona /public/client/\n\t\tconst clientPath = pathname.replace('/client/', '/public/client/');\n\t\treturn serveFile(req, res, clientPath);\n\t}\n\t\n\t// Serve arquivos p\u00FAblicos diretamente\n\tif (pathname.startsWith('/public/')) {\n\t\treturn serveFile(req, res, pathname);\n\t}\n\t\n\t// Tratamento espec\u00EDfico para favicon\n\tif (pathname === '/favicon.ico' || pathname.includes('favicon')) {\n\t\treturn serveFile(req, res, '/public/favicon.ico');\n\t}\n\t\n\t// Para outros caminhos, tenta servir da pasta public\n\treturn serveFile(req, res, '/public' + pathname);\n}\n\n/**\n * Serve um arquivo espec\u00EDfico\n */\nfunction serveFile(req: http.IncomingMessage, res: http.ServerResponse, pathname: string): boolean {\n\ttry {\n\t\t// Remove query parameters\n\t\tconst cleanPath = pathname.split('?')[0];\n\t\t\n\t\t// Previne directory traversal\n\t\tconst safePath = path.normalize(cleanPath).replace(/^(\\.\\.[\\/\\\\])+/, '');\n\t\t\n\t\t// Caminho completo do arquivo\n\t\tconst filePath = path.join(__dirname, '..', safePath);\n\t\t\n\t\t// Log do caminho completo para debug\n\t\tconsole.log(`Caminho completo: ${filePath}`);\n\t\t\n\t\t// Log para debug\n\t\tconsole.log(`Tentando servir: ${pathname} -> ${filePath}`);\n\t\t\n\t\t// Log espec\u00EDfico para favicon\n\t\tif (pathname.includes('favicon')) {\n\t\t\tconsole.log(`Favicon request: ${pathname}, file exists: ${fs.existsSync(filePath)}`);\n\t\t}\n\t\t\n\t\t// Se \u00E9 um diret\u00F3rio, tenta servir index.html\n\t\tif (fs.existsSync(filePath) && fs.statSync(filePath).isDirectory()) {\n\t\t\tconsole.log(`Diret\u00F3rio encontrado, tentando index.html: ${filePath}`);\n\t\t\treturn serveFile(req, res, path.join(safePath, 'index.html'));\n\t\t}\n\t\t\n\t\t// Verifica se o arquivo existe\n\t\tif (!fs.existsSync(filePath)) {\n\t\t\tconsole.log(`Arquivo n\u00E3o encontrado: ${filePath}`);\n\t\t\treturn false;\n\t\t}\n\t\t\n\t\t// Determina o content-type\n\t\tconst ext = path.extname(filePath).toLowerCase();\n\t\tconst contentType = MIME_TYPES[ext] || 'application/octet-stream';\n\t\t\n\t\t// L\u00EA e serve o arquivo\n\t\tconst content = fs.readFileSync(filePath);\n\t\t\n\t\tres.writeHead(200, {\n\t\t\t'Content-Type': contentType,\n\t\t\t'Content-Length': content.length,\n\t\t\t'Cache-Control': 'public, max-age=3600', // Cache por 1 hora\n\t\t\t'Access-Control-Allow-Origin': '*',\n\t\t\t'Access-Control-Allow-Methods': 'GET, OPTIONS',\n\t\t\t'Access-Control-Allow-Headers': 'Content-Type'\n\t\t});\n\t\t\n\t\tres.end(content);\n\t\treturn true;\n\t\t\n\t} catch (error) {\n\t\tconsole.error('Erro ao servir arquivo:', error);\n\t\treturn false;\n\t}\n}\n\n/**\n * Middleware para arquivos est\u00E1ticos\n */\nexport function staticFileMiddleware(req: http.IncomingMessage, res: http.ServerResponse, next: () => void): void {\n\tif (!serveStaticFile(req, res)) {\n\t\tnext();\n\t}\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA,SAAoB;AACpB,WAAsB;AACtB,UAAqB;AAErB,MAAM,aAAsC;AAAA,EAC3C,SAAS;AAAA,EACT,OAAO;AAAA,EACP,QAAQ;AAAA,EACR,SAAS;AAAA,EACT,QAAQ;AAAA,EACR,QAAQ;AAAA,EACR,QAAQ;AAAA,EACR,QAAQ;AAAA,EACR,QAAQ;AAAA,EACR,QAAQ;AAAA,EACR,QAAQ;AAAA,EACR,QAAQ;AAAA,EACR,SAAS;AAAA,EACT,UAAU;AACX;AAKO,SAAS,gBAAgB,KAA2B,KAAmC;AAC7F,QAAM,YAAY,IAAI,MAAM,IAAI,OAAO,EAAE;AACzC,MAAI,WAAW,UAAU,YAAY;AAGrC,MAAI,aAAa,KAAK;AACrB,WAAO,UAAU,KAAK,KAAK,oBAAoB;AAAA,EAChD;AAGA,MAAI,SAAS,WAAW,UAAU,GAAG;AAEpC,UAAM,aAAa,SAAS,QAAQ,YAAY,iBAAiB;AACjE,WAAO,UAAU,KAAK,KAAK,UAAU;AAAA,EACtC;AAGA,MAAI,SAAS,WAAW,UAAU,GAAG;AACpC,WAAO,UAAU,KAAK,KAAK,QAAQ;AAAA,EACpC;AAGA,MAAI,aAAa,kBAAkB,SAAS,SAAS,SAAS,GAAG;AAChE,WAAO,UAAU,KAAK,KAAK,qBAAqB;AAAA,EACjD;AAGA,SAAO,UAAU,KAAK,KAAK,YAAY,QAAQ;AAChD;AAKA,SAAS,UAAU,KAA2B,KAA0B,UAA2B;AAClG,MAAI;AAEH,UAAM,YAAY,SAAS,MAAM,GAAG,EAAE,CAAC;AAGvC,UAAM,WAAW,KAAK,UAAU,SAAS,EAAE,QAAQ,kBAAkB,EAAE;AAGvE,UAAM,WAAW,KAAK,KAAK,WAAW,MAAM,QAAQ;AAGpD,YAAQ,IAAI,qBAAqB,UAAU;AAG3C,YAAQ,IAAI,oBAAoB,eAAe,UAAU;AAGzD,QAAI,SAAS,SAAS,SAAS,GAAG;AACjC,cAAQ,IAAI,oBAAoB,0BAA0B,GAAG,WAAW,QAAQ,GAAG;AAAA,IACpF;AAGA,QAAI,GAAG,WAAW,QAAQ,KAAK,GAAG,SAAS,QAAQ,EAAE,YAAY,GAAG;AACnE,cAAQ,IAAI,iDAA8C,UAAU;AACpE,aAAO,UAAU,KAAK,KAAK,KAAK,KAAK,UAAU,YAAY,CAAC;AAAA,IAC7D;AAGA,QAAI,CAAC,GAAG,WAAW,QAAQ,GAAG;AAC7B,cAAQ,IAAI,8BAA2B,UAAU;AACjD,aAAO;AAAA,IACR;AAGA,UAAM,MAAM,KAAK,QAAQ,QAAQ,EAAE,YAAY;AAC/C,UAAM,cAAc,WAAW,GAAG,KAAK;AAGvC,UAAM,UAAU,GAAG,aAAa,QAAQ;AAExC,QAAI,UAAU,KAAK;AAAA,MAClB,gBAAgB;AAAA,MAChB,kBAAkB,QAAQ;AAAA,MAC1B,iBAAiB;AAAA;AAAA,MACjB,+BAA+B;AAAA,MAC/B,gCAAgC;AAAA,MAChC,gCAAgC;AAAA,IACjC,CAAC;AAED,QAAI,IAAI,OAAO;AACf,WAAO;AAAA,EAER,SAAS,OAAP;AACD,YAAQ,MAAM,2BAA2B,KAAK;AAC9C,WAAO;AAAA,EACR;AACD;AAKO,SAAS,qBAAqB,KAA2B,KAA0B,MAAwB;AACjH,MAAI,CAAC,gBAAgB,KAAK,GAAG,GAAG;AAC/B,SAAK;AAAA,EACN;AACD;",
  "names": []
}
