#!/usr/bin/env node
/**
 * Script de inicializa√ß√£o espec√≠fico para Render
 * Otimizado para limita√ß√µes de mem√≥ria e ambiente cloud
 */

const fs = require('fs');
const path = require('path');
const { spawn } = require('child_process');

console.log('üöÄ Iniciando OCBmon Showdown no Render...');

// 1. Garantir que arquivos de log existam
function ensureLogFiles() {
    const logFiles = [
        'logs/chatlog-access.txt',
        'logs/responder.jsonl', 
        'logs/errors.txt'
    ];

    // Criar pasta logs se n√£o existir
    const logsDir = path.join(process.cwd(), 'logs');
    if (!fs.existsSync(logsDir)) {
        fs.mkdirSync(logsDir, { recursive: true });
        console.log('‚úì Pasta de logs criada');
    }

    // Criar arquivos de log se n√£o existirem
    logFiles.forEach(file => {
        const filePath = path.join(process.cwd(), file);
        if (!fs.existsSync(filePath)) {
            fs.writeFileSync(filePath, '');
            console.log(`‚úì Arquivo de log criado: ${file}`);
        }
    });
}

// 2. Configurar vari√°veis de ambiente para otimiza√ß√£o
process.env.NODE_OPTIONS = '--max-old-space-size=350 --optimize-for-size'; // Limitar uso de mem√≥ria a 350MB
process.env.NODE_ENV = 'production';
process.env.GC_FORCE = 'true'; // For√ßar garbage collection
process.env.NODE_NO_WARNINGS = '1'; // Reduzir warnings

// 3. Garantir logs
ensureLogFiles();

// 4. Iniciar servidor com monitoramento de mem√≥ria
console.log('üìä Configura√ß√µes de mem√≥ria:');
console.log(`  - Limite de mem√≥ria: ${process.env.NODE_OPTIONS}`);
console.log(`  - Ambiente: ${process.env.NODE_ENV}`);

// 5. Iniciar o servidor
const serverProcess = spawn('node', ['pokemon-showdown', 'start'], {
    stdio: 'inherit',
    env: process.env
});

// 6. Monitorar uso de mem√≥ria
setInterval(() => {
    const memUsage = process.memoryUsage();
    const memMB = Math.round(memUsage.heapUsed / 1024 / 1024);
    console.log(`üìä Uso de mem√≥ria: ${memMB}MB`);
    
    if (memMB > 300) {
        console.warn('‚ö†Ô∏è  Alto uso de mem√≥ria detectado!');
    }
    
    if (memMB > 350) {
        console.error('üö® CR√çTICO: Uso de mem√≥ria muito alto!');
        // For√ßar garbage collection
        if (global.gc) {
            global.gc();
        }
    }
}, 30000); // A cada 30 segundos

serverProcess.on('close', (code) => {
    console.log(`üõë Servidor encerrado com c√≥digo: ${code}`);
});

serverProcess.on('error', (error) => {
    console.error('‚ùå Erro ao iniciar servidor:', error);
    process.exit(1);
});
